{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Q2_Market_NOR","provenance":[{"file_id":"1Hkrney7khkiVkiIW50QaojE0oxnQI-tI","timestamp":1650889819422},{"file_id":"1yQHhU7QkE8fWmCwk8bmRO8pyLsLH64Ni","timestamp":1650147672275},{"file_id":"1HPZqtqGMsJHY4w78fgYDmUHniD56El9Z","timestamp":1648938099966}],"collapsed_sections":["1xQWYxnhpO5O","0DnerPpy7_H4"],"authorship_tag":"ABX9TyPgR0R0FORRhVXqS/lV1gra"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Notes 4/25"],"metadata":{"id":"C_P4rw-SIeV1"}},{"cell_type":"markdown","source":["first option best, but still bad. lower learning rates very high batch size >100 do not work."],"metadata":{"id":"Px60gD57Iiao"}},{"cell_type":"markdown","source":["#Notes4/23"],"metadata":{"id":"1xQWYxnhpO5O"}},{"cell_type":"markdown","source":["This code right now has no external problems(i.e. het/city for the whole model) the only things to change/optimize are train/val/test sample sizes and maybe small changes on the ANN architecture. Higher Batch size.\n","\n"],"metadata":{"id":"S6WaxE4Ci9JW"}},{"cell_type":"markdown","source":["Less explained variance on pca threshold = Less PCA components = easier to manage models. Need to read more on pca threshold and write on the model. I think around 5 components are perfect"],"metadata":{"id":"OE3UJt8HPJpX"}},{"cell_type":"markdown","source":["More explained variance on PCA threshold = more components = no Hetero/city problem. The 0.95 expl. vriance wins for this reason. "],"metadata":{"id":"t1rYZ51kivpI"}},{"cell_type":"markdown","source":["#Notes 16/4"],"metadata":{"id":"0DnerPpy7_H4"}},{"cell_type":"markdown","source":["Note 1: The models immidiately overfit, maybe less neurons.\n","Note 2: Kelly's maximum OOS R2 was 1.8% per month. Our is significantly larger. Something must be wrong. 1)Check the formula, 2)check a higher/lower test sample 3) Check the momentum factor (may be same time as output)\n","Note 3: The model \"predicts\" an 1% returns every month. This is why the oos R2 comes out positive. If i put in the oos r2 denominator subtract r_test average, a more realistic number comes up. "],"metadata":{"id":"b7Vi5qKYSJuO"}},{"cell_type":"markdown","source":["HOw to solve heteroscedasticity. transform dependent variable (already done) to a log or rate. 2) vce robust. 3) (maybe not sure) UMAP is a clustering tool, this will help. but we want to cluster standard errors **4) Weighted regression/regressors (need to research a bit and ask marcin)**"],"metadata":{"id":"kxezjT0xa0R9"}},{"cell_type":"markdown","source":["16/4 After changing the neurons/layers of the models The oos r2 come out deep in the negative. Models with 3 layers immediately hit early stopping. the model can not \"learn\" fast enough."],"metadata":{"id":"HfNBIAtf1PBo"}},{"cell_type":"markdown","source":["rules of thumb: 1) Input layesr neurons = features\n","2) Hidden layer neurons rules of thumb\n","\n","*   The number of hidden layer neurons are 2/3 (or 70%to 90%) of the size of the input layer. If this is\n","insufficient then number of output layer neurons can\n","be added later on.[1]\n","\n","*   The number of hidden layer neurons should be less\n","than twice of the number of neurons in input layer. [2]\n","\n","*   The size of the hidden layer neurons is between the\n","input layer size and the output layer size.[6]\n","\n","3) Output layer = dependent variables\n","\n","\n"],"metadata":{"id":"09F29FSu8Ml4"}},{"cell_type":"markdown","source":["I will try to find the optimal dimensionality as well."],"metadata":{"id":"-X449lW-p2Hx"}},{"cell_type":"markdown","source":["#Start of Code"],"metadata":{"id":"CdRhuiG974UU"}},{"cell_type":"code","source":["# upload SWE\n","%tensorflow_version 2.x  # this line is not required unless you are in a notebook\n","# TensorFlow and tf.keras\n","import tensorflow as tf\n","from tensorflow import keras\n","\n","# Helper libraries\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","## upload everything from Q2 NOR\n","from google.colab import files\n","upload = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":"OK"}},"height":333},"id":"qUTcx-QgEbeQ","executionInfo":{"status":"ok","timestamp":1650995837364,"user_tz":-120,"elapsed":102506,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"0aae6532-a700-4b7d-a23b-ebed6847f56d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["`%tensorflow_version` only switches the major version: 1.x or 2.x.\n","You set: `2.x  # this line is not required unless you are in a notebook`. This will be interpreted as: `2.x`.\n","\n","\n","TensorFlow is already loaded. Please restart the runtime to change versions.\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-8a4f8428-8d8a-4d29-9a15-edcb4848014b\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-8a4f8428-8d8a-4d29-9a15-edcb4848014b\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving all_regressors_nor.xlsx to all_regressors_nor (1).xlsx\n","Saving market_returns.csv to market_returns (2).csv\n","Saving monthly_index_inputs_norway.xlsx to monthly_index_inputs_norway (1).xlsx\n","Saving NOR_factor_inputs.xlsx to NOR_factor_inputs (1).xlsx\n","Saving Other Data to input NOR.xlsx to Other Data to input NOR (1).xlsx\n","Saving Risk Free Norway.xlsx to Risk Free Norway (1).xlsx\n"]}]},{"cell_type":"code","source":["'''\n","!pip install umap-learn[plot]\n","!pip install holoviews\n","!pip install -U ipykernel\n","'''"],"metadata":{"id":"82U-YEGDiVfa","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1650062704460,"user_tz":-120,"elapsed":16,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"fee2f273-d5f9-4b6f-9da2-3907c6737787"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n!pip install umap-learn[plot]\\n!pip install holoviews\\n!pip install -U ipykernel\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["#import umap\n"],"metadata":{"id":"zjpGn8jJm-w4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%tensorflow_version 2.x  # this line is not required unless you are in a notebook\n","# TensorFlow and tf.keras\n","import tensorflow as tf\n","from tensorflow import keras\n","from sklearn.decomposition import PCA\n","\n","# Helper libraries\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"83hOkstPlEK_","executionInfo":{"status":"ok","timestamp":1650995837365,"user_tz":-120,"elapsed":11,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"339cd91a-c287-4e92-93d1-5e0eecdc3b5e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["`%tensorflow_version` only switches the major version: 1.x or 2.x.\n","You set: `2.x  # this line is not required unless you are in a notebook`. This will be interpreted as: `2.x`.\n","\n","\n","TensorFlow is already loaded. Please restart the runtime to change versions.\n"]}]},{"cell_type":"code","source":["# Historical risk-free rate\n","risk_free_nor = pd.read_excel('Risk Free Norway.xlsx') # read data\n","risk_free_nor_array = risk_free_nor.to_numpy() # important in order to be able to process data\n","\n","rf_nor_t1 = risk_free_nor_array[112:324,1]/100 # risk free t-1 4/2003-11/2020\n","rf_nor = risk_free_nor_array[113:325,1]/100 # FOR 5/2003 TO 12/2020\n","\n","print(risk_free_nor[113:325])\n","rf_nor.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gOdXLNo-uWAd","executionInfo":{"status":"ok","timestamp":1650995837365,"user_tz":-120,"elapsed":8,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"703f2ecb-90b8-4699-dcd6-ea83b7e35b7f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["          Date  Annualized   ret     no\n","113 2003-05-01    0.516897  5.00  226.0\n","114 2003-06-01    0.498054  4.85  225.0\n","115 2003-07-01    0.395612  4.00  224.0\n","116 2003-08-01    0.325337  3.38  223.0\n","117 2003-09-01    0.262802  2.80  222.0\n","..         ...         ...   ...    ...\n","320 2020-08-01    0.000000  0.00   19.0\n","321 2020-09-01    0.000000  0.00   18.0\n","322 2020-10-01    0.000000  0.00   17.0\n","323 2020-11-01    0.000000  0.00   16.0\n","324 2020-12-01    0.000000  0.00   15.0\n","\n","[212 rows x 4 columns]\n"]},{"output_type":"execute_result","data":{"text/plain":["(212,)"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["#All regressors here"],"metadata":{"id":"w1PEAh1-52Cj"}},{"cell_type":"code","source":["\n","inputs_monthly = pd.read_excel(\"all_regressors_nor.xlsx\") # Other Data has all the inputs possible\n","\n","inputs_array = inputs_monthly.to_numpy() # important in order to be able to process data\n","inputs_array_df = pd.DataFrame(inputs_array)\n","print(inputs_array_df) \n","# WARNING DATA ARE FOR START OF MONTH\n","# Data displayed do not have names in the columns, this is not a problem because we cannot see the weights right now."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"idl1orqwv-2u","executionInfo":{"status":"ok","timestamp":1650995839104,"user_tz":-120,"elapsed":1744,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"5001d723-4e8c-4198-b7c8-2d0e3e980a2a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["           0         1         2           3         4         5         6    \\\n","0    10.660000  3.510000  1.180000  699.080000  1.510000 -0.200000 -0.040000   \n","1     9.376163  3.616884  1.244844  441.443487  1.162384 -0.173371 -0.035080   \n","2     9.220486  3.729730  1.290097  264.483690  1.562129  0.823969  0.157269   \n","3     9.820000  3.830000  1.320000  152.570025  2.420000  2.449999  0.470000   \n","4    10.801736  3.899159  1.338792   90.071911  3.446759  4.362696  0.836064   \n","..         ...       ...       ...         ...       ...       ...       ...   \n","207  19.050007  4.739993  1.249999  261.768049  1.650026  3.220022  0.590004   \n","208  19.084385  4.995171  1.295260  375.671345  0.118384  2.335239  0.429079   \n","209  19.465919  5.118732  1.349521  491.490406 -1.364187  1.818806  0.337096   \n","210  19.670001  5.169999  1.399999  553.099668 -1.950003  1.620001  0.300000   \n","211  19.334184  5.192622  1.436100  523.997478 -1.105442  1.683207  0.304569   \n","\n","          7         8          9    ...       167       168       169  \\\n","0   -0.150000  8.150000   2.970000  ... -0.041005  0.066056 -0.089207   \n","1   -0.101388  8.642740   2.415590  ...  0.002945  0.016747  0.036555   \n","2    0.442889  8.913525   2.421139  ... -0.072951 -0.083213 -0.093539   \n","3    1.310000  9.030000   2.780000  ... -0.010215 -0.017184 -0.004011   \n","4    2.327110  9.059808   3.285528  ... -0.040790  0.003406 -0.001900   \n","..        ...       ...        ...  ...       ...       ...       ...   \n","207  2.650017  8.530020  15.640007  ... -0.069482 -0.028730 -0.091995   \n","208  1.964320  7.546020  15.246487  ...  0.005040 -0.011443 -0.021383   \n","209  1.530451  6.673973  14.736386  ...  0.012877 -0.015503 -0.033043   \n","210  1.360001  6.100008  14.140013  ... -0.006598 -0.007401  0.009461   \n","211  1.447707  5.941815  13.616694  ...  0.058991  0.085097  0.070636   \n","\n","          170       171       172       173       174       175       176  \n","0    0.094818  0.022228 -0.110372 -0.121946  0.031879 -0.032039  0.016730  \n","1    0.012113  0.013128  0.036225 -0.004878  0.034036  0.017201  0.007791  \n","2    0.077167 -0.069461  0.008549  0.026109 -0.062358  0.010892 -0.063475  \n","3   -0.019724 -0.008427 -0.021703 -0.004441 -0.012877 -0.014249 -0.015804  \n","4   -0.002580  0.008944  0.033632  0.018330  0.002854 -0.007266  0.004531  \n","..        ...       ...       ...       ...       ...       ...       ...  \n","207  0.020866  0.049961 -0.001874  0.031897  0.056047  0.008915  0.052530  \n","208 -0.047746 -0.015293 -0.009236  0.039883 -0.000692 -0.009724 -0.008147  \n","209  0.022486  0.044980 -0.018748  0.045654  0.043567  0.007748  0.038850  \n","210  0.050979  0.003046 -0.021681 -0.027260  0.002677  0.040653 -0.010263  \n","211 -0.027043 -0.178636  0.080524 -0.197149 -0.176890 -0.082030 -0.184263  \n","\n","[212 rows x 177 columns]\n"]}]},{"cell_type":"code","source":["# regressors \n","\n","X_df = pd.DataFrame(inputs_array) \n","\n","print(X_df)\n"],"metadata":{"id":"FWnNlfbQvMwO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650995839105,"user_tz":-120,"elapsed":8,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"9541f921-5605-4439-9eb0-614a8e4cce40"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["           0         1         2           3         4         5         6    \\\n","0    10.660000  3.510000  1.180000  699.080000  1.510000 -0.200000 -0.040000   \n","1     9.376163  3.616884  1.244844  441.443487  1.162384 -0.173371 -0.035080   \n","2     9.220486  3.729730  1.290097  264.483690  1.562129  0.823969  0.157269   \n","3     9.820000  3.830000  1.320000  152.570025  2.420000  2.449999  0.470000   \n","4    10.801736  3.899159  1.338792   90.071911  3.446759  4.362696  0.836064   \n","..         ...       ...       ...         ...       ...       ...       ...   \n","207  19.050007  4.739993  1.249999  261.768049  1.650026  3.220022  0.590004   \n","208  19.084385  4.995171  1.295260  375.671345  0.118384  2.335239  0.429079   \n","209  19.465919  5.118732  1.349521  491.490406 -1.364187  1.818806  0.337096   \n","210  19.670001  5.169999  1.399999  553.099668 -1.950003  1.620001  0.300000   \n","211  19.334184  5.192622  1.436100  523.997478 -1.105442  1.683207  0.304569   \n","\n","          7         8          9    ...       167       168       169  \\\n","0   -0.150000  8.150000   2.970000  ... -0.041005  0.066056 -0.089207   \n","1   -0.101388  8.642740   2.415590  ...  0.002945  0.016747  0.036555   \n","2    0.442889  8.913525   2.421139  ... -0.072951 -0.083213 -0.093539   \n","3    1.310000  9.030000   2.780000  ... -0.010215 -0.017184 -0.004011   \n","4    2.327110  9.059808   3.285528  ... -0.040790  0.003406 -0.001900   \n","..        ...       ...        ...  ...       ...       ...       ...   \n","207  2.650017  8.530020  15.640007  ... -0.069482 -0.028730 -0.091995   \n","208  1.964320  7.546020  15.246487  ...  0.005040 -0.011443 -0.021383   \n","209  1.530451  6.673973  14.736386  ...  0.012877 -0.015503 -0.033043   \n","210  1.360001  6.100008  14.140013  ... -0.006598 -0.007401  0.009461   \n","211  1.447707  5.941815  13.616694  ...  0.058991  0.085097  0.070636   \n","\n","          170       171       172       173       174       175       176  \n","0    0.094818  0.022228 -0.110372 -0.121946  0.031879 -0.032039  0.016730  \n","1    0.012113  0.013128  0.036225 -0.004878  0.034036  0.017201  0.007791  \n","2    0.077167 -0.069461  0.008549  0.026109 -0.062358  0.010892 -0.063475  \n","3   -0.019724 -0.008427 -0.021703 -0.004441 -0.012877 -0.014249 -0.015804  \n","4   -0.002580  0.008944  0.033632  0.018330  0.002854 -0.007266  0.004531  \n","..        ...       ...       ...       ...       ...       ...       ...  \n","207  0.020866  0.049961 -0.001874  0.031897  0.056047  0.008915  0.052530  \n","208 -0.047746 -0.015293 -0.009236  0.039883 -0.000692 -0.009724 -0.008147  \n","209  0.022486  0.044980 -0.018748  0.045654  0.043567  0.007748  0.038850  \n","210  0.050979  0.003046 -0.021681 -0.027260  0.002677  0.040653 -0.010263  \n","211 -0.027043 -0.178636  0.080524 -0.197149 -0.176890 -0.082030 -0.184263  \n","\n","[212 rows x 177 columns]\n"]}]},{"cell_type":"markdown","source":["#End of data manipulation. Start of model code"],"metadata":{"id":"-tOZnTYnGw4Z"}},{"cell_type":"code","source":["#market ret\n","mkt_ret = pd.read_csv('market_returns.csv') \n","mkt_ret_array = mkt_ret.to_numpy()\n","# creating market returns for Sweden\n","mkt_ret_nor = mkt_ret_array[20446:20658] #  5/2003-12/2020\n","print(mkt_ret_nor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aXvFxiP50Mrl","executionInfo":{"status":"ok","timestamp":1650995853756,"user_tz":-120,"elapsed":257,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"13bb0e05-75a3-45f0-d146-915198768c72"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[['NOR' '2003-05-31' 161 ... 0.1454685198 0.1211859547 0.1445655198]\n"," ['NOR' '2003-06-30' 159 ... 0.0087003611 -0.01116036 0.0077163611]\n"," ['NOR' '2003-07-31' 157 ... 0.1226205064 0.0642616563 0.1220007931]\n"," ...\n"," ['NOR' '2020-10-31' 255 ... -0.047197711 -0.06433862 -0.046003858]\n"," ['NOR' '2020-11-30' 268 ... 0.2901295107 0.2304916979 0.2874249084]\n"," ['NOR' '2020-12-31' 272 ... 0.1786583098 0.101887318 0.1785983098]]\n"]}]},{"cell_type":"markdown","source":["#Excess Returns and momentum regressor Ret t-1"],"metadata":{"id":"hL0leEAtS_03"}},{"cell_type":"code","source":["# I have already put the momentum on the all_regressors file\n","'''\n","x_mkt_momemtum_nor = mkt_ret_array[20445:20657] # the 3/2003-11/2020 point us at 96\n","print(x_mkt_momemtum_nor)\n","'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6otCjlkTCbur","executionInfo":{"status":"ok","timestamp":1650895471228,"user_tz":-120,"elapsed":240,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"d2d7d9e7-70a5-4b28-889e-e8a927a78cff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[['NOR' '2003-04-30' 168 ... 0.1882648963 0.140472848 0.1873258963]\n"," ['NOR' '2003-05-31' 161 ... 0.1454685198 0.1211859547 0.1445655198]\n"," ['NOR' '2003-06-30' 159 ... 0.0087003611 -0.01116036 0.0077163611]\n"," ...\n"," ['NOR' '2020-09-30' 253 ... -0.047267615 -0.074649569 -0.04633402]\n"," ['NOR' '2020-10-31' 255 ... -0.047197711 -0.06433862 -0.046003858]\n"," ['NOR' '2020-11-30' 268 ... 0.2901295107 0.2304916979 0.2874249084]]\n"]}]},{"cell_type":"code","source":["ex_mkt_ret_nor = mkt_ret_nor[:,7] - rf_nor\n","#ex_momentum_mkt_nor = x_mkt_momemtum_nor[:,7] - rf_nor_t1\n","#X_df.insert(1, 'ex_momentum_mkt_nor (ret_vw)', ex_momentum_mkt_nor, True)\n","X_df"],"metadata":{"id":"XzBSpZoFnvpp","colab":{"base_uri":"https://localhost:8080/","height":487},"executionInfo":{"status":"ok","timestamp":1650995957692,"user_tz":-120,"elapsed":662,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"a0633053-de31-4258-dea9-a93ee0de1036"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           0         1         2           3         4         5         6    \\\n","0    10.660000  3.510000  1.180000  699.080000  1.510000 -0.200000 -0.040000   \n","1     9.376163  3.616884  1.244844  441.443487  1.162384 -0.173371 -0.035080   \n","2     9.220486  3.729730  1.290097  264.483690  1.562129  0.823969  0.157269   \n","3     9.820000  3.830000  1.320000  152.570025  2.420000  2.449999  0.470000   \n","4    10.801736  3.899159  1.338792   90.071911  3.446759  4.362696  0.836064   \n","..         ...       ...       ...         ...       ...       ...       ...   \n","207  19.050007  4.739993  1.249999  261.768049  1.650026  3.220022  0.590004   \n","208  19.084385  4.995171  1.295260  375.671345  0.118384  2.335239  0.429079   \n","209  19.465919  5.118732  1.349521  491.490406 -1.364187  1.818806  0.337096   \n","210  19.670001  5.169999  1.399999  553.099668 -1.950003  1.620001  0.300000   \n","211  19.334184  5.192622  1.436100  523.997478 -1.105442  1.683207  0.304569   \n","\n","          7         8          9    ...       167       168       169  \\\n","0   -0.150000  8.150000   2.970000  ... -0.041005  0.066056 -0.089207   \n","1   -0.101388  8.642740   2.415590  ...  0.002945  0.016747  0.036555   \n","2    0.442889  8.913525   2.421139  ... -0.072951 -0.083213 -0.093539   \n","3    1.310000  9.030000   2.780000  ... -0.010215 -0.017184 -0.004011   \n","4    2.327110  9.059808   3.285528  ... -0.040790  0.003406 -0.001900   \n","..        ...       ...        ...  ...       ...       ...       ...   \n","207  2.650017  8.530020  15.640007  ... -0.069482 -0.028730 -0.091995   \n","208  1.964320  7.546020  15.246487  ...  0.005040 -0.011443 -0.021383   \n","209  1.530451  6.673973  14.736386  ...  0.012877 -0.015503 -0.033043   \n","210  1.360001  6.100008  14.140013  ... -0.006598 -0.007401  0.009461   \n","211  1.447707  5.941815  13.616694  ...  0.058991  0.085097  0.070636   \n","\n","          170       171       172       173       174       175       176  \n","0    0.094818  0.022228 -0.110372 -0.121946  0.031879 -0.032039  0.016730  \n","1    0.012113  0.013128  0.036225 -0.004878  0.034036  0.017201  0.007791  \n","2    0.077167 -0.069461  0.008549  0.026109 -0.062358  0.010892 -0.063475  \n","3   -0.019724 -0.008427 -0.021703 -0.004441 -0.012877 -0.014249 -0.015804  \n","4   -0.002580  0.008944  0.033632  0.018330  0.002854 -0.007266  0.004531  \n","..        ...       ...       ...       ...       ...       ...       ...  \n","207  0.020866  0.049961 -0.001874  0.031897  0.056047  0.008915  0.052530  \n","208 -0.047746 -0.015293 -0.009236  0.039883 -0.000692 -0.009724 -0.008147  \n","209  0.022486  0.044980 -0.018748  0.045654  0.043567  0.007748  0.038850  \n","210  0.050979  0.003046 -0.021681 -0.027260  0.002677  0.040653 -0.010263  \n","211 -0.027043 -0.178636  0.080524 -0.197149 -0.176890 -0.082030 -0.184263  \n","\n","[212 rows x 177 columns]"],"text/html":["\n","  <div id=\"df-05bf5669-ae00-46b5-bb80-0cbd0e5cb9ac\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>...</th>\n","      <th>167</th>\n","      <th>168</th>\n","      <th>169</th>\n","      <th>170</th>\n","      <th>171</th>\n","      <th>172</th>\n","      <th>173</th>\n","      <th>174</th>\n","      <th>175</th>\n","      <th>176</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10.660000</td>\n","      <td>3.510000</td>\n","      <td>1.180000</td>\n","      <td>699.080000</td>\n","      <td>1.510000</td>\n","      <td>-0.200000</td>\n","      <td>-0.040000</td>\n","      <td>-0.150000</td>\n","      <td>8.150000</td>\n","      <td>2.970000</td>\n","      <td>...</td>\n","      <td>-0.041005</td>\n","      <td>0.066056</td>\n","      <td>-0.089207</td>\n","      <td>0.094818</td>\n","      <td>0.022228</td>\n","      <td>-0.110372</td>\n","      <td>-0.121946</td>\n","      <td>0.031879</td>\n","      <td>-0.032039</td>\n","      <td>0.016730</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>9.376163</td>\n","      <td>3.616884</td>\n","      <td>1.244844</td>\n","      <td>441.443487</td>\n","      <td>1.162384</td>\n","      <td>-0.173371</td>\n","      <td>-0.035080</td>\n","      <td>-0.101388</td>\n","      <td>8.642740</td>\n","      <td>2.415590</td>\n","      <td>...</td>\n","      <td>0.002945</td>\n","      <td>0.016747</td>\n","      <td>0.036555</td>\n","      <td>0.012113</td>\n","      <td>0.013128</td>\n","      <td>0.036225</td>\n","      <td>-0.004878</td>\n","      <td>0.034036</td>\n","      <td>0.017201</td>\n","      <td>0.007791</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>9.220486</td>\n","      <td>3.729730</td>\n","      <td>1.290097</td>\n","      <td>264.483690</td>\n","      <td>1.562129</td>\n","      <td>0.823969</td>\n","      <td>0.157269</td>\n","      <td>0.442889</td>\n","      <td>8.913525</td>\n","      <td>2.421139</td>\n","      <td>...</td>\n","      <td>-0.072951</td>\n","      <td>-0.083213</td>\n","      <td>-0.093539</td>\n","      <td>0.077167</td>\n","      <td>-0.069461</td>\n","      <td>0.008549</td>\n","      <td>0.026109</td>\n","      <td>-0.062358</td>\n","      <td>0.010892</td>\n","      <td>-0.063475</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>9.820000</td>\n","      <td>3.830000</td>\n","      <td>1.320000</td>\n","      <td>152.570025</td>\n","      <td>2.420000</td>\n","      <td>2.449999</td>\n","      <td>0.470000</td>\n","      <td>1.310000</td>\n","      <td>9.030000</td>\n","      <td>2.780000</td>\n","      <td>...</td>\n","      <td>-0.010215</td>\n","      <td>-0.017184</td>\n","      <td>-0.004011</td>\n","      <td>-0.019724</td>\n","      <td>-0.008427</td>\n","      <td>-0.021703</td>\n","      <td>-0.004441</td>\n","      <td>-0.012877</td>\n","      <td>-0.014249</td>\n","      <td>-0.015804</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10.801736</td>\n","      <td>3.899159</td>\n","      <td>1.338792</td>\n","      <td>90.071911</td>\n","      <td>3.446759</td>\n","      <td>4.362696</td>\n","      <td>0.836064</td>\n","      <td>2.327110</td>\n","      <td>9.059808</td>\n","      <td>3.285528</td>\n","      <td>...</td>\n","      <td>-0.040790</td>\n","      <td>0.003406</td>\n","      <td>-0.001900</td>\n","      <td>-0.002580</td>\n","      <td>0.008944</td>\n","      <td>0.033632</td>\n","      <td>0.018330</td>\n","      <td>0.002854</td>\n","      <td>-0.007266</td>\n","      <td>0.004531</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>207</th>\n","      <td>19.050007</td>\n","      <td>4.739993</td>\n","      <td>1.249999</td>\n","      <td>261.768049</td>\n","      <td>1.650026</td>\n","      <td>3.220022</td>\n","      <td>0.590004</td>\n","      <td>2.650017</td>\n","      <td>8.530020</td>\n","      <td>15.640007</td>\n","      <td>...</td>\n","      <td>-0.069482</td>\n","      <td>-0.028730</td>\n","      <td>-0.091995</td>\n","      <td>0.020866</td>\n","      <td>0.049961</td>\n","      <td>-0.001874</td>\n","      <td>0.031897</td>\n","      <td>0.056047</td>\n","      <td>0.008915</td>\n","      <td>0.052530</td>\n","    </tr>\n","    <tr>\n","      <th>208</th>\n","      <td>19.084385</td>\n","      <td>4.995171</td>\n","      <td>1.295260</td>\n","      <td>375.671345</td>\n","      <td>0.118384</td>\n","      <td>2.335239</td>\n","      <td>0.429079</td>\n","      <td>1.964320</td>\n","      <td>7.546020</td>\n","      <td>15.246487</td>\n","      <td>...</td>\n","      <td>0.005040</td>\n","      <td>-0.011443</td>\n","      <td>-0.021383</td>\n","      <td>-0.047746</td>\n","      <td>-0.015293</td>\n","      <td>-0.009236</td>\n","      <td>0.039883</td>\n","      <td>-0.000692</td>\n","      <td>-0.009724</td>\n","      <td>-0.008147</td>\n","    </tr>\n","    <tr>\n","      <th>209</th>\n","      <td>19.465919</td>\n","      <td>5.118732</td>\n","      <td>1.349521</td>\n","      <td>491.490406</td>\n","      <td>-1.364187</td>\n","      <td>1.818806</td>\n","      <td>0.337096</td>\n","      <td>1.530451</td>\n","      <td>6.673973</td>\n","      <td>14.736386</td>\n","      <td>...</td>\n","      <td>0.012877</td>\n","      <td>-0.015503</td>\n","      <td>-0.033043</td>\n","      <td>0.022486</td>\n","      <td>0.044980</td>\n","      <td>-0.018748</td>\n","      <td>0.045654</td>\n","      <td>0.043567</td>\n","      <td>0.007748</td>\n","      <td>0.038850</td>\n","    </tr>\n","    <tr>\n","      <th>210</th>\n","      <td>19.670001</td>\n","      <td>5.169999</td>\n","      <td>1.399999</td>\n","      <td>553.099668</td>\n","      <td>-1.950003</td>\n","      <td>1.620001</td>\n","      <td>0.300000</td>\n","      <td>1.360001</td>\n","      <td>6.100008</td>\n","      <td>14.140013</td>\n","      <td>...</td>\n","      <td>-0.006598</td>\n","      <td>-0.007401</td>\n","      <td>0.009461</td>\n","      <td>0.050979</td>\n","      <td>0.003046</td>\n","      <td>-0.021681</td>\n","      <td>-0.027260</td>\n","      <td>0.002677</td>\n","      <td>0.040653</td>\n","      <td>-0.010263</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>19.334184</td>\n","      <td>5.192622</td>\n","      <td>1.436100</td>\n","      <td>523.997478</td>\n","      <td>-1.105442</td>\n","      <td>1.683207</td>\n","      <td>0.304569</td>\n","      <td>1.447707</td>\n","      <td>5.941815</td>\n","      <td>13.616694</td>\n","      <td>...</td>\n","      <td>0.058991</td>\n","      <td>0.085097</td>\n","      <td>0.070636</td>\n","      <td>-0.027043</td>\n","      <td>-0.178636</td>\n","      <td>0.080524</td>\n","      <td>-0.197149</td>\n","      <td>-0.176890</td>\n","      <td>-0.082030</td>\n","      <td>-0.184263</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>212 rows × 177 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-05bf5669-ae00-46b5-bb80-0cbd0e5cb9ac')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-05bf5669-ae00-46b5-bb80-0cbd0e5cb9ac button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-05bf5669-ae00-46b5-bb80-0cbd0e5cb9ac');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["mkt_ret_nor_df = pd.DataFrame(mkt_ret_nor)\n","\n","y = ex_mkt_ret_nor # mkt_vw\n","\n","# I print this out to see it as panel data\n","y_df = pd.DataFrame(y) # This represents output or column: # mkt_vw\n","y_df.columns = ['mkt_vw']\n","y_df.shape\n","#print(y_df)\n","#print(y)\n","#print(len(y))"],"metadata":{"id":"-ORpkz4mn-A_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650995964185,"user_tz":-120,"elapsed":261,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"3463757a-d7af-4c3d-a671-30fe57dd0261"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(212, 1)"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["#This code is for the ANN"],"metadata":{"id":"20DfAXnMusN9"}},{"cell_type":"code","source":["# 1. Packages Importing\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"FOs-4dZpttOd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# This code is for UMAP/PCA to Preprocess our inputs"],"metadata":{"id":"M7NGJpNgc1Qd"}},{"cell_type":"code","source":["X_df = X_df.to_numpy()\n"],"metadata":{"id":"lc7fBu8_fmWt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# This embedding data will be the new inputs for our model!!! \n","# Delete the comment if UMAP\n","'''\n","embedding = umap.UMAP(n_neighbors=3,\n","                      min_dist=0.3,\n","                      metric='correlation').fit_transform(X_df.data)\n","embedding.shape\n","'''"],"metadata":{"id":"eTCE6HeGf5DM","executionInfo":{"status":"ok","timestamp":1650737250665,"user_tz":-120,"elapsed":9,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":53},"outputId":"20658b56-1476-419c-ded3-83cd2b3efe31"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nembedding = umap.UMAP(n_neighbors=3,\\n                      min_dist=0.3,\\n                      metric='correlation').fit_transform(X_df.data)\\nembedding.shape\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":173}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_absolute_error,mean_squared_error, explained_variance_score, r2_score\n","x_train, x_test, y_train, y_test = train_test_split(X_df, y_df, test_size = 0.25, random_state = 0,shuffle=False)"],"metadata":{"id":"DPleP0pli_TQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["After Marcin's comments ,Note that the random state here takes the time series data randomly and not in a linear way. \n","\n","Problem fixed with Shuffle=False\n","\n"],"metadata":{"id":"s3HspoA-snC4"}},{"cell_type":"code","source":["# this code was to have a final look at inputs/outputs\n","'''\n","X_test = pd.DataFrame(x_test)\n","X_test.to_excel(\"output.xlsx\")\n","Y_test = pd.DataFrame(y_test)\n","Y_test.to_excel(\"output1.xlsx\")  \n","'''"],"metadata":{"id":"MzRH7OxtpUtE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_train = y_train.to_numpy()\n","y_test = y_test.to_numpy()"],"metadata":{"id":"-9fVWOj3oV10","colab":{"base_uri":"https://localhost:8080/","height":183},"executionInfo":{"status":"error","timestamp":1650996229431,"user_tz":-120,"elapsed":258,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"def8188f-8d70-4023-df88-ce9e459910a3"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-f2d066c8dbae>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'to_numpy'"]}]},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","# Normalize and scale feature data\n","from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","scaler.fit(x_train)\n","x_train = scaler.transform(x_train) # we just scale the test training data set to be between 0 and 1\n","x_test = scaler.transform(x_test) # we just scale the test data set to be between 0 and 1"],"metadata":{"id":"J4o9qnmGi5rz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Keep if PCA\n","#ALWAYS SCALE BEFORE PCA!!!\n","# threshold 95% of variance\n","# PCA adds more components and seems to spolve the hetersoscedasticity problem as well!!\n","# the pca 0.95 needs googlgling but it keeps or produces   the components that show 95% of variance\n","\n","pca = PCA(n_components = 0.95)\n"," \n","x_train = pca.fit_transform(x_train)\n","x_test = pca.transform(x_test)"],"metadata":{"id":"ppIzapAXqMuP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train.shape # to show how many features PCA left"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UiGXl-rh_Vgx","executionInfo":{"status":"ok","timestamp":1650996398648,"user_tz":-120,"elapsed":293,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"191452f8-59eb-44e5-a41d-ef337b5bea38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(159, 52)"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["# This code does the same task as the code above\n","#it selects the optimal PCA components\n","#pca.fit(x_train)\n","#cumsum = np.cumsum(pca.explained_variance_ratio_)\n","#d = np.argmax(cumsum >= 0.95) + 1"],"metadata":{"id":"cq_noYyKrrvS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_train = y_train.reshape(159,)\n","\n","y_test = y_test.reshape(53,) # this solves problems with the metrics in the cell down below"],"metadata":{"id":"eIfeOxB9hS-H"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Note: According to Marcin ALL models Should have early stopping"],"metadata":{"id":"fLZ9nAWaKUdi"}},{"cell_type":"code","source":["from tensorflow.keras.callbacks import EarlyStopping\n","# help(EarlyStopping)\n","early_stop = EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=10) \n","# This callback will stop the training when there is no improvement in\n","# the loss for three consecutive epochs."],"metadata":{"id":"dBNlDuyRPVJ0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#First option: 3 layers, Many neurons, w/ Dropout\n","\n"],"metadata":{"id":"DbMqdjP4xCqM"}},{"cell_type":"code","source":["from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.metrics import Accuracy\n","from sklearn.metrics import mean_absolute_percentage_error"],"metadata":{"id":"EV4WVldZMDW9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = Sequential()\n","\n","#model.add(Dense(5,activation='relu'))\n","#model.add(Dropout(0.25))\n","#model.add(Dense(3,activation='relu'))\n","#model.add(Dense(3,activation='relu'))\n","\n","model.add(Dense(52,activation='relu'))\n","model.add(Dropout(0.25))\n","model.add(Dense(40,activation='relu'))\n","model.add(Dense(40,activation='relu'))\n","\n","model.add(Dense(1))\n","opt = tf.keras.optimizers.Adam() #(learning_rate=0.0005) changing the learning rate does not help this is not an impactful hyperparameter to change\n","model.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])\n"],"metadata":{"id":"QHstHibjv9pH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_test = np.asarray(x_test).astype('float32') #command to fix ValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float).\n","x_train = np.asarray(x_train).astype('float32')\n","y_test = np.asarray(y_test).astype('float32')\n","y_train = np.asarray(y_train).astype('float32')"],"metadata":{"id":"M0K_QukMwN8D"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The validation split here is to proportionally split your training set The first set is used for training and the 2nd set for validation after each epoch. Having the test set as validation data is wrong because test data are out of sample and supposed to be unknown. This code is competition compliant, so we should move on with this."],"metadata":{"id":"s_xUFGF1tnpu"}},{"cell_type":"markdown","source":["According to Marcin Batch size=2 is very small, also epochs=50 are very small."],"metadata":{"id":"0dDslyiqLF_d"}},{"cell_type":"code","source":["model.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0) #validation split is for x_train "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NhiwPUbQwUL0","executionInfo":{"status":"ok","timestamp":1650997631569,"user_tz":-120,"elapsed":2238,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"fad47799-6d70-45d0-97d1-7c42b1eec130"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 23: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fa7739b4c10>"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["loss_df = pd.DataFrame(model.history.history) # my loss DataFrame\n","\n","pd.DataFrame(model.history.history)\n","loss_df.plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"YLSdpJPWwXef","executionInfo":{"status":"ok","timestamp":1650997651031,"user_tz":-120,"elapsed":8571,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"b1cb7aac-01f6-484b-84e4-dc507deed8e8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa76f14de90>"]},"metadata":{},"execution_count":32},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model.evaluate(x_test, y_test, verbose=0)\n","model.evaluate(x_train, y_train, verbose=0)\n","test_predictions = model.predict(x_test)\n","test_predictions = pd.Series(test_predictions.reshape(53,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"vqKKfyeswdob"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_predictions = np.asarray(test_predictions).astype('float32')"],"metadata":{"id":"ouDRbOjlndi0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.evaluate(x_test,y_test)\n","model.evaluate(x_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x6Wnu9QFhgaU","executionInfo":{"status":"ok","timestamp":1650997991666,"user_tz":-120,"elapsed":286,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"fdc6bd6f-2ce4-4caa-d473-00761896dcef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 6ms/step - loss: 0.0079\n","5/5 [==============================] - 0s 3ms/step - loss: 0.0030\n"]},{"output_type":"execute_result","data":{"text/plain":["0.003032635897397995"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["# So, what I could do is say, create a scatterplot, based of this data in my prediction dataframe.\n","sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df)\n","\n","# And we see this result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"id":"ED_gt3G_wfhJ","executionInfo":{"status":"ok","timestamp":1650998232648,"user_tz":-120,"elapsed":633,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"3396b323-46e4-4e9e-fa5c-84b7d2b3bc41"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa773308f10>"]},"metadata":{},"execution_count":36},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["test_predictions.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D-Zeqz-9YB0R","executionInfo":{"status":"ok","timestamp":1650998239097,"user_tz":-120,"elapsed":258,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"40e73c83-9de1-491e-c45f-32eda5ef5682"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(53,)"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["y_test = y_test.reshape(53,) # this solves problems with the metrics in the cell down below"],"metadata":{"id":"HYoDFtimpXHP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Mean absolute error\n","mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","\n","explained_variance_score(y_test, test_predictions)\n","\n","# Mean squared error\n","MSE_ANN = mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean absolute error\n","MAE_ANN = mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","RMSE_ANN = mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","# Mean Absolute Percentage error\n","MAPE_ANN = mean_absolute_percentage_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","\n","#r_squared_ANN = r2_score(y_test, test_predictions) #r2 works but is the wrong formula, also WHY does it give back a result???\n","SS_residual_ANN = sum((y_test-test_predictions)**2) \n","SS_Total_ANN = sum((y_test)**2)   \n","r_squared_ANN = 1- (SS_residual_ANN/SS_Total_ANN) #correct formula but does not work.\n","\n","print(\"R2=\",r_squared_ANN)\n","print(MSE_ANN)\n","print(MAE_ANN)\n","print(MAPE_ANN)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UM0_orgwwi4B","executionInfo":{"status":"ok","timestamp":1650998242469,"user_tz":-120,"elapsed":3,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"36bedf3f-4e16-437d-e9ad-0b03d5e6f3c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R2= -0.5866137739488979\n","0.007852552\n","0.06577611\n","2.9932013\n"]}]},{"cell_type":"code","source":["test_predictions.shape "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9tpIknZ5uS0Q","executionInfo":{"status":"ok","timestamp":1650998272679,"user_tz":-120,"elapsed":332,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"3a2d7c9f-654e-4124-e3e9-032880a8e1a9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(53,)"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RTvRm5GHo86x","executionInfo":{"status":"ok","timestamp":1650998274345,"user_tz":-120,"elapsed":3,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"4f6aa3a4-6e69-46fc-871f-cc2ab41945df"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(53,)"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["# What we can also compare is our predictions, and we can plot them out, against a perfect fit.\n","\n","plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"KTGCBD4Gw8RB","executionInfo":{"status":"ok","timestamp":1650998275998,"user_tz":-120,"elapsed":8,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"06bc58dd-c75d-4627-85dc-6ed9b3bf48c3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fa77332b090>]"]},"metadata":{},"execution_count":42},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x=x_test[:,0], y=(y_test-test_predictions), data = pred_df) #residual graph"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"_cdFdKODbk1k","executionInfo":{"status":"ok","timestamp":1650998298389,"user_tz":-120,"elapsed":628,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"4c191487-6d19-475c-bab5-3482dc8d44bf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa7733b8150>"]},"metadata":{},"execution_count":43},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Option 2 : 2 layers, neurons, w Dropout\n","\n"],"metadata":{"id":"QqrCSQnOypvh"}},{"cell_type":"markdown","source":["This architecture is bad change it after"],"metadata":{"id":"QC6q2qCbxn5w"}},{"cell_type":"code","source":["model_2 = Sequential()\n","\n","model_2.add(Dense(52,activation='relu'))\n","model_2.add(Dropout(0.25))\n","model_2.add(Dense(40,activation='relu'))\n","\n","#model.add(Dense(56,activation='relu')) \n","# model.add(Dense(113,activation='relu')) \n","\n","model_2.add(Dense(1))\n","opt = tf.keras.optimizers.Adam()  #(learning_rate=0.0005)\n","model_2.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])"],"metadata":{"id":"DSzJTKdvypWm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#model_2.fit(x_train, y_train, validation_data=(x_test,y_test), batch_size=1, epochs=50, callbacks=[early_stop])\n","model_2.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"89WyIBvrywo1","executionInfo":{"status":"ok","timestamp":1650998619914,"user_tz":-120,"elapsed":7773,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"8bd469b9-d657-478b-a713-8d3e6235f381"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 89: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fa773272bd0>"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["model_loss = pd.DataFrame(model_2.history.history)\n","model_loss.plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"zOBRKG35y0O4","executionInfo":{"status":"ok","timestamp":1650998634721,"user_tz":-120,"elapsed":5325,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"a356073b-d61a-446f-ba6c-24cbd0ae7f19"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa770e748d0>"]},"metadata":{},"execution_count":46},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["This architecture does not help the model to learn"],"metadata":{"id":"IFj3OU2Xks9b"}},{"cell_type":"code","source":["loss_and_metrics = model_2.evaluate(x_test, y_test, verbose=0)\n","loss_and_metrics2 = model_2.evaluate(x_train, y_train, verbose=0)\n","test_predictions2 = model_2.predict(x_test)\n","test_predictions2 = pd.Series(test_predictions2.reshape(53,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions2],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"0YOidN2nzEmA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#r_squared_ANN_2 = r2_score(y_test, test_predictions2) # this the wrong formula for the out of sample R2\n","\n","SS_residual_ANN_2 = sum((y_test-test_predictions2)**2) \n","SS_Total_ANN_2 = sum((y_test)**2)   \n","r_squared_ANN_2 = 1 - (SS_residual_ANN_2/SS_Total_ANN_2)\n","\n","\n","print(r_squared_ANN_2)\n","\n","MAE_ANN2 = mean_absolute_error(y_test,test_predictions2)\n","MSE_ANN2 = mean_squared_error(y_test,test_predictions2)\n","RMSE_ANN2 = mean_squared_error(y_test,test_predictions2)**0.5\n","MAPE_ANN2 = mean_absolute_percentage_error(y_test,test_predictions2)\n","\n","print(MSE_ANN2)\n","print(MAE_ANN2)\n","print(MAPE_ANN2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CXnZB50QzmnW","executionInfo":{"status":"ok","timestamp":1650998777767,"user_tz":-120,"elapsed":2,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"a97ad760-f103-4d02-97d0-c3a984502a2d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-0.7562286676660002\n","0.008692019\n","0.07324608\n","4.3002677\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions2)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"HLrCoe9fzrj0","executionInfo":{"status":"ok","timestamp":1650998868256,"user_tz":-120,"elapsed":314,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"b193cb4b-fc6f-42c0-dc82-c7bc0b5a1ea8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fa770d82a10>]"]},"metadata":{},"execution_count":49},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"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AAAAaK0vv3R7IW+xRSIon3SStHGj9OijBOUSQlgGAADI18qV7ka9bbaRFi1ytXPPlRoapHvvlTrwoX2pISwDAABszkcfuS3funVzB4hI0pgxbteLP/1JakekKlX88wcAACCX996T9thDWrMmUbv2Wunqq/31hFARlgEAANItWyb17Ztau/HGxOl7KBuEZQAAgGavvip9+9uptT//WTrzTD/9wDvCMgAAwMKF7vCQZPfdJ40e7acfRAZhGQAAlK9nn5UOOSS19uijbq9kQIRlAABQjp58UvrudzNrRx7ppx9EFmEZAACUj0cflUaMSK09+6w0aJCffhB5bAoIAABK3333ScakBuWFCyVrCcpoEWEZAACUrttvdyH5pJMStVdfdSF5v/389YXYICwDAIDSc+ONLiSfc06itmyZC8l77umvL8QOYRkAAJQGa6Vf/9qF5EsvdbWtt5aWL3fPfetbfvtDLHGDHwAAiDdrpTFjpBtuSNR22EGqrZW2285fXygJhGUAABBPjY3Suee6E/aa7b679PzzUteu/vpCSSEsAwCAeNm0STr1VOnvf0/UqqulOXPc2AUQIMIyAACIh/XrpeOOk6ZPT9QGD5amTZMqKvz1hZJGWAYAANG2dq00bJj0zDOJ2vDh0pQpUqdO/vpCWSAsAwCAaPriC+nww92Nes1OPln661+l9u19dYUyw9ZxAAAgWlaulHbdVerSJRGUzztPamiQ7rmHoIxQEZYBAEA0fPih1LOn1K2b9N//utrll7tdL269VWpHbEH4GMMAAAB+LV/utnyrr0/UfvMb6Ze/9NcT0ISwDAAA/Fi6VNptt9TaxInShRf66QfIgrAMAADC9corUv/+qbU77pDOOMNPP0ALCMsAACAcCxZI+++fWvv736UTT/TTD5AHwjIAACiuuXOlQw9NrU2dKh1zjJ9+gFYgLAMAgOJ44glpyJDU2qxZ0hFH+OkHaAP2YAEAAMF65BHJmNSg/NxzkrUEZcQOYRkAAATj3ntdSB45MlFbtMiF5IMO8tcXUADCMgAAKMykSS4kn3JKovbaay4kDxjgry8gAIRlAADQNtdf70Lyuee6x8a4k/eslfbYw29vQEAIywAAIH/WSr/6lQvGY8a42jbbSO+9546l3mUXr+0BQWM3DAAAsHnWSpdeKv3hD4laVZWbSd5uO399AUVGWAYAALlt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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"2QHnVmx508yu","executionInfo":{"status":"ok","timestamp":1650998874032,"user_tz":-120,"elapsed":8,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"a6b0f6b3-c290-4589-dd74-6ba23fa972fe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa770de9110>"]},"metadata":{},"execution_count":50},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x=x_test[:,0], y=(y_test-test_predictions2), data = pred_df) #residual graph"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"vz6XNl_Ak54N","executionInfo":{"status":"ok","timestamp":1650998878127,"user_tz":-120,"elapsed":287,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"faae8d3c-442f-4cda-e401-e118ea3908fb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa770d5f390>"]},"metadata":{},"execution_count":51},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Option 3: 3 layers, pyramid rule ,w Dropout "],"metadata":{"id":"txF3mqDS1Uz_"}},{"cell_type":"code","source":["#@title\n","model_3 = Sequential()\n","\n","model_3.add(Dense(52,activation='relu')) \n","model_3.add(Dropout(0.25)) \n","model_3.add(Dense(26,activation='relu'))\n","model_3.add(Dense(13,activation='relu'))\n","\n","\n","model_3.add(Dense(1))\n","opt = tf.keras.optimizers.Adam()  #(learning_rate=0.0005)\n","model_3.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])"],"metadata":{"id":"-Le87iVN1a2y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title\n","#model_3.fit(x_train, y_train, validation_data=(x_test,y_test), batch_size=1, epochs=50, callbacks=[early_stop])\n","model_3.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R0jR1JY71mCq","executionInfo":{"status":"ok","timestamp":1650998962395,"user_tz":-120,"elapsed":1491,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"75be6f94-7de6-48d4-cec6-b8790acbd9b6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 24: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fa770de4b50>"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["#@title\n","model_loss = pd.DataFrame(model_3.history.history)\n","model_loss.plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"p0Di_27k1oIP","executionInfo":{"status":"ok","timestamp":1650998965510,"user_tz":-120,"elapsed":596,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"a8145cae-6fa3-4a6d-fd96-c5a583248c49"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa77d6ed290>"]},"metadata":{},"execution_count":54},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["By far the best model, next step is to check for het/ty"],"metadata":{"id":"FRsUfryR2IZ9"}},{"cell_type":"code","source":["#@title\n","model_3.evaluate(x_test, y_test, verbose=0)\n","model_3.evaluate(x_train, y_train, verbose=0)\n","test_predictions3 = model_3.predict(x_test)\n","test_predictions3 = pd.Series(test_predictions3.reshape(53,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions3],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"0NCVzrVk1pwb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["SS_residual_ANN_3 = sum((y_test-test_predictions3)**2) \n","SS_Total_ANN_3 = sum((y_test)**2)   \n","r_squared_ANN_3 = 1- (SS_residual_ANN_3/SS_Total_ANN_3)\n","\n","MAE_ANN3 = mean_absolute_error(y_test,test_predictions3)\n","MSE_ANN3 = mean_squared_error(y_test,test_predictions3)\n","RMSE_ANN3 = mean_squared_error(y_test,test_predictions3)**0.5\n","MAPE_ANN3 = mean_absolute_percentage_error(y_test,test_predictions3)\n","\n","#r_squared_ANN3 = r2_score(y_test, test_predictions3)\n","print(r_squared_ANN_3)\n","print(MSE_ANN3)\n","print(MAE_ANN3)\n","print(MAPE_ANN3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yZ3mJ-Ys1rC0","executionInfo":{"status":"ok","timestamp":1650998978933,"user_tz":-120,"elapsed":305,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"7a91ae97-3759-431c-d6b8-cf904fafe4db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-0.3322031932000864\n","0.00659341\n","0.06351047\n","4.734621\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions3)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"CKsy9G_l1uFK","executionInfo":{"status":"ok","timestamp":1650999007527,"user_tz":-120,"elapsed":291,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"7bdd4789-6d0e-4378-ca21-af66a6972a0d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fa77c421d90>]"]},"metadata":{},"execution_count":57},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df) # a zoomed in version of the above"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"BIAFZFpr2I8n","executionInfo":{"status":"ok","timestamp":1650999011919,"user_tz":-120,"elapsed":6,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"6ad02803-aa64-4144-dc07-bb455823a2bc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa77d4fed50>"]},"metadata":{},"execution_count":58},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x=x_test[:,0], y=(y_test-test_predictions3), data = pred_df) #residual graph for variable 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"Z053lv78-O1D","executionInfo":{"status":"ok","timestamp":1650999019815,"user_tz":-120,"elapsed":440,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"1e6bb3c3-d882-49f1-b7fa-e6986e86779c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa77d79cd50>"]},"metadata":{},"execution_count":59},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Model 4: 1 layers, neurons, w/ Dropout,"],"metadata":{"id":"yglPXZSm1K4A"}},{"cell_type":"code","source":["model_4 = Sequential()\n","\n","model_4.add(Dense(52,activation='relu'))\n","model_4.add(Dropout(0.25))\n","\n","#model_4.add(Dense(26,activation='relu'))\n","\n","#model_4.add(Dense(13,activation='relu'))\n","#model_4.add(Dense(24,activation='relu'))\n","\n","\n","model_4.add(Dense(1))\n","opt = tf.keras.optimizers.Adam()  #(learning_rate=0.0001)\n","model_4.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])\n"],"metadata":{"id":"j2RpnJL71SyQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_test = np.asarray(x_test).astype('float32') #command to fix ValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float).\n","x_train = np.asarray(x_train).astype('float32')\n","y_test = np.asarray(y_test).astype('float32')\n","y_train = np.asarray(y_train).astype('float32')"],"metadata":{"id":"dvArefyF1xE6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_4.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0)"],"metadata":{"id":"mo-6iSNz10yp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650999132729,"user_tz":-120,"elapsed":8906,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"b8b447c7-1072-459d-f72e-47c4dde8af22"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 176: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fa770c957d0>"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["loss_df = pd.DataFrame(model_4.history.history) # my loss DataFrame\n","\n","pd.DataFrame(model_4.history.history)\n","loss_df.plot()"],"metadata":{"id":"0GG2Mrs915em","colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"status":"ok","timestamp":1650999136559,"user_tz":-120,"elapsed":3838,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"540efad6-3d78-4f1c-db61-4400fdcbc2ca"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa770b6d250>"]},"metadata":{},"execution_count":67},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model_4.evaluate(x_test, y_test, verbose=0)\n","model_4.evaluate(x_train, y_train, verbose=0)\n","test_predictions4 = model_4.predict(x_test)\n","test_predictions4 = pd.Series(test_predictions4.reshape(53,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions4],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"0ANYCCeM2BnF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_predictions4 = np.asarray(test_predictions4).astype('float32')"],"metadata":{"id":"NKAlS0Nt2JtX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_4.evaluate(x_test,y_test)\n","model_4.evaluate(x_train,y_train)"],"metadata":{"id":"E_FIaN4p2KNW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650999164381,"user_tz":-120,"elapsed":241,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"8a573f51-65b9-4bef-82e6-268ad8e51e79"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 3ms/step - loss: 0.1852\n","5/5 [==============================] - 0s 2ms/step - loss: 0.0128\n"]},{"output_type":"execute_result","data":{"text/plain":["0.012768655084073544"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["# So, what I could do is say, create a scatterplot, based of this data in my prediction dataframe.\n","sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df)\n","\n","# And we see this result"],"metadata":{"id":"yY_hrtnn2Mo3","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1650999178996,"user_tz":-120,"elapsed":283,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"2fe349f2-9a52-419c-aca2-5370f8f44ee8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa770aea7d0>"]},"metadata":{},"execution_count":71},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Mean absolute error\n","mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","\n","explained_variance_score(y_test, test_predictions4)\n","\n","# Mean squared error\n","MSE_ANN_4 = mean_squared_error(y_test,test_predictions4)\n","# Mean absolute error\n","MAE_ANN_4 = mean_absolute_error(y_test,test_predictions4)\n","# Root mean squared error\n","RMSE_ANN_4 = mean_squared_error(y_test,test_predictions4)**0.5\n","\n","MAPE_ANN4 = mean_absolute_percentage_error(y_test,test_predictions4)\n","\n","#r_squared_ANN_4 = r2_score(y_test, test_predictions4) #r2 works but is the wrong formula, also WHY does it give back a result???\n","SS_residual_ANN_4 = sum((y_test-test_predictions4)**2) \n","SS_Total_ANN_4 = sum((y_test)**2)   \n","r_squared_ANN_4 = 1- (SS_residual_ANN_4/SS_Total_ANN_4) #correct formula but does not work.\n","\n","print(r_squared_ANN_4)\n","print(MSE_ANN_4)\n","print(MAE_ANN_4)\n","print(MAPE_ANN4)"],"metadata":{"id":"KOHEdEMl2PSN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650999195980,"user_tz":-120,"elapsed":260,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"86241852-e2f2-4690-fb83-0ee5d8d179ab"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-36.412651153867856\n","0.18516466\n","0.41519505\n","25.977062\n"]}]},{"cell_type":"code","source":["# What we can also compare is our predictions, and we can plot them out, against a perfect fit.\n","\n","plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions4)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"id":"YGLmIRGt2gQZ","colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"status":"ok","timestamp":1650999213718,"user_tz":-120,"elapsed":316,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"9afc3b65-862e-4273-8d95-4bcc86289cbd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fa770a1abd0>]"]},"metadata":{},"execution_count":73},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Model 5: 3 layers, pyramid neurons ,w Dropout higher"],"metadata":{"id":"knlydyPP5i5E"}},{"cell_type":"code","source":["model_5 = Sequential()\n","\n","model_5.add(Dense(52,activation='relu'))\n","model_5.add(Dropout(0.40))\n","model_5.add(Dense(26,activation='relu'))\n","model_5.add(Dense(13,activation='relu'))\n","\n","\n","model_5.add(Dense(1))\n","opt = tf.keras.optimizers.Adam()  #(learning_rate=0.0005)\n","model_5.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])"],"metadata":{"id":"w495ewJ25n0V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_test = np.asarray(x_test).astype('float32') #command to fix ValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float).\n","x_train = np.asarray(x_train).astype('float32')\n","y_test = np.asarray(y_test).astype('float32')\n","y_train = np.asarray(y_train).astype('float32')\n","model_5.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0)"],"metadata":{"id":"q_805FOk6CTD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650999289245,"user_tz":-120,"elapsed":5249,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"ae39302d-b908-4c3a-a802-1f9bbb0fac6e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 48: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fa770a12ed0>"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["loss_df = pd.DataFrame(model_5.history.history) # my loss DataFrame\n","\n","pd.DataFrame(model_5.history.history)\n","loss_df.plot()"],"metadata":{"id":"UTuBInll5_YJ","colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"status":"ok","timestamp":1650999293725,"user_tz":-120,"elapsed":313,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"7c58dcc7-141a-4f87-f533-bf2f812386fe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa770a1a650>"]},"metadata":{},"execution_count":76},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model_5.evaluate(x_test, y_test, verbose=0)\n","model_5.evaluate(x_train, y_train, verbose=0)\n","test_predictions5 = model_5.predict(x_test)\n","test_predictions5 = pd.Series(test_predictions5.reshape(53,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions5],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"Pwx9Tvi558mw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650999322613,"user_tz":-120,"elapsed":623,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"30416bc0-d0b6-412e-f949-afec1eb9a2e0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING:tensorflow:5 out of the last 9 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7fa7708e7950> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]}]},{"cell_type":"code","source":["test_predictions5 = np.asarray(test_predictions5).astype('float32')"],"metadata":{"id":"OtYZ4N8254wp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_5.evaluate(x_test,y_test)\n","model_5.evaluate(x_train,y_train)"],"metadata":{"id":"8ygduTVc53PX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650999331331,"user_tz":-120,"elapsed":531,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"872c5276-3434-4cf9-9f61-49a914d43dcf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 9ms/step - loss: 0.0062\n","5/5 [==============================] - 0s 4ms/step - loss: 0.0045\n"]},{"output_type":"execute_result","data":{"text/plain":["0.004458463750779629"]},"metadata":{},"execution_count":79}]},{"cell_type":"code","source":["# So, what I could do is say, create a scatterplot, based of this data in my prediction dataframe.\n","sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df)\n","\n","# And we see this result"],"metadata":{"id":"ZH9lWhdM5wtX","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1650999341926,"user_tz":-120,"elapsed":289,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"2157b247-81a3-4558-a90d-1c1675e279e4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fa77076d510>"]},"metadata":{},"execution_count":80},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Mean absolute error\n","mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","\n","explained_variance_score(y_test, test_predictions5)\n","\n","# Mean squared error\n","MSE_ANN_5 = mean_squared_error(y_test,test_predictions5)\n","# Mean absolute error\n","MAE_ANN_5 = mean_absolute_error(y_test,test_predictions5)\n","# Root mean squared error\n","RMSE_ANN_5 = mean_squared_error(y_test,test_predictions5)**0.5\n","\n","MAPE_ANN5 = mean_absolute_percentage_error(y_test,test_predictions5)\n","\n","#r_squared_ANN_5 = r2_score(y_test, test_predictions5) #r2 works but is the wrong formula, also WHY does it give back a result???\n","SS_residual_ANN_5 = sum((y_test-test_predictions5)**2) \n","SS_Total_ANN_5 = sum((y_test)**2)   \n","r_squared_ANN_5 = 1- (SS_residual_ANN_5/SS_Total_ANN_5) #correct formula but does not work.\n","\n","print(r_squared_ANN_5)\n","print(MSE_ANN_5)\n","print(MAE_ANN_5)\n","print(MAPE_ANN5)"],"metadata":{"id":"JFg4Nem65toR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650999345428,"user_tz":-120,"elapsed":305,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"293a1d8d-94ea-4a92-ed08-d99202d5fc51"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-0.2628113448081839\n","0.006249972\n","0.05335513\n","2.0861292\n"]}]},{"cell_type":"code","source":["# What we can also compare is our predictions, and we can plot them out, against a perfect fit.\n","\n","plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions5)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"id":"M520mxVm5s5n","colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"status":"ok","timestamp":1650999420689,"user_tz":-120,"elapsed":289,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"7134c2db-2fa6-4cf0-baaa-8b00576e7113"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fa770767090>]"]},"metadata":{},"execution_count":82},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Heteroscedasticity tests"],"metadata":{"id":"SiXhyYyaoBlq"}},{"cell_type":"code","source":["import statsmodels.api as sm\n","import statsmodels.formula.api as smf\n","import statsmodels.tools.tools as smt\n","import statsmodels.stats.diagnostic as smd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"glRV0Wu_Z7Ov","executionInfo":{"status":"ok","timestamp":1650999425965,"user_tz":-120,"elapsed":1163,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"83801a5b-2f3a-49e9-c4b9-370201af04f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"]}]},{"cell_type":"code","source":["resid = y_test-test_predictions\n","resid2 = y_test-test_predictions2\n","resid3 = y_test-test_predictions3\n","resid4 = y_test-test_predictions4\n","resid5 = y_test-test_predictions5\n","exog_het = x_test"],"metadata":{"id":"FlJ4iXv1aSGK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bptest = smd.het_breuschpagan(resid, exog_het)\n","print(\"lm:\", bptest[0], \"lm_pvalue:\", bptest[1],\"F_test_pvalue\",bptest[3])\n","# breusch pagan test het/ty for regression models\n","# a p value less than 0.05 shows hetero/ty. "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AZp32jCOaSZ2","executionInfo":{"status":"ok","timestamp":1650999512163,"user_tz":-120,"elapsed":280,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"5da441fa-8609-42dc-8e4a-f854ae58e85a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["lm: 52.987017885869136 lm_pvalue: 0.3973911412689506 F_test_pvalue 0.08943404232338166\n"]}]},{"cell_type":"code","source":["bptest2 = smd.het_breuschpagan(resid2, exog_het)\n","print(\"lm:\", bptest2[0], \"lm_pvalue:\", bptest2[1],\"F_test_pvalue\",bptest[3])\n","\n","bptest3 = smd.het_breuschpagan(resid3, exog_het)\n","print(\"lm:\", bptest3[0], \"lm_pvalue:\", bptest3[1],\"F_test_pvalue\",bptest[3])\n","\n","bptest4 = smd.het_breuschpagan(resid4, exog_het)\n","print(\"lm:\", bptest4[0], \"lm_pvalue:\", bptest4[1],\"F_test_pvalue\",bptest[3])\n","\n","bptest5 = smd.het_breuschpagan(resid5, exog_het)\n","print(\"lm:\", bptest5[0], \"lm_pvalue:\", bptest5[1],\"F_test_pvalue\",bptest[3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TxPrZ6FZpVic","executionInfo":{"status":"ok","timestamp":1650999530420,"user_tz":-120,"elapsed":4,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"9ce38a5b-25c2-46e6-a517-5a7c17eb31b8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["lm: 52.314864239655435 lm_pvalue: 0.4226888211198107 F_test_pvalue 0.08943404232338166\n","lm: 52.91502260195557 lm_pvalue: 0.40007208263085725 F_test_pvalue 0.08943404232338166\n","lm: 52.73917678324506 lm_pvalue: 0.40665003153918833 F_test_pvalue 0.08943404232338166\n","lm: 52.83552023814991 lm_pvalue: 0.4030408734013572 F_test_pvalue 0.08943404232338166\n"]}]},{"cell_type":"markdown","source":["lm p value shows for het/ty for the whole model (all x)\n","F test p values shows for het/ty for every single x. (If 1 x is het/tic then this p value is low)"],"metadata":{"id":"ZxcmfqV5qbVB"}}]}