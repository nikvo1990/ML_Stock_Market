{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Q2_Market_DNK","provenance":[{"file_id":"1bVSimhA6KJyPWObtfQz4mV39XSx4hgpa","timestamp":1650898455119},{"file_id":"1Hkrney7khkiVkiIW50QaojE0oxnQI-tI","timestamp":1650889819422},{"file_id":"1yQHhU7QkE8fWmCwk8bmRO8pyLsLH64Ni","timestamp":1650147672275},{"file_id":"1HPZqtqGMsJHY4w78fgYDmUHniD56El9Z","timestamp":1648938099966}],"collapsed_sections":["1xQWYxnhpO5O","0DnerPpy7_H4","CdRhuiG974UU"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Notes 4/25"],"metadata":{"id":"C_P4rw-SIeV1"}},{"cell_type":"markdown","source":["fifth option best. when i run it multiple times it gets better maybe it needs time to converge/ needs more patience from early stopping???"],"metadata":{"id":"Px60gD57Iiao"}},{"cell_type":"markdown","source":["#Notes4/23"],"metadata":{"id":"1xQWYxnhpO5O"}},{"cell_type":"markdown","source":["This code right now has no external problems(i.e. het/city for the whole model) the only things to change/optimize are train/val/test sample sizes and maybe small changes on the ANN architecture. Higher Batch size.\n","\n"],"metadata":{"id":"S6WaxE4Ci9JW"}},{"cell_type":"markdown","source":["Less explained variance on pca threshold = Less PCA components = easier to manage models. Need to read more on pca threshold and write on the model. I think around 5 components are perfect"],"metadata":{"id":"OE3UJt8HPJpX"}},{"cell_type":"markdown","source":["More explained variance on PCA threshold = more components = no Hetero/city problem. The 0.95 expl. vriance wins for this reason. "],"metadata":{"id":"t1rYZ51kivpI"}},{"cell_type":"markdown","source":["#Notes 16/4"],"metadata":{"id":"0DnerPpy7_H4"}},{"cell_type":"markdown","source":["Note 1: The models immidiately overfit, maybe less neurons.\n","Note 2: Kelly's maximum OOS R2 was 1.8% per month. Our is significantly larger. Something must be wrong. 1)Check the formula, 2)check a higher/lower test sample 3) Check the momentum factor (may be same time as output)\n","Note 3: The model \"predicts\" an 1% returns every month. This is why the oos R2 comes out positive. If i put in the oos r2 denominator subtract r_test average, a more realistic number comes up. "],"metadata":{"id":"b7Vi5qKYSJuO"}},{"cell_type":"markdown","source":["HOw to solve heteroscedasticity. transform dependent variable (already done) to a log or rate. 2) vce robust. 3) (maybe not sure) UMAP is a clustering tool, this will help. but we want to cluster standard errors **4) Weighted regression/regressors (need to research a bit and ask marcin)**"],"metadata":{"id":"kxezjT0xa0R9"}},{"cell_type":"markdown","source":["16/4 After changing the neurons/layers of the models The oos r2 come out deep in the negative. Models with 3 layers immediately hit early stopping. the model can not \"learn\" fast enough."],"metadata":{"id":"HfNBIAtf1PBo"}},{"cell_type":"markdown","source":["rules of thumb: 1) Input layesr neurons = features\n","2) Hidden layer neurons rules of thumb\n","\n","*   The number of hidden layer neurons are 2/3 (or 70%to 90%) of the size of the input layer. If this is\n","insufficient then number of output layer neurons can\n","be added later on.[1]\n","\n","*   The number of hidden layer neurons should be less\n","than twice of the number of neurons in input layer. [2]\n","\n","*   The size of the hidden layer neurons is between the\n","input layer size and the output layer size.[6]\n","\n","3) Output layer = dependent variables\n","\n","\n"],"metadata":{"id":"09F29FSu8Ml4"}},{"cell_type":"markdown","source":["I will try to find the optimal dimensionality as well."],"metadata":{"id":"-X449lW-p2Hx"}},{"cell_type":"markdown","source":["#Start of Code"],"metadata":{"id":"CdRhuiG974UU"}},{"cell_type":"code","source":["%tensorflow_version 2.x  # this line is not required unless you are in a notebook\n","# TensorFlow and tf.keras\n","import tensorflow as tf\n","from tensorflow import keras\n","\n","# Helper libraries\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","## upload everything from Q2 DNK\n","from google.colab import files\n","upload = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":"OK"}},"height":333},"id":"qUTcx-QgEbeQ","executionInfo":{"status":"ok","timestamp":1650899654239,"user_tz":-120,"elapsed":170833,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"fbc687e5-60c2-41d0-97c4-74b46ea89f95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["`%tensorflow_version` only switches the major version: 1.x or 2.x.\n","You set: `2.x  # this line is not required unless you are in a notebook`. This will be interpreted as: `2.x`.\n","\n","\n","TensorFlow is already loaded. Please restart the runtime to change versions.\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-11d019fb-af7e-43b2-9fe0-9aa59d17e6a7\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-11d019fb-af7e-43b2-9fe0-9aa59d17e6a7\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving all_regressors_dnk.xlsx to all_regressors_dnk (1).xlsx\n","Saving DNK_factor_inputs.xlsx to DNK_factor_inputs (1).xlsx\n","Saving market_returns.csv to market_returns.csv\n","Saving monthly_index_inputs_denmark.xlsx to monthly_index_inputs_denmark (1).xlsx\n","Saving Other Data to input DNK.xlsx to Other Data to input DNK (1).xlsx\n","Saving Risk Free denmark.xlsx.xlsm to Risk Free denmark.xlsx.xlsm\n"]}]},{"cell_type":"code","source":["'''\n","!pip install umap-learn[plot]\n","!pip install holoviews\n","!pip install -U ipykernel\n","'''"],"metadata":{"id":"82U-YEGDiVfa","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1650062704460,"user_tz":-120,"elapsed":16,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"fee2f273-d5f9-4b6f-9da2-3907c6737787"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n!pip install umap-learn[plot]\\n!pip install holoviews\\n!pip install -U ipykernel\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["#import umap\n"],"metadata":{"id":"zjpGn8jJm-w4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# upload SWE\n","%tensorflow_version 2.x  # this line is not required unless you are in a notebook\n","# TensorFlow and tf.keras\n","import tensorflow as tf\n","from tensorflow import keras\n","from sklearn.decomposition import PCA\n","\n","# Helper libraries\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"83hOkstPlEK_","executionInfo":{"status":"ok","timestamp":1650899654240,"user_tz":-120,"elapsed":8,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"7dd55105-e464-4dcf-b3b3-6d6045ef9b2f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["`%tensorflow_version` only switches the major version: 1.x or 2.x.\n","You set: `2.x  # this line is not required unless you are in a notebook`. This will be interpreted as: `2.x`.\n","\n","\n","TensorFlow is already loaded. Please restart the runtime to change versions.\n"]}]},{"cell_type":"code","source":["# Historical risk-free rate\n","risk_free_dnk = pd.read_excel('Risk Free denmark.xlsx.xlsm') # read data\n","risk_free_dnk_array = risk_free_dnk.to_numpy() # important in order to be able to process data\n","\n","rf_dnk_t1 = risk_free_dnk_array[94:324,1]/100 # risk free t-1 10/2001-11/2020\n","rf_dnk = risk_free_dnk_array[95:325,1]/100 # FOR 11/2001 TO 12/2020\n","\n","print(risk_free_dnk[95:325])\n","rf_dnk.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gOdXLNo-uWAd","executionInfo":{"status":"ok","timestamp":1650900422955,"user_tz":-120,"elapsed":546,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"4d4d49a1-6071-4e99-ab19-b3fbe63814bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["        Date  Annualized  \\\n","95   2001M11    0.311057   \n","96   2001M12    0.311057   \n","97   2002M01    0.311057   \n","98   2002M02    0.311057   \n","99   2002M03    0.311057   \n","..       ...         ...   \n","320  2020M08    0.000000   \n","321  2020M09    0.000000   \n","322  2020M10    0.000000   \n","323  2020M11    0.000000   \n","324  2020M12    0.000000   \n","\n","     The Nationalbanks official rates - Discount rate (Aug 1987-)  Unnamed: 3  \\\n","95                                                3.25                    NaN   \n","96                                                3.25                    NaN   \n","97                                                3.25                    NaN   \n","98                                                3.25                    NaN   \n","99                                                3.25                    NaN   \n","..                                                 ...                    ...   \n","320                                               0.00                    NaN   \n","321                                               0.00                    NaN   \n","322                                               0.00                    NaN   \n","323                                               0.00                    NaN   \n","324                                               0.00                    NaN   \n","\n","     Unnamed: 4  Unnamed: 5  \\\n","95          NaN         NaN   \n","96          NaN         NaN   \n","97          NaN         NaN   \n","98          NaN         NaN   \n","99          NaN         NaN   \n","..          ...         ...   \n","320         NaN         NaN   \n","321         NaN         NaN   \n","322         NaN         NaN   \n","323         NaN         NaN   \n","324         NaN         NaN   \n","\n","     Collection, calculation and publication of the T/N interest rate as well as total T/N turnover is conducted by the Danish Financial Benchmark Facility (DFBF). Questions can be directed via e-mail to dfbf-helpdesk@dfbf.dk   \n","95                                                 NaN                                                                                                                                                                              \n","96                                                 NaN                                                                                                                                                                              \n","97                                                 NaN                                                                                                                                                                              \n","98                                                 NaN                                                                                                                                                                              \n","99                                                 NaN                                                                                                                                                                              \n","..                                                 ...                                                                                                                                                                              \n","320                                                NaN                                                                                                                                                                              \n","321                                                NaN                                                                                                                                                                              \n","322                                                NaN                                                                                                                                                                              \n","323                                                NaN                                                                                                                                                                              \n","324                                                NaN                                                                                                                                                                              \n","\n","[230 rows x 7 columns]\n"]},{"output_type":"execute_result","data":{"text/plain":["(230,)"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["#All regressors here"],"metadata":{"id":"w1PEAh1-52Cj"}},{"cell_type":"code","source":["inputs_monthly = pd.read_excel(\"all_regressors_dnk.xlsx\") # Other Data has all the inputs possible\n","\n","inputs_array = inputs_monthly.to_numpy() # important in order to be able to process data\n","inputs_array_df = pd.DataFrame(inputs_array)\n","print(inputs_array_df) \n","# WARNING DATA ARE FOR START OF MONTH\n","# Data displayed do not have names in the columns, this is not a problem because we cannot see the weights right now."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"idl1orqwv-2u","executionInfo":{"status":"ok","timestamp":1650900446443,"user_tz":-120,"elapsed":3385,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"18d1ca73-72f5-45f2-decb-2885812596e4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["          0         1         2         3         4         5         6    \\\n","0    0.042556 -0.089133  0.038634  0.015199  0.040973 -0.030370  0.014807   \n","1    0.094986 -0.064485  0.034191 -0.021476 -0.023423 -0.102394  0.011009   \n","2    0.085481  0.083436 -0.039204  0.034312  0.044194  0.048286 -0.068567   \n","3    0.119040 -0.015113 -0.080411  0.116189  0.019958 -0.039994 -0.055616   \n","4    0.036006 -0.030854  0.059334 -0.023966  0.066966  0.009311  0.046147   \n","..        ...       ...       ...       ...       ...       ...       ...   \n","225 -0.064799 -0.004917 -0.108878 -0.029945 -0.092265  0.028557 -0.095274   \n","226  0.063964 -0.014971 -0.147454  0.010203  0.037169 -0.006167  0.062136   \n","227 -0.051274 -0.037219 -0.012133 -0.028017 -0.012733 -0.012204  0.057019   \n","228 -0.060282 -0.024383 -0.079252  0.000137 -0.053175  0.012491 -0.098548   \n","229  0.064797  0.034404 -0.145412  0.050607 -0.099309  0.147035 -0.072957   \n","\n","          7         8         9    ...       157       158     159     160  \\\n","0   -0.044512 -0.037702 -0.070484  ...  4.830783  1.436883  0.0168  0.2230   \n","1   -0.078058 -0.003754 -0.055643  ...  4.694000  1.499000  0.0780 -0.2733   \n","2    0.070336  0.030776  0.050740  ...  4.975471  1.778971  0.0022 -0.1721   \n","3   -0.045056  0.092531 -0.009738  ...  5.047091  1.763891 -0.0064  0.1329   \n","4   -0.035095 -0.098803  0.030861  ...  5.097650  1.767650 -0.0179  0.2150   \n","..        ...       ...       ...  ...       ...       ...     ...     ...   \n","225  0.062145  0.063160 -0.027117  ... -0.209887  0.248413  0.0636 -0.3619   \n","226  0.011019  0.030540 -0.082855  ... -0.249114  0.258486  0.0698 -0.3053   \n","227 -0.014546 -0.050572 -0.028795  ... -0.297536  0.240664 -0.0413  0.7356   \n","228  0.023827  0.039453 -0.091647  ... -0.381055  0.140745 -0.0210 -0.1023   \n","229  0.104549  0.156420 -0.121003  ... -0.400181  0.163119  0.1088 -0.0576   \n","\n","         161      162       163       164       165       166  \n","0    0.05826 -0.15160  0.070211  0.023700  0.015093  0.221954  \n","1    0.09449  0.00954  0.128956  0.029024  0.015711  0.087330  \n","2    0.03411 -0.27677  0.024345  0.046130 -0.006270  0.053759  \n","3   -0.01017  0.43856 -0.072685 -0.030306 -0.035488 -0.060731  \n","4   -0.01342 -0.11719  0.016254  0.044876  0.037296 -0.034424  \n","..       ...      ...       ...       ...       ...       ...  \n","225  0.00020 -0.37829  0.112534  0.100066  0.096582  0.095561  \n","226  0.05133 -0.26397  0.051825  0.081773  0.038164  0.080135  \n","227 -0.01426  0.28323  0.004218 -0.074574  0.004415 -0.020829  \n","228 -0.09437 -0.03862 -0.050487 -0.064288 -0.022344 -0.050206  \n","229  0.15010  0.17600  0.153893  0.230964  0.101611  0.151792  \n","\n","[230 rows x 167 columns]\n"]}]},{"cell_type":"code","source":["# regressors \n","\n","X_df = pd.DataFrame(inputs_array) \n","\n","print(X_df)\n"],"metadata":{"id":"FWnNlfbQvMwO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650900460301,"user_tz":-120,"elapsed":621,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"4809918d-93f9-4181-fac0-2d1b93a06a51"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["          0         1         2         3         4         5         6    \\\n","0    0.042556 -0.089133  0.038634  0.015199  0.040973 -0.030370  0.014807   \n","1    0.094986 -0.064485  0.034191 -0.021476 -0.023423 -0.102394  0.011009   \n","2    0.085481  0.083436 -0.039204  0.034312  0.044194  0.048286 -0.068567   \n","3    0.119040 -0.015113 -0.080411  0.116189  0.019958 -0.039994 -0.055616   \n","4    0.036006 -0.030854  0.059334 -0.023966  0.066966  0.009311  0.046147   \n","..        ...       ...       ...       ...       ...       ...       ...   \n","225 -0.064799 -0.004917 -0.108878 -0.029945 -0.092265  0.028557 -0.095274   \n","226  0.063964 -0.014971 -0.147454  0.010203  0.037169 -0.006167  0.062136   \n","227 -0.051274 -0.037219 -0.012133 -0.028017 -0.012733 -0.012204  0.057019   \n","228 -0.060282 -0.024383 -0.079252  0.000137 -0.053175  0.012491 -0.098548   \n","229  0.064797  0.034404 -0.145412  0.050607 -0.099309  0.147035 -0.072957   \n","\n","          7         8         9    ...       157       158     159     160  \\\n","0   -0.044512 -0.037702 -0.070484  ...  4.830783  1.436883  0.0168  0.2230   \n","1   -0.078058 -0.003754 -0.055643  ...  4.694000  1.499000  0.0780 -0.2733   \n","2    0.070336  0.030776  0.050740  ...  4.975471  1.778971  0.0022 -0.1721   \n","3   -0.045056  0.092531 -0.009738  ...  5.047091  1.763891 -0.0064  0.1329   \n","4   -0.035095 -0.098803  0.030861  ...  5.097650  1.767650 -0.0179  0.2150   \n","..        ...       ...       ...  ...       ...       ...     ...     ...   \n","225  0.062145  0.063160 -0.027117  ... -0.209887  0.248413  0.0636 -0.3619   \n","226  0.011019  0.030540 -0.082855  ... -0.249114  0.258486  0.0698 -0.3053   \n","227 -0.014546 -0.050572 -0.028795  ... -0.297536  0.240664 -0.0413  0.7356   \n","228  0.023827  0.039453 -0.091647  ... -0.381055  0.140745 -0.0210 -0.1023   \n","229  0.104549  0.156420 -0.121003  ... -0.400181  0.163119  0.1088 -0.0576   \n","\n","         161      162       163       164       165       166  \n","0    0.05826 -0.15160  0.070211  0.023700  0.015093  0.221954  \n","1    0.09449  0.00954  0.128956  0.029024  0.015711  0.087330  \n","2    0.03411 -0.27677  0.024345  0.046130 -0.006270  0.053759  \n","3   -0.01017  0.43856 -0.072685 -0.030306 -0.035488 -0.060731  \n","4   -0.01342 -0.11719  0.016254  0.044876  0.037296 -0.034424  \n","..       ...      ...       ...       ...       ...       ...  \n","225  0.00020 -0.37829  0.112534  0.100066  0.096582  0.095561  \n","226  0.05133 -0.26397  0.051825  0.081773  0.038164  0.080135  \n","227 -0.01426  0.28323  0.004218 -0.074574  0.004415 -0.020829  \n","228 -0.09437 -0.03862 -0.050487 -0.064288 -0.022344 -0.050206  \n","229  0.15010  0.17600  0.153893  0.230964  0.101611  0.151792  \n","\n","[230 rows x 167 columns]\n"]}]},{"cell_type":"markdown","source":["#End of data manipulation. Start of model code"],"metadata":{"id":"-tOZnTYnGw4Z"}},{"cell_type":"code","source":["#market ret\n","mkt_ret = pd.read_csv('market_returns.csv') \n","mkt_ret_array = mkt_ret.to_numpy()\n","# creating market returns for Sweden\n","mkt_ret_dnk = mkt_ret_array[6822:7052] #  11/2001-12/2020\n","print(mkt_ret_dnk)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aXvFxiP50Mrl","executionInfo":{"status":"ok","timestamp":1650900510099,"user_tz":-120,"elapsed":437,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"1086b3a8-d115-4ec4-cfca-fb1dfb6732d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[['DNK' '2001-11-30' 148 ... -0.02536099 0.0139623235 -0.02710999]\n"," ['DNK' '2001-12-31' 151 ... 0.00950293 -0.007753947 0.00801893]\n"," ['DNK' '2002-01-31' 156 ... 0.0247209931 -0.036878098 0.0233309931]\n"," ...\n"," ['DNK' '2020-10-31' 159 ... -0.022776184 -0.022414255 -0.020747988]\n"," ['DNK' '2020-11-30' 157 ... 0.1648716192 0.1015428341 0.1403171431]\n"," ['DNK' '2020-12-31' 161 ... 0.0684445136 0.0806227004 0.0683845136]]\n"]}]},{"cell_type":"markdown","source":["#Excess Returns and momentum regressor Ret t-1"],"metadata":{"id":"hL0leEAtS_03"}},{"cell_type":"code","source":["ex_mkt_ret_dnk = mkt_ret_dnk[:,7] - rf_dnk\n","#ex_momentum_mkt_dnk = x_mkt_momemtum_dnk[:,7] - rf_dnk_t1\n","#X_df.insert(1, 'ex_momentum_mkt_dnk (ret_vw)', ex_momentum_mkt_dnk, True)\n","X_df"],"metadata":{"id":"XzBSpZoFnvpp","colab":{"base_uri":"https://localhost:8080/","height":505},"executionInfo":{"status":"ok","timestamp":1650900583327,"user_tz":-120,"elapsed":5,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"982c78b5-7890-47f1-a2c1-d5e82ec57017"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            0 ex_momentum_mkt_dnk (ret_vw)         1         2         3  \\\n","0    0.042556                     0.011424 -0.089133  0.038634  0.015199   \n","1    0.094986                     0.012601 -0.064485  0.034191 -0.021476   \n","2    0.085481                    -0.009381  0.083436 -0.039204  0.034312   \n","3    0.119040                    -0.038599 -0.015113 -0.080411  0.116189   \n","4    0.036006                     0.034185 -0.030854  0.059334 -0.023966   \n","..        ...                          ...       ...       ...       ...   \n","225 -0.064799                     0.096582 -0.004917 -0.108878 -0.029945   \n","226  0.063964                     0.038164 -0.014971 -0.147454  0.010203   \n","227 -0.051274                     0.004415 -0.037219 -0.012133 -0.028017   \n","228 -0.060282                    -0.022344 -0.024383 -0.079252  0.000137   \n","229  0.064797                     0.101611  0.034404 -0.145412  0.050607   \n","\n","            4         5         6         7         8  ...       157  \\\n","0    0.040973 -0.030370  0.014807 -0.044512 -0.037702  ...  4.830783   \n","1   -0.023423 -0.102394  0.011009 -0.078058 -0.003754  ...  4.694000   \n","2    0.044194  0.048286 -0.068567  0.070336  0.030776  ...  4.975471   \n","3    0.019958 -0.039994 -0.055616 -0.045056  0.092531  ...  5.047091   \n","4    0.066966  0.009311  0.046147 -0.035095 -0.098803  ...  5.097650   \n","..        ...       ...       ...       ...       ...  ...       ...   \n","225 -0.092265  0.028557 -0.095274  0.062145  0.063160  ... -0.209887   \n","226  0.037169 -0.006167  0.062136  0.011019  0.030540  ... -0.249114   \n","227 -0.012733 -0.012204  0.057019 -0.014546 -0.050572  ... -0.297536   \n","228 -0.053175  0.012491 -0.098548  0.023827  0.039453  ... -0.381055   \n","229 -0.099309  0.147035 -0.072957  0.104549  0.156420  ... -0.400181   \n","\n","          158     159     160      161      162       163       164       165  \\\n","0    1.436883  0.0168  0.2230  0.05826 -0.15160  0.070211  0.023700  0.015093   \n","1    1.499000  0.0780 -0.2733  0.09449  0.00954  0.128956  0.029024  0.015711   \n","2    1.778971  0.0022 -0.1721  0.03411 -0.27677  0.024345  0.046130 -0.006270   \n","3    1.763891 -0.0064  0.1329 -0.01017  0.43856 -0.072685 -0.030306 -0.035488   \n","4    1.767650 -0.0179  0.2150 -0.01342 -0.11719  0.016254  0.044876  0.037296   \n","..        ...     ...     ...      ...      ...       ...       ...       ...   \n","225  0.248413  0.0636 -0.3619  0.00020 -0.37829  0.112534  0.100066  0.096582   \n","226  0.258486  0.0698 -0.3053  0.05133 -0.26397  0.051825  0.081773  0.038164   \n","227  0.240664 -0.0413  0.7356 -0.01426  0.28323  0.004218 -0.074574  0.004415   \n","228  0.140745 -0.0210 -0.1023 -0.09437 -0.03862 -0.050487 -0.064288 -0.022344   \n","229  0.163119  0.1088 -0.0576  0.15010  0.17600  0.153893  0.230964  0.101611   \n","\n","          166  \n","0    0.221954  \n","1    0.087330  \n","2    0.053759  \n","3   -0.060731  \n","4   -0.034424  \n","..        ...  \n","225  0.095561  \n","226  0.080135  \n","227 -0.020829  \n","228 -0.050206  \n","229  0.151792  \n","\n","[230 rows x 168 columns]"],"text/html":["\n","  <div id=\"df-c24771d4-d659-4cb9-9db4-ee5fecd49481\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>ex_momentum_mkt_dnk (ret_vw)</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>...</th>\n","      <th>157</th>\n","      <th>158</th>\n","      <th>159</th>\n","      <th>160</th>\n","      <th>161</th>\n","      <th>162</th>\n","      <th>163</th>\n","      <th>164</th>\n","      <th>165</th>\n","      <th>166</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.042556</td>\n","      <td>0.011424</td>\n","      <td>-0.089133</td>\n","      <td>0.038634</td>\n","      <td>0.015199</td>\n","      <td>0.040973</td>\n","      <td>-0.030370</td>\n","      <td>0.014807</td>\n","      <td>-0.044512</td>\n","      <td>-0.037702</td>\n","      <td>...</td>\n","      <td>4.830783</td>\n","      <td>1.436883</td>\n","      <td>0.0168</td>\n","      <td>0.2230</td>\n","      <td>0.05826</td>\n","      <td>-0.15160</td>\n","      <td>0.070211</td>\n","      <td>0.023700</td>\n","      <td>0.015093</td>\n","      <td>0.221954</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.094986</td>\n","      <td>0.012601</td>\n","      <td>-0.064485</td>\n","      <td>0.034191</td>\n","      <td>-0.021476</td>\n","      <td>-0.023423</td>\n","      <td>-0.102394</td>\n","      <td>0.011009</td>\n","      <td>-0.078058</td>\n","      <td>-0.003754</td>\n","      <td>...</td>\n","      <td>4.694000</td>\n","      <td>1.499000</td>\n","      <td>0.0780</td>\n","      <td>-0.2733</td>\n","      <td>0.09449</td>\n","      <td>0.00954</td>\n","      <td>0.128956</td>\n","      <td>0.029024</td>\n","      <td>0.015711</td>\n","      <td>0.087330</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.085481</td>\n","      <td>-0.009381</td>\n","      <td>0.083436</td>\n","      <td>-0.039204</td>\n","      <td>0.034312</td>\n","      <td>0.044194</td>\n","      <td>0.048286</td>\n","      <td>-0.068567</td>\n","      <td>0.070336</td>\n","      <td>0.030776</td>\n","      <td>...</td>\n","      <td>4.975471</td>\n","      <td>1.778971</td>\n","      <td>0.0022</td>\n","      <td>-0.1721</td>\n","      <td>0.03411</td>\n","      <td>-0.27677</td>\n","      <td>0.024345</td>\n","      <td>0.046130</td>\n","      <td>-0.006270</td>\n","      <td>0.053759</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.119040</td>\n","      <td>-0.038599</td>\n","      <td>-0.015113</td>\n","      <td>-0.080411</td>\n","      <td>0.116189</td>\n","      <td>0.019958</td>\n","      <td>-0.039994</td>\n","      <td>-0.055616</td>\n","      <td>-0.045056</td>\n","      <td>0.092531</td>\n","      <td>...</td>\n","      <td>5.047091</td>\n","      <td>1.763891</td>\n","      <td>-0.0064</td>\n","      <td>0.1329</td>\n","      <td>-0.01017</td>\n","      <td>0.43856</td>\n","      <td>-0.072685</td>\n","      <td>-0.030306</td>\n","      <td>-0.035488</td>\n","      <td>-0.060731</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.036006</td>\n","      <td>0.034185</td>\n","      <td>-0.030854</td>\n","      <td>0.059334</td>\n","      <td>-0.023966</td>\n","      <td>0.066966</td>\n","      <td>0.009311</td>\n","      <td>0.046147</td>\n","      <td>-0.035095</td>\n","      <td>-0.098803</td>\n","      <td>...</td>\n","      <td>5.097650</td>\n","      <td>1.767650</td>\n","      <td>-0.0179</td>\n","      <td>0.2150</td>\n","      <td>-0.01342</td>\n","      <td>-0.11719</td>\n","      <td>0.016254</td>\n","      <td>0.044876</td>\n","      <td>0.037296</td>\n","      <td>-0.034424</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>225</th>\n","      <td>-0.064799</td>\n","      <td>0.096582</td>\n","      <td>-0.004917</td>\n","      <td>-0.108878</td>\n","      <td>-0.029945</td>\n","      <td>-0.092265</td>\n","      <td>0.028557</td>\n","      <td>-0.095274</td>\n","      <td>0.062145</td>\n","      <td>0.063160</td>\n","      <td>...</td>\n","      <td>-0.209887</td>\n","      <td>0.248413</td>\n","      <td>0.0636</td>\n","      <td>-0.3619</td>\n","      <td>0.00020</td>\n","      <td>-0.37829</td>\n","      <td>0.112534</td>\n","      <td>0.100066</td>\n","      <td>0.096582</td>\n","      <td>0.095561</td>\n","    </tr>\n","    <tr>\n","      <th>226</th>\n","      <td>0.063964</td>\n","      <td>0.038164</td>\n","      <td>-0.014971</td>\n","      <td>-0.147454</td>\n","      <td>0.010203</td>\n","      <td>0.037169</td>\n","      <td>-0.006167</td>\n","      <td>0.062136</td>\n","      <td>0.011019</td>\n","      <td>0.030540</td>\n","      <td>...</td>\n","      <td>-0.249114</td>\n","      <td>0.258486</td>\n","      <td>0.0698</td>\n","      <td>-0.3053</td>\n","      <td>0.05133</td>\n","      <td>-0.26397</td>\n","      <td>0.051825</td>\n","      <td>0.081773</td>\n","      <td>0.038164</td>\n","      <td>0.080135</td>\n","    </tr>\n","    <tr>\n","      <th>227</th>\n","      <td>-0.051274</td>\n","      <td>0.004415</td>\n","      <td>-0.037219</td>\n","      <td>-0.012133</td>\n","      <td>-0.028017</td>\n","      <td>-0.012733</td>\n","      <td>-0.012204</td>\n","      <td>0.057019</td>\n","      <td>-0.014546</td>\n","      <td>-0.050572</td>\n","      <td>...</td>\n","      <td>-0.297536</td>\n","      <td>0.240664</td>\n","      <td>-0.0413</td>\n","      <td>0.7356</td>\n","      <td>-0.01426</td>\n","      <td>0.28323</td>\n","      <td>0.004218</td>\n","      <td>-0.074574</td>\n","      <td>0.004415</td>\n","      <td>-0.020829</td>\n","    </tr>\n","    <tr>\n","      <th>228</th>\n","      <td>-0.060282</td>\n","      <td>-0.022344</td>\n","      <td>-0.024383</td>\n","      <td>-0.079252</td>\n","      <td>0.000137</td>\n","      <td>-0.053175</td>\n","      <td>0.012491</td>\n","      <td>-0.098548</td>\n","      <td>0.023827</td>\n","      <td>0.039453</td>\n","      <td>...</td>\n","      <td>-0.381055</td>\n","      <td>0.140745</td>\n","      <td>-0.0210</td>\n","      <td>-0.1023</td>\n","      <td>-0.09437</td>\n","      <td>-0.03862</td>\n","      <td>-0.050487</td>\n","      <td>-0.064288</td>\n","      <td>-0.022344</td>\n","      <td>-0.050206</td>\n","    </tr>\n","    <tr>\n","      <th>229</th>\n","      <td>0.064797</td>\n","      <td>0.101611</td>\n","      <td>0.034404</td>\n","      <td>-0.145412</td>\n","      <td>0.050607</td>\n","      <td>-0.099309</td>\n","      <td>0.147035</td>\n","      <td>-0.072957</td>\n","      <td>0.104549</td>\n","      <td>0.156420</td>\n","      <td>...</td>\n","      <td>-0.400181</td>\n","      <td>0.163119</td>\n","      <td>0.1088</td>\n","      <td>-0.0576</td>\n","      <td>0.15010</td>\n","      <td>0.17600</td>\n","      <td>0.153893</td>\n","      <td>0.230964</td>\n","      <td>0.101611</td>\n","      <td>0.151792</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>230 rows × 168 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c24771d4-d659-4cb9-9db4-ee5fecd49481')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c24771d4-d659-4cb9-9db4-ee5fecd49481 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c24771d4-d659-4cb9-9db4-ee5fecd49481');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["mkt_ret_dnk_df = pd.DataFrame(mkt_ret_dnk)\n","\n","y = ex_mkt_ret_dnk # mkt_vw\n","\n","# I print this out to see it as panel data\n","y_df = pd.DataFrame(y) # This represents output or column: # mkt_vw\n","y_df.columns = ['mkt_vw']\n","y_df.shape\n","#print(y_df)\n","#print(y)\n","#print(len(y))"],"metadata":{"id":"-ORpkz4mn-A_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650900726877,"user_tz":-120,"elapsed":382,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"b23ba983-ca1b-4512-e6a1-47dd57511a9f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(230, 1)"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["#This code is for the ANN"],"metadata":{"id":"20DfAXnMusN9"}},{"cell_type":"code","source":["# 1. Packages Importing\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"FOs-4dZpttOd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# This code is for UMAP/PCA to Preprocess our inputs"],"metadata":{"id":"M7NGJpNgc1Qd"}},{"cell_type":"code","source":["X_df = X_df.to_numpy()\n"],"metadata":{"id":"lc7fBu8_fmWt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# This embedding data will be the new inputs for our model!!! \n","# Delete the comment if UMAP\n","'''\n","embedding = umap.UMAP(n_neighbors=3,\n","                      min_dist=0.3,\n","                      metric='correlation').fit_transform(X_df.data)\n","embedding.shape\n","'''"],"metadata":{"id":"eTCE6HeGf5DM","executionInfo":{"status":"ok","timestamp":1650737250665,"user_tz":-120,"elapsed":9,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":53},"outputId":"20658b56-1476-419c-ded3-83cd2b3efe31"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nembedding = umap.UMAP(n_neighbors=3,\\n                      min_dist=0.3,\\n                      metric='correlation').fit_transform(X_df.data)\\nembedding.shape\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":173}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_absolute_error,mean_squared_error, explained_variance_score, r2_score\n","x_train, x_test, y_train, y_test = train_test_split(X_df, y_df, test_size = 0.25, random_state = 0,shuffle=False)"],"metadata":{"id":"DPleP0pli_TQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Note that the random state here takes the time series data randomly and not in a linear granular way. \n","\n","After Marcin's comments i deleted the random state"],"metadata":{"id":"s3HspoA-snC4"}},{"cell_type":"code","source":["X_test = pd.DataFrame(x_test)\n","X_test.to_excel(\"output.xlsx\")\n","Y_test = pd.DataFrame(y_test)\n","Y_test.to_excel(\"output1.xlsx\")  "],"metadata":{"id":"MzRH7OxtpUtE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_train = y_train.to_numpy()\n","y_test = y_test.to_numpy()"],"metadata":{"id":"-9fVWOj3oV10"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","# normalize and scale feature data\n","from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","scaler.fit(x_train)\n","x_train = scaler.transform(x_train) # we just scale the test training data set to be between 0 and 1\n","x_test = scaler.transform(x_test) # we just scale the test data set to be between 0 and 1"],"metadata":{"id":"J4o9qnmGi5rz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Keep if PCA\n","#ALWAYS SCALE BEFORE PCA!!!\n","# threshold 95% of variance\n","# PCA adds more components and seems to spolve the hetersoscedasticity problem as well!!\n","# the pca 0.95 needs googlgling but it keeps the components that show 95% of explained variance\n","\n","pca = PCA(n_components = 0.95)\n"," \n","x_train = pca.fit_transform(x_train)\n","x_test = pca.transform(x_test)"],"metadata":{"id":"ppIzapAXqMuP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train.shape # to show how many features PCA left"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UiGXl-rh_Vgx","executionInfo":{"status":"ok","timestamp":1650900759595,"user_tz":-120,"elapsed":3,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"715704fa-3c85-4e61-f70e-8db8645eb43d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(172, 47)"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["# This code does the same task as the code above\n","#it selects the optimal PCA components\n","#pca.fit(x_train)\n","#cumsum = np.cumsum(pca.explained_variance_ratio_)\n","#d = np.argmax(cumsum >= 0.95) + 1"],"metadata":{"id":"cq_noYyKrrvS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_train = y_train.reshape(172,)\n","\n","y_test = y_test.reshape(58,) # this solves problems with the metrics in the cell down below"],"metadata":{"id":"eIfeOxB9hS-H"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Note: According to Marcin ALL models Should have early stopping"],"metadata":{"id":"fLZ9nAWaKUdi"}},{"cell_type":"code","source":["from tensorflow.keras.callbacks import EarlyStopping\n","# help(EarlyStopping)\n","early_stop = EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=5) \n","# This callback will stop the training when there is no improvement in\n","# the loss for three consecutive epochs."],"metadata":{"id":"dBNlDuyRPVJ0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#First option: 3 layers, Many neurons, w/ Dropout\n","\n"],"metadata":{"id":"DbMqdjP4xCqM"}},{"cell_type":"code","source":["from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.metrics import Accuracy\n","from sklearn.metrics import mean_absolute_percentage_error"],"metadata":{"id":"EV4WVldZMDW9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = Sequential()\n","\n","#model.add(Dense(5,activation='relu'))\n","#model.add(Dropout(0.25))\n","#model.add(Dense(3,activation='relu'))\n","#model.add(Dense(3,activation='relu'))\n","\n","model.add(Dense(47,activation='relu'))\n","model.add(Dropout(0.25))\n","model.add(Dense(35,activation='relu'))\n","model.add(Dense(35,activation='relu'))\n","\n","model.add(Dense(1))\n","opt = tf.keras.optimizers.Adam(learning_rate=0.0005)\n","model.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])\n"],"metadata":{"id":"QHstHibjv9pH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_test = np.asarray(x_test).astype('float32') #command to fix ValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float).\n","x_train = np.asarray(x_train).astype('float32')\n","y_test = np.asarray(y_test).astype('float32')\n","y_train = np.asarray(y_train).astype('float32')"],"metadata":{"id":"M0K_QukMwN8D"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The validation split here is to proportionally split your training set The first set is used for training and the 2nd set for validation after each epoch. Having the test set as validation data is wrong because test data are out of sample and supposed to be unknown. This code is competition compliant, so we should move on with this."],"metadata":{"id":"s_xUFGF1tnpu"}},{"cell_type":"markdown","source":["According to Marcin Batch size=2 is very small, also epochs=50 are very small."],"metadata":{"id":"0dDslyiqLF_d"}},{"cell_type":"code","source":["model.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0) #validation split is for x_train "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NhiwPUbQwUL0","executionInfo":{"status":"ok","timestamp":1650900812704,"user_tz":-120,"elapsed":3176,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"ee52a010-38da-4151-e2c1-7d208b7be298"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 42: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fb2d319ae90>"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["loss_df = pd.DataFrame(model.history.history) # my loss DataFrame\n","\n","pd.DataFrame(model.history.history)\n","loss_df.plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"YLSdpJPWwXef","executionInfo":{"status":"ok","timestamp":1650900814188,"user_tz":-120,"elapsed":438,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"c17ad360-3f7a-4c18-afa1-1b4dd9e9fbcb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2ce95e7d0>"]},"metadata":{},"execution_count":43},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model.evaluate(x_test, y_test, verbose=0)\n","model.evaluate(x_train, y_train, verbose=0)\n","test_predictions = model.predict(x_test)\n","test_predictions = pd.Series(test_predictions.reshape(58,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"vqKKfyeswdob"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_predictions = np.asarray(test_predictions).astype('float32')"],"metadata":{"id":"ouDRbOjlndi0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.evaluate(x_test,y_test)\n","model.evaluate(x_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x6Wnu9QFhgaU","executionInfo":{"status":"ok","timestamp":1650900834742,"user_tz":-120,"elapsed":5,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"441c86f0-fe52-477d-b150-8829c413060f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 4ms/step - loss: 0.0057\n","6/6 [==============================] - 0s 2ms/step - loss: 0.0024\n"]},{"output_type":"execute_result","data":{"text/plain":["0.0023692480754107237"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["# So, what I could do is say, create a scatterplot, based of this data in my prediction dataframe.\n","sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df)\n","\n","# And we see this result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"ED_gt3G_wfhJ","executionInfo":{"status":"ok","timestamp":1650900837091,"user_tz":-120,"elapsed":5,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"8367682d-bf3b-4d79-c790-fa3f270602c1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2d3006b10>"]},"metadata":{},"execution_count":48},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["test_predictions.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D-Zeqz-9YB0R","executionInfo":{"status":"ok","timestamp":1650900839184,"user_tz":-120,"elapsed":3,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"5dd69c4f-1ad8-4557-ed84-6aff050e4d8a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(58,)"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["y_test = y_test.reshape(58,) # this solves problems with the metrics in the cell down below"],"metadata":{"id":"HYoDFtimpXHP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Mean absolute error\n","mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","\n","explained_variance_score(y_test, test_predictions)\n","\n","# Mean squared error\n","MSE_ANN = mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean absolute error\n","MAE_ANN = mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","RMSE_ANN = mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","# Mean Absolute Percentage error\n","MAPE_ANN = mean_absolute_percentage_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","\n","#r_squared_ANN = r2_score(y_test, test_predictions) #r2 works but is the wrong formula, also WHY does it give back a result???\n","SS_residual_ANN = sum((y_test-test_predictions)**2) \n","SS_Total_ANN = sum((y_test)**2)   \n","r_squared_ANN = 1- (SS_residual_ANN/SS_Total_ANN) #correct formula but does not work.\n","\n","print(\"R2=\",r_squared_ANN)\n","print(MSE_ANN)\n","print(MAE_ANN)\n","print(MAPE_ANN)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UM0_orgwwi4B","executionInfo":{"status":"ok","timestamp":1650900847568,"user_tz":-120,"elapsed":455,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"22cf8e38-f931-4a6f-aa3b-116de1f85302"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R2= -1.7308113791696784\n","0.005658877\n","0.06017466\n","2.6189032\n"]}]},{"cell_type":"code","source":["test_predictions.shape "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9tpIknZ5uS0Q","executionInfo":{"status":"ok","timestamp":1650900856608,"user_tz":-120,"elapsed":577,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"4df0c47b-4b7f-4b8d-b681-f2c41076c2d5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(58,)"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RTvRm5GHo86x","executionInfo":{"status":"ok","timestamp":1650900857185,"user_tz":-120,"elapsed":2,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"e379d65c-249b-4193-984c-e551953a0650"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(58,)"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["# What we can also compare is our predictions, and we can plot them out, against a perfect fit.\n","\n","plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"KTGCBD4Gw8RB","executionInfo":{"status":"ok","timestamp":1650900858242,"user_tz":-120,"elapsed":7,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"3c435d88-36fb-4528-bc05-6ce395a61360"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fb2d2b90690>]"]},"metadata":{},"execution_count":55},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x=x_test[:,0], y=(y_test-test_predictions), data = pred_df) #residual graph"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"_cdFdKODbk1k","executionInfo":{"status":"ok","timestamp":1650900865078,"user_tz":-120,"elapsed":433,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"6121c9b0-25da-4ac1-9b01-5e60cbaba008"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2d2ac3b10>"]},"metadata":{},"execution_count":56},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Option 2 : 2 layers, neurons, w/o Dropout\n","\n"],"metadata":{"id":"QqrCSQnOypvh"}},{"cell_type":"markdown","source":["This architecture is bad change it after"],"metadata":{"id":"QC6q2qCbxn5w"}},{"cell_type":"code","source":["model_2 = Sequential()\n","\n","model_2.add(Dense(47,activation='relu'))\n","model_2.add(Dense(35,activation='relu'))\n","\n","#model.add(Dense(56,activation='relu')) \n","# model.add(Dense(113,activation='relu')) \n","\n","model_2.add(Dense(1))\n","opt = tf.keras.optimizers.Adam(learning_rate=0.0005)\n","model_2.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])"],"metadata":{"id":"DSzJTKdvypWm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#model_2.fit(x_train, y_train, validation_data=(x_test,y_test), batch_size=1, epochs=50, callbacks=[early_stop])\n","model_2.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"89WyIBvrywo1","executionInfo":{"status":"ok","timestamp":1650900895990,"user_tz":-120,"elapsed":8091,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"687ec7e2-75d2-4d13-8a7f-df8dcff9cd20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 108: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fb2d29eeb50>"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["model_loss = pd.DataFrame(model_2.history.history)\n","model_loss.plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"zOBRKG35y0O4","executionInfo":{"status":"ok","timestamp":1650900900137,"user_tz":-120,"elapsed":2859,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"781aa384-cecd-4544-d197-648c2f0f1f8d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2d29ee590>"]},"metadata":{},"execution_count":59},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["This architecture does not help the model to learn"],"metadata":{"id":"IFj3OU2Xks9b"}},{"cell_type":"code","source":["loss_and_metrics = model_2.evaluate(x_test, y_test, verbose=0)\n","loss_and_metrics2 = model_2.evaluate(x_train, y_train, verbose=0)\n","test_predictions2 = model_2.predict(x_test)\n","test_predictions2 = pd.Series(test_predictions2.reshape(58,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions2],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"0YOidN2nzEmA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#r_squared_ANN_2 = r2_score(y_test, test_predictions2) # this the wrong formula for the out of sample R2\n","\n","SS_residual_ANN_2 = sum((y_test-test_predictions2)**2) \n","SS_Total_ANN_2 = sum((y_test)**2)   \n","r_squared_ANN_2 = 1 - (SS_residual_ANN_2/SS_Total_ANN_2)\n","\n","\n","print(r_squared_ANN_2)\n","\n","MAE_ANN2 = mean_absolute_error(y_test,test_predictions2)\n","MSE_ANN2 = mean_squared_error(y_test,test_predictions2)\n","RMSE_ANN2 = mean_squared_error(y_test,test_predictions2)**0.5\n","MAPE_ANN2 = mean_absolute_percentage_error(y_test,test_predictions2)\n","\n","print(MSE_ANN2)\n","print(MAE_ANN2)\n","print(MAPE_ANN2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CXnZB50QzmnW","executionInfo":{"status":"ok","timestamp":1650900916902,"user_tz":-120,"elapsed":2,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"46a582ae-ae7d-4674-88b7-517f2e67f59b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-5.752952923719704\n","0.013993692\n","0.096629865\n","6.8835864\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions2)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"HLrCoe9fzrj0","executionInfo":{"status":"ok","timestamp":1650900921221,"user_tz":-120,"elapsed":615,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"13e331af-fdb0-4679-8492-b2b9a6146a18"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fb2d2b09350>]"]},"metadata":{},"execution_count":63},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"2QHnVmx508yu","executionInfo":{"status":"ok","timestamp":1650900932298,"user_tz":-120,"elapsed":509,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"e1dd1431-c804-404f-d273-d5ad3eaed786"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2d2af6e50>"]},"metadata":{},"execution_count":64},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x=x_test[:,0], y=(y_test-test_predictions2), data = pred_df) #residual graph"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"vz6XNl_Ak54N","executionInfo":{"status":"ok","timestamp":1650900934366,"user_tz":-120,"elapsed":4,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"9db87363-9a01-47ab-f676-9943a8a3a40a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2d305bf50>"]},"metadata":{},"execution_count":65},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Option 3: 3 layers, pyramid rule ,w Dropout "],"metadata":{"id":"txF3mqDS1Uz_"}},{"cell_type":"code","source":["#@title\n","model_3 = Sequential()\n","\n","model_3.add(Dense(47,activation='relu')) \n","model_3.add(Dropout(0.25)) \n","model_3.add(Dense(23,activation='relu'))\n","model_3.add(Dense(11,activation='relu'))\n","\n","model_3.add(Dense(1))\n","opt = tf.keras.optimizers.Adam(learning_rate=0.0005)\n","model_3.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])"],"metadata":{"id":"-Le87iVN1a2y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title\n","#model_3.fit(x_train, y_train, validation_data=(x_test,y_test), batch_size=1, epochs=50, callbacks=[early_stop])\n","model_3.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R0jR1JY71mCq","executionInfo":{"status":"ok","timestamp":1650900962734,"user_tz":-120,"elapsed":2929,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"c66a233e-c5a5-47fd-a1cc-aded5696542c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 74: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fb2d3164e90>"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["#@title\n","model_loss = pd.DataFrame(model_3.history.history)\n","model_loss.plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"p0Di_27k1oIP","executionInfo":{"status":"ok","timestamp":1650900963228,"user_tz":-120,"elapsed":499,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"3c072195-151e-47b2-baf6-8734d1d4b557"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2dc73f090>"]},"metadata":{},"execution_count":68},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["By far the best model, next step is to check for het/ty"],"metadata":{"id":"FRsUfryR2IZ9"}},{"cell_type":"code","source":["#@title\n","model_3.evaluate(x_test, y_test, verbose=0)\n","model_3.evaluate(x_train, y_train, verbose=0)\n","test_predictions3 = model_3.predict(x_test)\n","test_predictions3 = pd.Series(test_predictions3.reshape(58,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions3],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"0NCVzrVk1pwb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["SS_residual_ANN_3 = sum((y_test-test_predictions3)**2) \n","SS_Total_ANN_3 = sum((y_test)**2)   \n","r_squared_ANN_3 = 1- (SS_residual_ANN_3/SS_Total_ANN_3)\n","\n","MAE_ANN3 = mean_absolute_error(y_test,test_predictions3)\n","MSE_ANN3 = mean_squared_error(y_test,test_predictions3)\n","RMSE_ANN3 = mean_squared_error(y_test,test_predictions3)**0.5\n","MAPE_ANN3 = mean_absolute_percentage_error(y_test,test_predictions3)\n","\n","#r_squared_ANN3 = r2_score(y_test, test_predictions3)\n","print(r_squared_ANN_3)\n","print(MSE_ANN3)\n","print(MAE_ANN3)\n","print(MAPE_ANN3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yZ3mJ-Ys1rC0","executionInfo":{"status":"ok","timestamp":1650900981879,"user_tz":-120,"elapsed":2,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"9dca6c15-2315-4e66-a0c8-710be44a5e20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-1.45620933007827\n","0.0050898385\n","0.0554252\n","4.0850635\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions3)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":393},"id":"CKsy9G_l1uFK","executionInfo":{"status":"ok","timestamp":1650900988575,"user_tz":-120,"elapsed":623,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"1cf97648-43d2-4b7e-d42b-a8d9a9bb2616"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fb2dbcce850>]"]},"metadata":{},"execution_count":72},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df) # a zoomed in version of the above"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"BIAFZFpr2I8n","executionInfo":{"status":"ok","timestamp":1650901006455,"user_tz":-120,"elapsed":445,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"9c54ac77-deaf-4ed4-996f-87b448225a14"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2dc835610>"]},"metadata":{},"execution_count":73},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x=x_test[:,0], y=(y_test-test_predictions3), data = pred_df) #residual graph for variable 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"Z053lv78-O1D","executionInfo":{"status":"ok","timestamp":1650901009217,"user_tz":-120,"elapsed":439,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"a7f67249-4f74-41da-e4a6-3db0c3ae2600"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2dc83de50>"]},"metadata":{},"execution_count":74},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x=x_test[:,1], y=(y_test-test_predictions3), data = pred_df) #residual graph for variable 2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"KnRA45ut-hAQ","executionInfo":{"status":"ok","timestamp":1650901011427,"user_tz":-120,"elapsed":4,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"617625d8-0724-4d19-8a84-73e94924dcf4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2d0626150>"]},"metadata":{},"execution_count":75},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Model 4: 4 layers, neurons, w/ Dropout"],"metadata":{"id":"yglPXZSm1K4A"}},{"cell_type":"code","source":["model_4 = Sequential()\n","\n","model_4.add(Dense(47,activation='relu'))\n","model_4.add(Dropout(0.25))\n","\n","model_4.add(Dense(23,activation='relu'))\n","\n","model_4.add(Dense(11,activation='relu'))\n","\n","model_4.add(Dense(5,activation='relu'))\n","\n","\n","model_4.add(Dense(1))\n","opt = tf.keras.optimizers.Adam(learning_rate=0.0005)\n","model_4.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])\n"],"metadata":{"id":"j2RpnJL71SyQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_test = np.asarray(x_test).astype('float32') #command to fix ValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float).\n","x_train = np.asarray(x_train).astype('float32')\n","y_test = np.asarray(y_test).astype('float32')\n","y_train = np.asarray(y_train).astype('float32')"],"metadata":{"id":"dvArefyF1xE6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_4.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0)"],"metadata":{"id":"mo-6iSNz10yp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650901067976,"user_tz":-120,"elapsed":4229,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"7e8bffd5-ba5e-4e77-f1bf-93e7765f5d6a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 35: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fb2d0531b50>"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["loss_df = pd.DataFrame(model_4.history.history) # my loss DataFrame\n","\n","pd.DataFrame(model_4.history.history)\n","loss_df.plot()"],"metadata":{"id":"0GG2Mrs915em","colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"status":"ok","timestamp":1650901070274,"user_tz":-120,"elapsed":568,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"30f85c46-0ff7-4d2d-8758-8e5c0e4c571f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2d041c9d0>"]},"metadata":{},"execution_count":79},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model_4.evaluate(x_test, y_test, verbose=0)\n","model_4.evaluate(x_train, y_train, verbose=0)\n","test_predictions4 = model_4.predict(x_test)\n","test_predictions4 = pd.Series(test_predictions4.reshape(58,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions4],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"0ANYCCeM2BnF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_predictions4 = np.asarray(test_predictions4).astype('float32')"],"metadata":{"id":"NKAlS0Nt2JtX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_4.evaluate(x_test,y_test)\n","model_4.evaluate(x_train,y_train)"],"metadata":{"id":"E_FIaN4p2KNW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650901093411,"user_tz":-120,"elapsed":694,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"f26ec2dc-3fff-435c-c7c9-7275958ef34a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 5ms/step - loss: 0.0046\n","6/6 [==============================] - 0s 3ms/step - loss: 0.0027\n"]},{"output_type":"execute_result","data":{"text/plain":["0.0026671327650547028"]},"metadata":{},"execution_count":83}]},{"cell_type":"code","source":["# So, what I could do is say, create a scatterplot, based of this data in my prediction dataframe.\n","sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df)\n","\n","# And we see this result"],"metadata":{"id":"yY_hrtnn2Mo3","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1650901093411,"user_tz":-120,"elapsed":6,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"02d75728-55d2-414f-96ad-99b0a4b2da7c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2d03802d0>"]},"metadata":{},"execution_count":84},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Mean absolute error\n","mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","\n","explained_variance_score(y_test, test_predictions4)\n","\n","# Mean squared error\n","MSE_ANN_4 = mean_squared_error(y_test,test_predictions4)\n","# Mean absolute error\n","MAE_ANN_4 = mean_absolute_error(y_test,test_predictions4)\n","# Root mean squared error\n","RMSE_ANN_4 = mean_squared_error(y_test,test_predictions4)**0.5\n","\n","MAPE_ANN4 = mean_absolute_percentage_error(y_test,test_predictions4)\n","\n","#r_squared_ANN_4 = r2_score(y_test, test_predictions4) #r2 works but is the wrong formula, also WHY does it give back a result???\n","SS_residual_ANN_4 = sum((y_test-test_predictions4)**2) \n","SS_Total_ANN_4 = sum((y_test)**2)   \n","r_squared_ANN_4 = 1- (SS_residual_ANN_4/SS_Total_ANN_4) #correct formula but does not work.\n","\n","print(r_squared_ANN_4)\n","print(MSE_ANN_4)\n","print(MAE_ANN_4)\n","print(MAPE_ANN4)"],"metadata":{"id":"KOHEdEMl2PSN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650901094532,"user_tz":-120,"elapsed":2,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"abe28bfc-9ec0-48dd-b09c-58f35ca52bc2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-1.2000844981344074\n","0.004559088\n","0.05835014\n","3.6975765\n"]}]},{"cell_type":"code","source":["# What we can also compare is our predictions, and we can plot them out, against a perfect fit.\n","\n","plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions4)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"id":"YGLmIRGt2gQZ","colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"status":"ok","timestamp":1650901101272,"user_tz":-120,"elapsed":486,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"723b4f47-c0af-4a47-9925-1c9d94372831"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fb2d0288390>]"]},"metadata":{},"execution_count":86},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Model 5: 4 layers, neurons ,w Dropout"],"metadata":{"id":"knlydyPP5i5E"}},{"cell_type":"code","source":["model_5 = Sequential()\n","\n","model_5.add(Dense(47,activation='relu'))\n","model_5.add(Dropout(0.25))\n","model_5.add(Dense(30,activation='relu'))\n","model_5.add(Dense(30,activation='relu'))\n","model_5.add(Dense(30,activation='relu'))\n","\n","\n","model_5.add(Dense(1))\n","opt = tf.keras.optimizers.Adam(learning_rate=0.0005)\n","model_5.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])"],"metadata":{"id":"w495ewJ25n0V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_test = np.asarray(x_test).astype('float32') #command to fix ValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float).\n","x_train = np.asarray(x_train).astype('float32')\n","y_test = np.asarray(y_test).astype('float32')\n","y_train = np.asarray(y_train).astype('float32')\n","model_5.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0)"],"metadata":{"id":"q_805FOk6CTD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650901386187,"user_tz":-120,"elapsed":862,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"833a64fa-96cc-4e30-8e23-5a9bd4981e96"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 8: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fb2d01f51d0>"]},"metadata":{},"execution_count":109}]},{"cell_type":"code","source":["loss_df = pd.DataFrame(model_5.history.history) # my loss DataFrame\n","\n","pd.DataFrame(model_5.history.history)\n","loss_df.plot()"],"metadata":{"id":"UTuBInll5_YJ","colab":{"base_uri":"https://localhost:8080/","height":285},"executionInfo":{"status":"ok","timestamp":1650901391000,"user_tz":-120,"elapsed":958,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"142d7acc-dff3-4956-95e7-8733e29573d6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2d0574a10>"]},"metadata":{},"execution_count":110},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model_5.evaluate(x_test, y_test, verbose=0)\n","model_5.evaluate(x_train, y_train, verbose=0)\n","test_predictions5 = model_5.predict(x_test)\n","test_predictions5 = pd.Series(test_predictions5.reshape(58,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions5],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"Pwx9Tvi558mw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_predictions5 = np.asarray(test_predictions5).astype('float32')"],"metadata":{"id":"OtYZ4N8254wp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_5.evaluate(x_test,y_test)\n","model_5.evaluate(x_train,y_train)"],"metadata":{"id":"8ygduTVc53PX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650901398493,"user_tz":-120,"elapsed":3,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"ff7c1a44-80f6-40d6-b2d0-458b5dac56fe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 4ms/step - loss: 0.0026\n","6/6 [==============================] - 0s 2ms/step - loss: 0.0027\n"]},{"output_type":"execute_result","data":{"text/plain":["0.0026955830398947"]},"metadata":{},"execution_count":113}]},{"cell_type":"code","source":["# So, what I could do is say, create a scatterplot, based of this data in my prediction dataframe.\n","sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df)\n","\n","# And we see this result"],"metadata":{"id":"ZH9lWhdM5wtX","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1650901400332,"user_tz":-120,"elapsed":9,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"4cc0e584-9601-4eab-8a3a-12e8f1986611"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb2c98a4250>"]},"metadata":{},"execution_count":114},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Mean absolute error\n","mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","\n","explained_variance_score(y_test, test_predictions5)\n","\n","# Mean squared error\n","MSE_ANN_5 = mean_squared_error(y_test,test_predictions5)\n","# Mean absolute error\n","MAE_ANN_5 = mean_absolute_error(y_test,test_predictions5)\n","# Root mean squared error\n","RMSE_ANN_5 = mean_squared_error(y_test,test_predictions5)**0.5\n","\n","MAPE_ANN5 = mean_absolute_percentage_error(y_test,test_predictions5)\n","\n","#r_squared_ANN_5 = r2_score(y_test, test_predictions5) #r2 works but is the wrong formula, also WHY does it give back a result???\n","SS_residual_ANN_5 = sum((y_test-test_predictions5)**2) \n","SS_Total_ANN_5 = sum((y_test)**2)   \n","r_squared_ANN_5 = 1- (SS_residual_ANN_5/SS_Total_ANN_5) #correct formula but does not work.\n","\n","print(r_squared_ANN_5)\n","print(MSE_ANN_5)\n","print(MAE_ANN_5)\n","print(MAPE_ANN5)"],"metadata":{"id":"JFg4Nem65toR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650901403969,"user_tz":-120,"elapsed":380,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"b067d777-ffbb-4047-bdb0-137fdc86ed1b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-0.24710986283589742\n","0.0025843026\n","0.04056441\n","2.0912085\n"]}]},{"cell_type":"code","source":["# What we can also compare is our predictions, and we can plot them out, against a perfect fit.\n","\n","plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions5)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"id":"M520mxVm5s5n","colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"status":"ok","timestamp":1650901418662,"user_tz":-120,"elapsed":446,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"5963f7a9-7f63-4bd9-f49c-9c4cafc2c16b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fb2d2ac3250>]"]},"metadata":{},"execution_count":116},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Heteroscedasticity tests"],"metadata":{"id":"SiXhyYyaoBlq"}},{"cell_type":"code","source":["import statsmodels.api as sm\n","import statsmodels.formula.api as smf\n","import statsmodels.tools.tools as smt\n","import statsmodels.stats.diagnostic as smd"],"metadata":{"id":"glRV0Wu_Z7Ov"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["resid = y_test-test_predictions\n","resid2 = y_test-test_predictions2\n","resid3 = y_test-test_predictions3\n","resid4 = y_test-test_predictions4\n","resid5 = y_test-test_predictions5\n","exog_het = x_test"],"metadata":{"id":"FlJ4iXv1aSGK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bptest = smd.het_breuschpagan(resid, exog_het)\n","print(\"lm:\", bptest[0], \"lm_pvalue:\", bptest[1],\"F_test_pvalue\",bptest[3])\n","# breusch pagan test het/ty for regression models\n","# a p value less than 0.05 shows hetero/ty. "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AZp32jCOaSZ2","executionInfo":{"status":"ok","timestamp":1650901427409,"user_tz":-120,"elapsed":3,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"7d2b5478-15ca-4d73-a695-a6fe488e2692"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["lm: 53.96216368675232 lm_pvalue: 0.19622930446521372 F_test_pvalue 0.02229262472586805\n"]}]},{"cell_type":"code","source":["bptest2 = smd.het_breuschpagan(resid2, exog_het)\n","print(\"lm:\", bptest2[0], \"lm_pvalue:\", bptest2[1],\"F_test_pvalue\",bptest[3])\n","\n","bptest3 = smd.het_breuschpagan(resid3, exog_het)\n","print(\"lm:\", bptest3[0], \"lm_pvalue:\", bptest3[1],\"F_test_pvalue\",bptest[3])\n","\n","bptest4 = smd.het_breuschpagan(resid4, exog_het)\n","print(\"lm:\", bptest4[0], \"lm_pvalue:\", bptest4[1],\"F_test_pvalue\",bptest[3])\n","\n","bptest5 = smd.het_breuschpagan(resid5, exog_het)\n","print(\"lm:\", bptest5[0], \"lm_pvalue:\", bptest5[1],\"F_test_pvalue\",bptest[3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TxPrZ6FZpVic","executionInfo":{"status":"ok","timestamp":1650901432218,"user_tz":-120,"elapsed":2,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"2816a4a5-0b3c-4990-d5b1-c1343e7fc403"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["lm: 54.11170268058777 lm_pvalue: 0.1923787550607429 F_test_pvalue 0.02229262472586805\n","lm: 51.88591046631336 lm_pvalue: 0.2552251318476578 F_test_pvalue 0.02229262472586805\n","lm: 54.91582264006138 lm_pvalue: 0.17258588145717113 F_test_pvalue 0.02229262472586805\n","lm: 47.28530949354172 lm_pvalue: 0.41988369472805176 F_test_pvalue 0.02229262472586805\n"]}]},{"cell_type":"markdown","source":["lm p value shows for het/ty for the whole model (all x)\n","F test p values shows for het/ty for every single x. (If 1 x is het/tic then this p value is low)"],"metadata":{"id":"ZxcmfqV5qbVB"}}]}