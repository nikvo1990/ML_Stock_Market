{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Q2_Market_FIN","provenance":[{"file_id":"1_03F8uDrw4TC5Ux7NzjaQjpLiKSFAwgu","timestamp":1650901529792},{"file_id":"1bVSimhA6KJyPWObtfQz4mV39XSx4hgpa","timestamp":1650898455119},{"file_id":"1Hkrney7khkiVkiIW50QaojE0oxnQI-tI","timestamp":1650889819422},{"file_id":"1yQHhU7QkE8fWmCwk8bmRO8pyLsLH64Ni","timestamp":1650147672275},{"file_id":"1HPZqtqGMsJHY4w78fgYDmUHniD56El9Z","timestamp":1648938099966}],"collapsed_sections":["1xQWYxnhpO5O","0DnerPpy7_H4"],"authorship_tag":"ABX9TyOmqudMZgkFs9sBm5TAdII2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Notes 4/25"],"metadata":{"id":"C_P4rw-SIeV1"}},{"cell_type":"markdown","source":["Forth option best. there is a bit room for improvement with higher  patience from early stop, but r2 seems fine"],"metadata":{"id":"Px60gD57Iiao"}},{"cell_type":"markdown","source":["#Notes4/23"],"metadata":{"id":"1xQWYxnhpO5O"}},{"cell_type":"markdown","source":["This code right now has no external problems(i.e. het/city for the whole model) the only things to change/optimize are train/val/test sample sizes and maybe small changes on the ANN architecture. Higher Batch size.\n","\n"],"metadata":{"id":"S6WaxE4Ci9JW"}},{"cell_type":"markdown","source":["Less explained variance on pca threshold = Less PCA components = easier to manage models. Need to read more on pca threshold and write on the model. I think around 5 components are perfect"],"metadata":{"id":"OE3UJt8HPJpX"}},{"cell_type":"markdown","source":["More explained variance on PCA threshold = more components = no Hetero/city problem. The 0.95 expl. vriance wins for this reason. "],"metadata":{"id":"t1rYZ51kivpI"}},{"cell_type":"markdown","source":["#Notes 16/4"],"metadata":{"id":"0DnerPpy7_H4"}},{"cell_type":"markdown","source":["Note 1: The models immidiately overfit, maybe less neurons.\n","Note 2: Kelly's maximum OOS R2 was 1.8% per month. Our is significantly larger. Something must be wrong. 1)Check the formula, 2)check a higher/lower test sample 3) Check the momentum factor (may be same time as output)\n","Note 3: The model \"predicts\" an 1% returns every month. This is why the oos R2 comes out positive. If i put in the oos r2 denominator subtract r_test average, a more realistic number comes up. "],"metadata":{"id":"b7Vi5qKYSJuO"}},{"cell_type":"markdown","source":["HOw to solve heteroscedasticity. transform dependent variable (already done) to a log or rate. 2) vce robust. 3) (maybe not sure) UMAP is a clustering tool, this will help. but we want to cluster standard errors **4) Weighted regression/regressors (need to research a bit and ask marcin)**"],"metadata":{"id":"kxezjT0xa0R9"}},{"cell_type":"markdown","source":["16/4 After changing the neurons/layers of the models The oos r2 come out deep in the negative. Models with 3 layers immediately hit early stopping. the model can not \"learn\" fast enough."],"metadata":{"id":"HfNBIAtf1PBo"}},{"cell_type":"markdown","source":["rules of thumb: 1) Input layesr neurons = features\n","2) Hidden layer neurons rules of thumb\n","\n","*   The number of hidden layer neurons are 2/3 (or 70%to 90%) of the size of the input layer. If this is\n","insufficient then number of output layer neurons can\n","be added later on.[1]\n","\n","*   The number of hidden layer neurons should be less\n","than twice of the number of neurons in input layer. [2]\n","\n","*   The size of the hidden layer neurons is between the\n","input layer size and the output layer size.[6]\n","\n","3) Output layer = dependent variables\n","\n","\n"],"metadata":{"id":"09F29FSu8Ml4"}},{"cell_type":"markdown","source":["I will try to find the optimal dimensionality as well."],"metadata":{"id":"-X449lW-p2Hx"}},{"cell_type":"markdown","source":["#Start of Code"],"metadata":{"id":"CdRhuiG974UU"}},{"cell_type":"code","source":["%tensorflow_version 2.x  # this line is not required unless you are in a notebook\n","# TensorFlow and tf.keras\n","import tensorflow as tf\n","from tensorflow import keras\n","\n","# Helper libraries\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","## upload everything from Q2 fin\n","from google.colab import files\n","upload = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":"OK"}},"height":229},"id":"qUTcx-QgEbeQ","executionInfo":{"status":"ok","timestamp":1650914561136,"user_tz":-120,"elapsed":63724,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"3d62f6ba-a864-4445-8080-a46cdf55ce39"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["`%tensorflow_version` only switches the major version: 1.x or 2.x.\n","You set: `2.x  # this line is not required unless you are in a notebook`. This will be interpreted as: `2.x`.\n","\n","\n","TensorFlow is already loaded. Please restart the runtime to change versions.\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-71d76bb9-fc2c-4060-b7da-df4380b4f184\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-71d76bb9-fc2c-4060-b7da-df4380b4f184\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving all_regressors_fin.xlsx to all_regressors_fin.xlsx\n","Saving market_returns.csv to market_returns.csv\n","Saving Risk Free Finland.xlsx to Risk Free Finland.xlsx\n"]}]},{"cell_type":"code","source":["'''\n","!pip install umap-learn[plot]\n","!pip install holoviews\n","!pip install -U ipykernel\n","'''"],"metadata":{"id":"82U-YEGDiVfa","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1650062704460,"user_tz":-120,"elapsed":16,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"fee2f273-d5f9-4b6f-9da2-3907c6737787"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n!pip install umap-learn[plot]\\n!pip install holoviews\\n!pip install -U ipykernel\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["#import umap\n"],"metadata":{"id":"zjpGn8jJm-w4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# upload SWE\n","%tensorflow_version 2.x  # this line is not required unless you are in a notebook\n","# TensorFlow and tf.keras\n","import tensorflow as tf\n","from tensorflow import keras\n","from sklearn.decomposition import PCA\n","\n","# Helper libraries\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"83hOkstPlEK_","executionInfo":{"status":"ok","timestamp":1650914562761,"user_tz":-120,"elapsed":608,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"6bcd64e6-7617-4489-edc5-44ffb185b261"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["`%tensorflow_version` only switches the major version: 1.x or 2.x.\n","You set: `2.x  # this line is not required unless you are in a notebook`. This will be interpreted as: `2.x`.\n","\n","\n","TensorFlow is already loaded. Please restart the runtime to change versions.\n"]}]},{"cell_type":"code","source":["# Historical risk-free rate\n","risk_free_fin = pd.read_excel('Risk Free Finland.xlsx') # read data\n","risk_free_fin_array = risk_free_fin.to_numpy() # important in order to be able to process data\n","\n","rf_fin_t1 = risk_free_fin_array[97:324,1]/100 # risk free t-1 1/2002-11/2020\n","rf_fin = risk_free_fin_array[98:325,1]/100 # FOR 2/2002 TO 12/2020\n","\n","print(risk_free_fin[98:325])\n","rf_fin.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gOdXLNo-uWAd","executionInfo":{"status":"ok","timestamp":1650914663762,"user_tz":-120,"elapsed":229,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"1731b8ec-9d7f-4d7a-bf37-b3c821cec916"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["          Date  Annualized  Rate  \\\n","98  2002-02-01    0.206230  2.25   \n","99  2002-03-01    0.206230  2.25   \n","100 2002-04-01    0.206230  2.25   \n","101 2002-05-01    0.206230  2.25   \n","102 2002-06-01    0.206230  2.25   \n","..         ...         ...   ...   \n","320 2020-08-01   -0.040811 -0.50   \n","321 2020-09-01   -0.040811 -0.50   \n","322 2020-10-01   -0.040811 -0.50   \n","323 2020-11-01   -0.040811 -0.50   \n","324 2020-12-01   -0.040811 -0.50   \n","\n","     Data Source in SDW: https://sdw.ecb.europa.eu/quickview.do?SERIES_KEY=143.FM.D.U2.EUR.4F.KR.DFR.LEV  \n","98                                                 NaN                                                    \n","99                                                 NaN                                                    \n","100                                                NaN                                                    \n","101                                                NaN                                                    \n","102                                                NaN                                                    \n","..                                                 ...                                                    \n","320                                                NaN                                                    \n","321                                                NaN                                                    \n","322                                                NaN                                                    \n","323                                                NaN                                                    \n","324                                                NaN                                                    \n","\n","[227 rows x 4 columns]\n"]},{"output_type":"execute_result","data":{"text/plain":["(227,)"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["#All regressors here"],"metadata":{"id":"w1PEAh1-52Cj"}},{"cell_type":"code","source":["inputs_monthly = pd.read_excel(\"all_regressors_fin.xlsx\") # Other Data has all the inputs possible\n","\n","inputs_array = inputs_monthly.to_numpy() # important in order to be able to process data\n","inputs_array_df = pd.DataFrame(inputs_array)\n","print(inputs_array_df) \n","# WARNING DATA ARE FOR START OF MONTH\n","# Data displayed do not have names in the columns, this is not a problem because we cannot see the weights right now."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"idl1orqwv-2u","executionInfo":{"status":"ok","timestamp":1650914677671,"user_tz":-120,"elapsed":2300,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"1e805318-9eb6-4d72-b9bb-a0201c3d5da9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["          0         1         2         3         4         5         6    \\\n","0    0.056341  0.079620 -0.126732  0.107970 -0.114276  0.051718  0.150444   \n","1    0.052273  0.093268 -0.121571  0.069853 -0.094780  0.117956  0.108505   \n","2    0.015251  0.024645 -0.048131  0.046048 -0.049860  0.051486  0.058117   \n","3    0.097572  0.216258 -0.205478  0.200670 -0.181040  0.238634  0.230535   \n","4    0.041853  0.127283 -0.186624  0.110974 -0.132867  0.110259  0.160148   \n","..        ...       ...       ...       ...       ...       ...       ...   \n","222 -0.008823 -0.069865  0.053332 -0.017399 -0.039336 -0.119237 -0.037065   \n","223  0.124119 -0.055552  0.047730  0.002983  0.072116 -0.038506 -0.046405   \n","224 -0.008784  0.018410  0.045119  0.008834 -0.003308 -0.056856 -0.058543   \n","225  0.133046 -0.002227  0.018452  0.063621  0.035220 -0.049390 -0.010811   \n","226  0.103140 -0.095061 -0.005115 -0.037215  0.092110 -0.020066  0.002996   \n","\n","          7         8         9    ...       176       177     178     179  \\\n","0   -0.110572  0.118921  0.130439  ...  5.047091  1.763891 -0.0064  0.1329   \n","1   -0.080918  0.104439  0.131710  ...  5.097650  1.767650 -0.0179  0.2150   \n","2   -0.031683  0.052660  0.026561  ...  5.331850  1.884350  0.0303 -0.0917   \n","3   -0.199752  0.228593  0.225995  ...  5.323238  1.858038 -0.0555  0.0490   \n","4   -0.146541  0.202662  0.157316  ...  5.396810  1.830310 -0.0059  0.1191   \n","..        ...       ...       ...  ...       ...       ...     ...     ...   \n","222  0.079634 -0.051828 -0.069107  ... -0.209887  0.248413  0.0636 -0.3619   \n","223  0.042240  0.015536 -0.045574  ... -0.249114  0.258486  0.0698 -0.3053   \n","224  0.058646  0.045891 -0.054359  ... -0.297536  0.240664 -0.0413  0.7356   \n","225  0.033573  0.004007 -0.019385  ... -0.381055  0.140745 -0.0210 -0.1023   \n","226 -0.008162 -0.077549  0.005400  ... -0.400181  0.163119  0.1088 -0.0576   \n","\n","         180      181       182       183       184       185  \n","0   -0.01017  0.43856 -0.072685 -0.030306 -0.035488 -0.060731  \n","1   -0.01342 -0.11719  0.016254  0.044876  0.037296 -0.034424  \n","2    0.07109  0.01943  0.041149  0.087999  0.033912  0.020965  \n","3   -0.06598 -0.09302 -0.070206  0.020550 -0.030664 -0.137156  \n","4   -0.04422  0.12772 -0.008105  0.024515  0.029060 -0.041780  \n","..       ...      ...       ...       ...       ...       ...  \n","222  0.00020 -0.37829  0.112534  0.100066  0.096582  0.095561  \n","223  0.05133 -0.26397  0.051825  0.081773  0.038164  0.080135  \n","224 -0.01426  0.28323  0.004218 -0.074574  0.004415 -0.020829  \n","225 -0.09437 -0.03862 -0.050487 -0.064288 -0.022344 -0.050206  \n","226  0.15010  0.17600  0.153893  0.230964  0.101611  0.151792  \n","\n","[227 rows x 186 columns]\n"]}]},{"cell_type":"code","source":["# regressors \n","\n","X_df = pd.DataFrame(inputs_array) \n","\n","print(X_df)\n"],"metadata":{"id":"FWnNlfbQvMwO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650914752329,"user_tz":-120,"elapsed":239,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"82ddce34-981d-489d-825e-f617d240e291"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["          0         1         2         3         4         5         6    \\\n","0    0.056341  0.079620 -0.126732  0.107970 -0.114276  0.051718  0.150444   \n","1    0.052273  0.093268 -0.121571  0.069853 -0.094780  0.117956  0.108505   \n","2    0.015251  0.024645 -0.048131  0.046048 -0.049860  0.051486  0.058117   \n","3    0.097572  0.216258 -0.205478  0.200670 -0.181040  0.238634  0.230535   \n","4    0.041853  0.127283 -0.186624  0.110974 -0.132867  0.110259  0.160148   \n","..        ...       ...       ...       ...       ...       ...       ...   \n","222 -0.008823 -0.069865  0.053332 -0.017399 -0.039336 -0.119237 -0.037065   \n","223  0.124119 -0.055552  0.047730  0.002983  0.072116 -0.038506 -0.046405   \n","224 -0.008784  0.018410  0.045119  0.008834 -0.003308 -0.056856 -0.058543   \n","225  0.133046 -0.002227  0.018452  0.063621  0.035220 -0.049390 -0.010811   \n","226  0.103140 -0.095061 -0.005115 -0.037215  0.092110 -0.020066  0.002996   \n","\n","          7         8         9    ...       176       177     178     179  \\\n","0   -0.110572  0.118921  0.130439  ...  5.047091  1.763891 -0.0064  0.1329   \n","1   -0.080918  0.104439  0.131710  ...  5.097650  1.767650 -0.0179  0.2150   \n","2   -0.031683  0.052660  0.026561  ...  5.331850  1.884350  0.0303 -0.0917   \n","3   -0.199752  0.228593  0.225995  ...  5.323238  1.858038 -0.0555  0.0490   \n","4   -0.146541  0.202662  0.157316  ...  5.396810  1.830310 -0.0059  0.1191   \n","..        ...       ...       ...  ...       ...       ...     ...     ...   \n","222  0.079634 -0.051828 -0.069107  ... -0.209887  0.248413  0.0636 -0.3619   \n","223  0.042240  0.015536 -0.045574  ... -0.249114  0.258486  0.0698 -0.3053   \n","224  0.058646  0.045891 -0.054359  ... -0.297536  0.240664 -0.0413  0.7356   \n","225  0.033573  0.004007 -0.019385  ... -0.381055  0.140745 -0.0210 -0.1023   \n","226 -0.008162 -0.077549  0.005400  ... -0.400181  0.163119  0.1088 -0.0576   \n","\n","         180      181       182       183       184       185  \n","0   -0.01017  0.43856 -0.072685 -0.030306 -0.035488 -0.060731  \n","1   -0.01342 -0.11719  0.016254  0.044876  0.037296 -0.034424  \n","2    0.07109  0.01943  0.041149  0.087999  0.033912  0.020965  \n","3   -0.06598 -0.09302 -0.070206  0.020550 -0.030664 -0.137156  \n","4   -0.04422  0.12772 -0.008105  0.024515  0.029060 -0.041780  \n","..       ...      ...       ...       ...       ...       ...  \n","222  0.00020 -0.37829  0.112534  0.100066  0.096582  0.095561  \n","223  0.05133 -0.26397  0.051825  0.081773  0.038164  0.080135  \n","224 -0.01426  0.28323  0.004218 -0.074574  0.004415 -0.020829  \n","225 -0.09437 -0.03862 -0.050487 -0.064288 -0.022344 -0.050206  \n","226  0.15010  0.17600  0.153893  0.230964  0.101611  0.151792  \n","\n","[227 rows x 186 columns]\n"]}]},{"cell_type":"markdown","source":["#End of data manipulation. Start of model code"],"metadata":{"id":"-tOZnTYnGw4Z"}},{"cell_type":"code","source":["#market ret\n","mkt_ret = pd.read_csv('market_returns.csv') \n","mkt_ret_array = mkt_ret.to_numpy()\n","# creating market returns for Sweden\n","mkt_ret_fin = mkt_ret_array[8444:8671] #  2/2002-12/2020\n","print(mkt_ret_fin)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aXvFxiP50Mrl","executionInfo":{"status":"ok","timestamp":1650914879208,"user_tz":-120,"elapsed":244,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"ab90e7a4-39a7-496e-bf6d-844f8a2d5bec"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[['FIN' '2002-02-28' 137 ... 0.0120497619 -0.035709015 0.0107647619]\n"," ['FIN' '2002-03-31' 136 ... 0.0484063661 0.0196243813 0.0470653661]\n"," ['FIN' '2002-04-30' 136 ... 0.0113953989 -0.138702247 0.0098493989]\n"," ...\n"," ['FIN' '2020-10-31' 152 ... -0.008237649 -0.050278555 -0.008310649]\n"," ['FIN' '2020-11-30' 152 ... 0.1475887608 0.1517259519 0.1475227608]\n"," ['FIN' '2020-12-31' 152 ... 0.1507064589 0.0555149759 0.1506464589]]\n"]}]},{"cell_type":"markdown","source":["#Excess Returns and momentum regressor Ret t-1"],"metadata":{"id":"hL0leEAtS_03"}},{"cell_type":"code","source":["ex_mkt_ret_fin = mkt_ret_fin[:,7] - rf_fin\n","#ex_momentum_mkt_fin = x_mkt_momemtum_fin[:,7] - rf_fin_t1\n","#X_df.insert(1, 'ex_momentum_mkt_fin (ret_vw)', ex_momentum_mkt_fin, True)\n","X_df"],"metadata":{"id":"XzBSpZoFnvpp","colab":{"base_uri":"https://localhost:8080/","height":505},"executionInfo":{"status":"ok","timestamp":1650914926443,"user_tz":-120,"elapsed":279,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"052ae172-a964-401b-8aac-883d11241561"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            0 ex_momentum_mkt_fin (ret_vw)         1         2         3  \\\n","0    0.056341                    -0.062793  0.079620 -0.126732  0.107970   \n","1    0.052273                    -0.036486  0.093268 -0.121571  0.069853   \n","2    0.015251                     0.018903  0.024645 -0.048131  0.046048   \n","3    0.097572                    -0.139219  0.216258 -0.205478  0.200670   \n","4    0.041853                    -0.043842  0.127283 -0.186624  0.110974   \n","..        ...                          ...       ...       ...       ...   \n","222 -0.008823                      0.09597 -0.069865  0.053332 -0.017399   \n","223  0.124119                     0.080543 -0.055552  0.047730  0.002983   \n","224 -0.008784                    -0.020421  0.018410  0.045119  0.008834   \n","225  0.133046                    -0.049797 -0.002227  0.018452  0.063621   \n","226  0.103140                       0.1522 -0.095061 -0.005115 -0.037215   \n","\n","            4         5         6         7         8  ...       176  \\\n","0   -0.114276  0.051718  0.150444 -0.110572  0.118921  ...  5.047091   \n","1   -0.094780  0.117956  0.108505 -0.080918  0.104439  ...  5.097650   \n","2   -0.049860  0.051486  0.058117 -0.031683  0.052660  ...  5.331850   \n","3   -0.181040  0.238634  0.230535 -0.199752  0.228593  ...  5.323238   \n","4   -0.132867  0.110259  0.160148 -0.146541  0.202662  ...  5.396810   \n","..        ...       ...       ...       ...       ...  ...       ...   \n","222 -0.039336 -0.119237 -0.037065  0.079634 -0.051828  ... -0.209887   \n","223  0.072116 -0.038506 -0.046405  0.042240  0.015536  ... -0.249114   \n","224 -0.003308 -0.056856 -0.058543  0.058646  0.045891  ... -0.297536   \n","225  0.035220 -0.049390 -0.010811  0.033573  0.004007  ... -0.381055   \n","226  0.092110 -0.020066  0.002996 -0.008162 -0.077549  ... -0.400181   \n","\n","          177     178     179      180      181       182       183       184  \\\n","0    1.763891 -0.0064  0.1329 -0.01017  0.43856 -0.072685 -0.030306 -0.035488   \n","1    1.767650 -0.0179  0.2150 -0.01342 -0.11719  0.016254  0.044876  0.037296   \n","2    1.884350  0.0303 -0.0917  0.07109  0.01943  0.041149  0.087999  0.033912   \n","3    1.858038 -0.0555  0.0490 -0.06598 -0.09302 -0.070206  0.020550 -0.030664   \n","4    1.830310 -0.0059  0.1191 -0.04422  0.12772 -0.008105  0.024515  0.029060   \n","..        ...     ...     ...      ...      ...       ...       ...       ...   \n","222  0.248413  0.0636 -0.3619  0.00020 -0.37829  0.112534  0.100066  0.096582   \n","223  0.258486  0.0698 -0.3053  0.05133 -0.26397  0.051825  0.081773  0.038164   \n","224  0.240664 -0.0413  0.7356 -0.01426  0.28323  0.004218 -0.074574  0.004415   \n","225  0.140745 -0.0210 -0.1023 -0.09437 -0.03862 -0.050487 -0.064288 -0.022344   \n","226  0.163119  0.1088 -0.0576  0.15010  0.17600  0.153893  0.230964  0.101611   \n","\n","          185  \n","0   -0.060731  \n","1   -0.034424  \n","2    0.020965  \n","3   -0.137156  \n","4   -0.041780  \n","..        ...  \n","222  0.095561  \n","223  0.080135  \n","224 -0.020829  \n","225 -0.050206  \n","226  0.151792  \n","\n","[227 rows x 187 columns]"],"text/html":["\n","  <div id=\"df-7d2c6d11-3ea8-40bd-be50-10986b5e613c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>ex_momentum_mkt_fin (ret_vw)</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>...</th>\n","      <th>176</th>\n","      <th>177</th>\n","      <th>178</th>\n","      <th>179</th>\n","      <th>180</th>\n","      <th>181</th>\n","      <th>182</th>\n","      <th>183</th>\n","      <th>184</th>\n","      <th>185</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.056341</td>\n","      <td>-0.062793</td>\n","      <td>0.079620</td>\n","      <td>-0.126732</td>\n","      <td>0.107970</td>\n","      <td>-0.114276</td>\n","      <td>0.051718</td>\n","      <td>0.150444</td>\n","      <td>-0.110572</td>\n","      <td>0.118921</td>\n","      <td>...</td>\n","      <td>5.047091</td>\n","      <td>1.763891</td>\n","      <td>-0.0064</td>\n","      <td>0.1329</td>\n","      <td>-0.01017</td>\n","      <td>0.43856</td>\n","      <td>-0.072685</td>\n","      <td>-0.030306</td>\n","      <td>-0.035488</td>\n","      <td>-0.060731</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.052273</td>\n","      <td>-0.036486</td>\n","      <td>0.093268</td>\n","      <td>-0.121571</td>\n","      <td>0.069853</td>\n","      <td>-0.094780</td>\n","      <td>0.117956</td>\n","      <td>0.108505</td>\n","      <td>-0.080918</td>\n","      <td>0.104439</td>\n","      <td>...</td>\n","      <td>5.097650</td>\n","      <td>1.767650</td>\n","      <td>-0.0179</td>\n","      <td>0.2150</td>\n","      <td>-0.01342</td>\n","      <td>-0.11719</td>\n","      <td>0.016254</td>\n","      <td>0.044876</td>\n","      <td>0.037296</td>\n","      <td>-0.034424</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.015251</td>\n","      <td>0.018903</td>\n","      <td>0.024645</td>\n","      <td>-0.048131</td>\n","      <td>0.046048</td>\n","      <td>-0.049860</td>\n","      <td>0.051486</td>\n","      <td>0.058117</td>\n","      <td>-0.031683</td>\n","      <td>0.052660</td>\n","      <td>...</td>\n","      <td>5.331850</td>\n","      <td>1.884350</td>\n","      <td>0.0303</td>\n","      <td>-0.0917</td>\n","      <td>0.07109</td>\n","      <td>0.01943</td>\n","      <td>0.041149</td>\n","      <td>0.087999</td>\n","      <td>0.033912</td>\n","      <td>0.020965</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.097572</td>\n","      <td>-0.139219</td>\n","      <td>0.216258</td>\n","      <td>-0.205478</td>\n","      <td>0.200670</td>\n","      <td>-0.181040</td>\n","      <td>0.238634</td>\n","      <td>0.230535</td>\n","      <td>-0.199752</td>\n","      <td>0.228593</td>\n","      <td>...</td>\n","      <td>5.323238</td>\n","      <td>1.858038</td>\n","      <td>-0.0555</td>\n","      <td>0.0490</td>\n","      <td>-0.06598</td>\n","      <td>-0.09302</td>\n","      <td>-0.070206</td>\n","      <td>0.020550</td>\n","      <td>-0.030664</td>\n","      <td>-0.137156</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.041853</td>\n","      <td>-0.043842</td>\n","      <td>0.127283</td>\n","      <td>-0.186624</td>\n","      <td>0.110974</td>\n","      <td>-0.132867</td>\n","      <td>0.110259</td>\n","      <td>0.160148</td>\n","      <td>-0.146541</td>\n","      <td>0.202662</td>\n","      <td>...</td>\n","      <td>5.396810</td>\n","      <td>1.830310</td>\n","      <td>-0.0059</td>\n","      <td>0.1191</td>\n","      <td>-0.04422</td>\n","      <td>0.12772</td>\n","      <td>-0.008105</td>\n","      <td>0.024515</td>\n","      <td>0.029060</td>\n","      <td>-0.041780</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>222</th>\n","      <td>-0.008823</td>\n","      <td>0.09597</td>\n","      <td>-0.069865</td>\n","      <td>0.053332</td>\n","      <td>-0.017399</td>\n","      <td>-0.039336</td>\n","      <td>-0.119237</td>\n","      <td>-0.037065</td>\n","      <td>0.079634</td>\n","      <td>-0.051828</td>\n","      <td>...</td>\n","      <td>-0.209887</td>\n","      <td>0.248413</td>\n","      <td>0.0636</td>\n","      <td>-0.3619</td>\n","      <td>0.00020</td>\n","      <td>-0.37829</td>\n","      <td>0.112534</td>\n","      <td>0.100066</td>\n","      <td>0.096582</td>\n","      <td>0.095561</td>\n","    </tr>\n","    <tr>\n","      <th>223</th>\n","      <td>0.124119</td>\n","      <td>0.080543</td>\n","      <td>-0.055552</td>\n","      <td>0.047730</td>\n","      <td>0.002983</td>\n","      <td>0.072116</td>\n","      <td>-0.038506</td>\n","      <td>-0.046405</td>\n","      <td>0.042240</td>\n","      <td>0.015536</td>\n","      <td>...</td>\n","      <td>-0.249114</td>\n","      <td>0.258486</td>\n","      <td>0.0698</td>\n","      <td>-0.3053</td>\n","      <td>0.05133</td>\n","      <td>-0.26397</td>\n","      <td>0.051825</td>\n","      <td>0.081773</td>\n","      <td>0.038164</td>\n","      <td>0.080135</td>\n","    </tr>\n","    <tr>\n","      <th>224</th>\n","      <td>-0.008784</td>\n","      <td>-0.020421</td>\n","      <td>0.018410</td>\n","      <td>0.045119</td>\n","      <td>0.008834</td>\n","      <td>-0.003308</td>\n","      <td>-0.056856</td>\n","      <td>-0.058543</td>\n","      <td>0.058646</td>\n","      <td>0.045891</td>\n","      <td>...</td>\n","      <td>-0.297536</td>\n","      <td>0.240664</td>\n","      <td>-0.0413</td>\n","      <td>0.7356</td>\n","      <td>-0.01426</td>\n","      <td>0.28323</td>\n","      <td>0.004218</td>\n","      <td>-0.074574</td>\n","      <td>0.004415</td>\n","      <td>-0.020829</td>\n","    </tr>\n","    <tr>\n","      <th>225</th>\n","      <td>0.133046</td>\n","      <td>-0.049797</td>\n","      <td>-0.002227</td>\n","      <td>0.018452</td>\n","      <td>0.063621</td>\n","      <td>0.035220</td>\n","      <td>-0.049390</td>\n","      <td>-0.010811</td>\n","      <td>0.033573</td>\n","      <td>0.004007</td>\n","      <td>...</td>\n","      <td>-0.381055</td>\n","      <td>0.140745</td>\n","      <td>-0.0210</td>\n","      <td>-0.1023</td>\n","      <td>-0.09437</td>\n","      <td>-0.03862</td>\n","      <td>-0.050487</td>\n","      <td>-0.064288</td>\n","      <td>-0.022344</td>\n","      <td>-0.050206</td>\n","    </tr>\n","    <tr>\n","      <th>226</th>\n","      <td>0.103140</td>\n","      <td>0.1522</td>\n","      <td>-0.095061</td>\n","      <td>-0.005115</td>\n","      <td>-0.037215</td>\n","      <td>0.092110</td>\n","      <td>-0.020066</td>\n","      <td>0.002996</td>\n","      <td>-0.008162</td>\n","      <td>-0.077549</td>\n","      <td>...</td>\n","      <td>-0.400181</td>\n","      <td>0.163119</td>\n","      <td>0.1088</td>\n","      <td>-0.0576</td>\n","      <td>0.15010</td>\n","      <td>0.17600</td>\n","      <td>0.153893</td>\n","      <td>0.230964</td>\n","      <td>0.101611</td>\n","      <td>0.151792</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>227 rows × 187 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d2c6d11-3ea8-40bd-be50-10986b5e613c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7d2c6d11-3ea8-40bd-be50-10986b5e613c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7d2c6d11-3ea8-40bd-be50-10986b5e613c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["mkt_ret_fin_df = pd.DataFrame(mkt_ret_fin)\n","\n","y = ex_mkt_ret_fin # mkt_vw\n","\n","# I print this out to see it as panel data\n","y_df = pd.DataFrame(y) # This represents output or column: # mkt_vw\n","y_df.columns = ['mkt_vw']\n","y_df.shape\n","#print(y_df)\n","#print(y)\n","#print(len(y))"],"metadata":{"id":"-ORpkz4mn-A_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650914933673,"user_tz":-120,"elapsed":219,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"24946451-a5f6-4f23-ad15-39c01b224104"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(227, 1)"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","source":["#This code is for the ANN"],"metadata":{"id":"20DfAXnMusN9"}},{"cell_type":"code","source":["# 1. Packages Importing\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"FOs-4dZpttOd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# This code is for UMAP/PCA to Preprocess our inputs"],"metadata":{"id":"M7NGJpNgc1Qd"}},{"cell_type":"code","source":["X_df = X_df.to_numpy()\n"],"metadata":{"id":"lc7fBu8_fmWt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# This embedding data will be the new inputs for our model!!! \n","# Delete the comment if UMAP\n","'''\n","embedding = umap.UMAP(n_neighbors=3,\n","                      min_dist=0.3,\n","                      metric='correlation').fit_transform(X_df.data)\n","embedding.shape\n","'''"],"metadata":{"id":"eTCE6HeGf5DM","executionInfo":{"status":"ok","timestamp":1650737250665,"user_tz":-120,"elapsed":9,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":53},"outputId":"20658b56-1476-419c-ded3-83cd2b3efe31"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nembedding = umap.UMAP(n_neighbors=3,\\n                      min_dist=0.3,\\n                      metric='correlation').fit_transform(X_df.data)\\nembedding.shape\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":173}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_absolute_error,mean_squared_error, explained_variance_score, r2_score\n","x_train, x_test, y_train, y_test = train_test_split(X_df, y_df, test_size = 0.25, random_state = 0,shuffle=False)"],"metadata":{"id":"DPleP0pli_TQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Random State solved with the Shuffle= False"],"metadata":{"id":"s3HspoA-snC4"}},{"cell_type":"code","source":["X_test = pd.DataFrame(x_test)\n","X_test.to_excel(\"output.xlsx\")\n","Y_test = pd.DataFrame(y_test)\n","Y_test.to_excel(\"output1.xlsx\")  "],"metadata":{"id":"MzRH7OxtpUtE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_train = y_train.to_numpy()\n","y_test = y_test.to_numpy()"],"metadata":{"id":"-9fVWOj3oV10"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","# normalize and scale feature data\n","from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","scaler.fit(x_train)\n","x_train = scaler.transform(x_train) # we just scale the test training data set to be between 0 and 1\n","x_test = scaler.transform(x_test) # we just scale the test data set to be between 0 and 1"],"metadata":{"id":"J4o9qnmGi5rz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Keep if PCA\n","#ALWAYS SCALE BEFORE PCA!!!\n","# threshold 95% of variance\n","# PCA adds more components and seems to spolve the hetersoscedasticity problem as well!!\n","# the pca 0.95 needs googlgling but it keeps the components that show 95% of explained variance\n","\n","pca = PCA(n_components = 0.95)\n"," \n","x_train = pca.fit_transform(x_train)\n","x_test = pca.transform(x_test)"],"metadata":{"id":"ppIzapAXqMuP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train.shape # to show how many features PCA left"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UiGXl-rh_Vgx","executionInfo":{"status":"ok","timestamp":1650914998335,"user_tz":-120,"elapsed":3,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"fceaa6ad-16ca-42d9-946e-f52a146f7961"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(170, 40)"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["# This code does the same task as the code above\n","#it selects the optimal PCA components\n","#pca.fit(x_train)\n","#cumsum = np.cumsum(pca.explained_variance_ratio_)\n","#d = np.argmax(cumsum >= 0.95) + 1"],"metadata":{"id":"cq_noYyKrrvS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_train = y_train.reshape(170,)\n","\n","y_test = y_test.reshape(57,) # this solves problems with the metrics in the cell down below"],"metadata":{"id":"eIfeOxB9hS-H"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Note: According to Marcin ALL models Should have early stopping"],"metadata":{"id":"fLZ9nAWaKUdi"}},{"cell_type":"code","source":["from tensorflow.keras.callbacks import EarlyStopping\n","# help(EarlyStopping)\n","early_stop = EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=5) \n","# This callback will stop the training when there is no improvement in\n","# the loss for three consecutive epochs."],"metadata":{"id":"dBNlDuyRPVJ0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#First option: 3 layers, Many neurons, w/ Dropout\n","\n"],"metadata":{"id":"DbMqdjP4xCqM"}},{"cell_type":"code","source":["from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.metrics import Accuracy\n","from sklearn.metrics import mean_absolute_percentage_error"],"metadata":{"id":"EV4WVldZMDW9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = Sequential()\n","\n","#model.add(Dense(5,activation='relu'))\n","#model.add(Dropout(0.25))\n","#model.add(Dense(3,activation='relu'))\n","#model.add(Dense(3,activation='relu'))\n","\n","model.add(Dense(40,activation='relu'))\n","model.add(Dropout(0.25))\n","model.add(Dense(35,activation='relu'))\n","model.add(Dense(35,activation='relu'))\n","\n","model.add(Dense(1))\n","opt = tf.keras.optimizers.Adam(learning_rate=0.0005)\n","model.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])\n"],"metadata":{"id":"QHstHibjv9pH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_test = np.asarray(x_test).astype('float32') #command to fix ValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float).\n","x_train = np.asarray(x_train).astype('float32')\n","y_test = np.asarray(y_test).astype('float32')\n","y_train = np.asarray(y_train).astype('float32')"],"metadata":{"id":"M0K_QukMwN8D"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The validation split here is to proportionally split your training set The first set is used for training and the 2nd set for validation after each epoch. Having the test set as validation data is wrong because test data are out of sample and supposed to be unknown. This code is competition compliant, so we should move on with this."],"metadata":{"id":"s_xUFGF1tnpu"}},{"cell_type":"markdown","source":["According to Marcin Batch size=2 is very small, also epochs=50 are very small."],"metadata":{"id":"0dDslyiqLF_d"}},{"cell_type":"code","source":["model.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0) #validation split is for x_train "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NhiwPUbQwUL0","executionInfo":{"status":"ok","timestamp":1650915052154,"user_tz":-120,"elapsed":4653,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"a467cd5a-42ac-4443-bfdd-4b5074709058"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 12: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fd2449f6a90>"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["loss_df = pd.DataFrame(model.history.history) # my loss DataFrame\n","\n","pd.DataFrame(model.history.history)\n","loss_df.plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"YLSdpJPWwXef","executionInfo":{"status":"ok","timestamp":1650915052426,"user_tz":-120,"elapsed":277,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"018a8bcf-f04b-425f-c9ff-d7c287483a25"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd2430c5fd0>"]},"metadata":{},"execution_count":37},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model.evaluate(x_test, y_test, verbose=0)\n","model.evaluate(x_train, y_train, verbose=0)\n","test_predictions = model.predict(x_test)\n","test_predictions = pd.Series(test_predictions.reshape(57,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"vqKKfyeswdob"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_predictions = np.asarray(test_predictions).astype('float32')"],"metadata":{"id":"ouDRbOjlndi0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.evaluate(x_test,y_test)\n","model.evaluate(x_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x6Wnu9QFhgaU","executionInfo":{"status":"ok","timestamp":1650915072637,"user_tz":-120,"elapsed":464,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"9e74b35e-9e9b-4333-f600-aa2dff446d5e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 5ms/step - loss: 0.0105\n","6/6 [==============================] - 0s 3ms/step - loss: 0.0064\n"]},{"output_type":"execute_result","data":{"text/plain":["0.006383933126926422"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["# So, what I could do is say, create a scatterplot, based of this data in my prediction dataframe.\n","sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df)\n","\n","# And we see this result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"ED_gt3G_wfhJ","executionInfo":{"status":"ok","timestamp":1650915074308,"user_tz":-120,"elapsed":5,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"b7a0ec73-087d-4090-de57-590a69e3457f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd2442b9cd0>"]},"metadata":{},"execution_count":42},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["test_predictions.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D-Zeqz-9YB0R","executionInfo":{"status":"ok","timestamp":1650915077280,"user_tz":-120,"elapsed":245,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"f8a9031d-34c6-4eeb-c930-1e73132ed7a5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(57,)"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["y_test = y_test.reshape(57,) # this solves problems with the metrics in the cell down below"],"metadata":{"id":"HYoDFtimpXHP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Mean absolute error\n","mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","\n","explained_variance_score(y_test, test_predictions)\n","\n","# Mean squared error\n","MSE_ANN = mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean absolute error\n","MAE_ANN = mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","RMSE_ANN = mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","# Mean Absolute Percentage error\n","MAPE_ANN = mean_absolute_percentage_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","\n","#r_squared_ANN = r2_score(y_test, test_predictions) #r2 works but is the wrong formula, also WHY does it give back a result???\n","SS_residual_ANN = sum((y_test-test_predictions)**2) \n","SS_Total_ANN = sum((y_test)**2)   \n","r_squared_ANN = 1- (SS_residual_ANN/SS_Total_ANN) #correct formula but does not work.\n","\n","print(\"R2=\",r_squared_ANN)\n","print(MSE_ANN)\n","print(MAE_ANN)\n","print(MAPE_ANN)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UM0_orgwwi4B","executionInfo":{"status":"ok","timestamp":1650915085396,"user_tz":-120,"elapsed":3,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"832d051d-6e65-4471-8af9-902281fa2864"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R2= -2.8750962855550632\n","0.010498259\n","0.090020575\n","9.127293\n"]}]},{"cell_type":"code","source":["test_predictions.shape "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9tpIknZ5uS0Q","executionInfo":{"status":"ok","timestamp":1650915089386,"user_tz":-120,"elapsed":496,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"c0540bae-8057-440f-dd57-0b6e530b1fce"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(57,)"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RTvRm5GHo86x","executionInfo":{"status":"ok","timestamp":1650915090525,"user_tz":-120,"elapsed":3,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"93b58bff-5220-4e75-f749-a261706f8632"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(57,)"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["# What we can also compare is our predictions, and we can plot them out, against a perfect fit.\n","\n","plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"KTGCBD4Gw8RB","executionInfo":{"status":"ok","timestamp":1650915091930,"user_tz":-120,"elapsed":5,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"cdf75863-4d6a-4d1e-9cf1-876975db94ee"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fd2442951d0>]"]},"metadata":{},"execution_count":49},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x=x_test[:,0], y=(y_test-test_predictions), data = pred_df) #residual graph"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"_cdFdKODbk1k","executionInfo":{"status":"ok","timestamp":1650915097626,"user_tz":-120,"elapsed":447,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"b83d42bf-8523-4825-ba4f-644eab104842"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd244320210>"]},"metadata":{},"execution_count":50},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Option 2 : 2 layers, neurons, w/o Dropout\n","\n"],"metadata":{"id":"QqrCSQnOypvh"}},{"cell_type":"markdown","source":["This architecture is bad change it after"],"metadata":{"id":"QC6q2qCbxn5w"}},{"cell_type":"code","source":["model_2 = Sequential()\n","\n","model_2.add(Dense(40,activation='relu'))\n","model_2.add(Dense(35,activation='relu'))\n","\n","#model.add(Dense(56,activation='relu')) \n","# model.add(Dense(113,activation='relu')) \n","\n","model_2.add(Dense(1))\n","opt = tf.keras.optimizers.Adam(learning_rate=0.0005)\n","model_2.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])"],"metadata":{"id":"DSzJTKdvypWm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#model_2.fit(x_train, y_train, validation_data=(x_test,y_test), batch_size=1, epochs=50, callbacks=[early_stop])\n","model_2.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"89WyIBvrywo1","executionInfo":{"status":"ok","timestamp":1650915114617,"user_tz":-120,"elapsed":844,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"8599984d-4856-4b05-e180-3c596d5d9ef0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 10: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fd2409bc610>"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["model_loss = pd.DataFrame(model_2.history.history)\n","model_loss.plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"zOBRKG35y0O4","executionInfo":{"status":"ok","timestamp":1650915114975,"user_tz":-120,"elapsed":4,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"887a2697-ff76-40b1-b657-9f4a1896ac96"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd2408bd990>"]},"metadata":{},"execution_count":53},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["This architecture does not help the model to learn"],"metadata":{"id":"IFj3OU2Xks9b"}},{"cell_type":"code","source":["loss_and_metrics = model_2.evaluate(x_test, y_test, verbose=0)\n","loss_and_metrics2 = model_2.evaluate(x_train, y_train, verbose=0)\n","test_predictions2 = model_2.predict(x_test)\n","test_predictions2 = pd.Series(test_predictions2.reshape(57,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions2],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"0YOidN2nzEmA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#r_squared_ANN_2 = r2_score(y_test, test_predictions2) # this the wrong formula for the out of sample R2\n","\n","SS_residual_ANN_2 = sum((y_test-test_predictions2)**2) \n","SS_Total_ANN_2 = sum((y_test)**2)   \n","r_squared_ANN_2 = 1 - (SS_residual_ANN_2/SS_Total_ANN_2)\n","\n","\n","print(r_squared_ANN_2)\n","\n","MAE_ANN2 = mean_absolute_error(y_test,test_predictions2)\n","MSE_ANN2 = mean_squared_error(y_test,test_predictions2)\n","RMSE_ANN2 = mean_squared_error(y_test,test_predictions2)**0.5\n","MAPE_ANN2 = mean_absolute_percentage_error(y_test,test_predictions2)\n","\n","print(MSE_ANN2)\n","print(MAE_ANN2)\n","print(MAPE_ANN2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CXnZB50QzmnW","executionInfo":{"status":"ok","timestamp":1650915135374,"user_tz":-120,"elapsed":241,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"0bcdba92-37f1-4054-df97-f922bf5a4a0e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-35.19598237817988\n","0.09806075\n","0.26468453\n","21.409925\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions2)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"HLrCoe9fzrj0","executionInfo":{"status":"ok","timestamp":1650915147657,"user_tz":-120,"elapsed":262,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"0d3b0902-bbbb-419d-f888-1c01467a120c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fd241e70710>]"]},"metadata":{},"execution_count":58},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"2QHnVmx508yu","executionInfo":{"status":"ok","timestamp":1650915150921,"user_tz":-120,"elapsed":501,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"6c145eb1-a41e-4690-8718-b260dffa067e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd241ea1890>"]},"metadata":{},"execution_count":59},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x=x_test[:,0], y=(y_test-test_predictions2), data = pred_df) #residual graph"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"vz6XNl_Ak54N","executionInfo":{"status":"ok","timestamp":1650915153469,"user_tz":-120,"elapsed":520,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"51e0f7fa-26a6-41ae-f7ef-03c88dc57f41"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd240998690>"]},"metadata":{},"execution_count":60},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Option 3: 3 layers, pyramid rule ,w Dropout "],"metadata":{"id":"txF3mqDS1Uz_"}},{"cell_type":"code","source":["#@title\n","model_3 = Sequential()\n","\n","model_3.add(Dense(40,activation='relu')) \n","model_3.add(Dropout(0.25)) \n","model_3.add(Dense(20,activation='relu'))\n","model_3.add(Dense(10,activation='relu'))\n","\n","\n","model_3.add(Dense(1))\n","opt = tf.keras.optimizers.Adam(learning_rate=0.0005)\n","model_3.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])"],"metadata":{"id":"-Le87iVN1a2y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title\n","#model_3.fit(x_train, y_train, validation_data=(x_test,y_test), batch_size=1, epochs=50, callbacks=[early_stop])\n","model_3.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R0jR1JY71mCq","executionInfo":{"status":"ok","timestamp":1650915178489,"user_tz":-120,"elapsed":2875,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"d638198c-0c79-42bd-b12c-f579be75cd4f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 11: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fd242fae190>"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["#@title\n","model_loss = pd.DataFrame(model_3.history.history)\n","model_loss.plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"p0Di_27k1oIP","executionInfo":{"status":"ok","timestamp":1650915178490,"user_tz":-120,"elapsed":9,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"bacbb62a-5b18-498c-d772-3451225ba426"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd24e754e10>"]},"metadata":{},"execution_count":63},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["By far the best model, next step is to check for het/ty"],"metadata":{"id":"FRsUfryR2IZ9"}},{"cell_type":"code","source":["#@title\n","model_3.evaluate(x_test, y_test, verbose=0)\n","model_3.evaluate(x_train, y_train, verbose=0)\n","test_predictions3 = model_3.predict(x_test)\n","test_predictions3 = pd.Series(test_predictions3.reshape(57,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions3],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"0NCVzrVk1pwb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["SS_residual_ANN_3 = sum((y_test-test_predictions3)**2) \n","SS_Total_ANN_3 = sum((y_test)**2)   \n","r_squared_ANN_3 = 1- (SS_residual_ANN_3/SS_Total_ANN_3)\n","\n","MAE_ANN3 = mean_absolute_error(y_test,test_predictions3)\n","MSE_ANN3 = mean_squared_error(y_test,test_predictions3)\n","RMSE_ANN3 = mean_squared_error(y_test,test_predictions3)**0.5\n","MAPE_ANN3 = mean_absolute_percentage_error(y_test,test_predictions3)\n","\n","#r_squared_ANN3 = r2_score(y_test, test_predictions3)\n","print(r_squared_ANN_3)\n","print(MSE_ANN3)\n","print(MAE_ANN3)\n","print(MAPE_ANN3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yZ3mJ-Ys1rC0","executionInfo":{"status":"ok","timestamp":1650915195247,"user_tz":-120,"elapsed":263,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"39534d00-a250-4022-9f10-263e853a07d1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-2.618333465730891\n","0.009802648\n","0.07775701\n","6.5266957\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions3)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"CKsy9G_l1uFK","executionInfo":{"status":"ok","timestamp":1650915197799,"user_tz":-120,"elapsed":636,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"443da134-821f-4b79-e3ea-a98113cb3bb2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fd24e920d50>]"]},"metadata":{},"execution_count":67},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df) # a zoomed in version of the above"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"BIAFZFpr2I8n","executionInfo":{"status":"ok","timestamp":1650915200890,"user_tz":-120,"elapsed":267,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"eb4bb30c-3675-429d-903a-2607258b9ddb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd24e8460d0>"]},"metadata":{},"execution_count":68},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.scatterplot(x=x_test[:,0], y=(y_test-test_predictions3), data = pred_df) #residual graph for variable 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"Z053lv78-O1D","executionInfo":{"status":"ok","timestamp":1650915204911,"user_tz":-120,"elapsed":518,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"5d4935f2-8310-4135-a735-6162d9a61bb0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd2431067d0>"]},"metadata":{},"execution_count":69},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Model 4: 4 layers, neurons, w/ Dropout"],"metadata":{"id":"yglPXZSm1K4A"}},{"cell_type":"code","source":["model_4 = Sequential()\n","\n","model_4.add(Dense(40,activation='relu'))\n","model_4.add(Dropout(0.25))\n","\n","model_4.add(Dense(20,activation='relu'))\n","\n","model_4.add(Dense(10,activation='relu'))\n","\n","model_4.add(Dense(5,activation='relu'))\n","\n","\n","model_4.add(Dense(1))\n","opt = tf.keras.optimizers.Adam(learning_rate=0.0005)\n","model_4.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])\n"],"metadata":{"id":"j2RpnJL71SyQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_test = np.asarray(x_test).astype('float32') #command to fix ValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float).\n","x_train = np.asarray(x_train).astype('float32')\n","y_test = np.asarray(y_test).astype('float32')\n","y_train = np.asarray(y_train).astype('float32')"],"metadata":{"id":"dvArefyF1xE6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_4.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0)"],"metadata":{"id":"mo-6iSNz10yp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650915236571,"user_tz":-120,"elapsed":4867,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"c6fe58e2-0461-4339-da5a-c95183121928"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 50: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fd24d6bb510>"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["loss_df = pd.DataFrame(model_4.history.history) # my loss DataFrame\n","\n","pd.DataFrame(model_4.history.history)\n","loss_df.plot()"],"metadata":{"id":"0GG2Mrs915em","colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"status":"ok","timestamp":1650915239356,"user_tz":-120,"elapsed":2788,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"abea2e88-46c8-4deb-b021-605cd461dc1f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd241de0f90>"]},"metadata":{},"execution_count":74},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model_4.evaluate(x_test, y_test, verbose=0)\n","model_4.evaluate(x_train, y_train, verbose=0)\n","test_predictions4 = model_4.predict(x_test)\n","test_predictions4 = pd.Series(test_predictions4.reshape(57,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions4],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"0ANYCCeM2BnF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_predictions4 = np.asarray(test_predictions4).astype('float32')"],"metadata":{"id":"NKAlS0Nt2JtX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_4.evaluate(x_test,y_test)\n","model_4.evaluate(x_train,y_train)"],"metadata":{"id":"E_FIaN4p2KNW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650915257188,"user_tz":-120,"elapsed":462,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"54bdd848-27b2-49f4-c21d-3ae998e6c4ef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 9ms/step - loss: 0.0033\n","6/6 [==============================] - 0s 4ms/step - loss: 0.0041\n"]},{"output_type":"execute_result","data":{"text/plain":["0.004073637071996927"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["# So, what I could do is say, create a scatterplot, based of this data in my prediction dataframe.\n","sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df)\n","\n","# And we see this result"],"metadata":{"id":"yY_hrtnn2Mo3","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1650915260876,"user_tz":-120,"elapsed":5,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"0cd8deaf-ca0e-4809-f588-6091568d2b0e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd241d25390>"]},"metadata":{},"execution_count":79},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Mean absolute error\n","mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","\n","explained_variance_score(y_test, test_predictions4)\n","\n","# Mean squared error\n","MSE_ANN_4 = mean_squared_error(y_test,test_predictions4)\n","# Mean absolute error\n","MAE_ANN_4 = mean_absolute_error(y_test,test_predictions4)\n","# Root mean squared error\n","RMSE_ANN_4 = mean_squared_error(y_test,test_predictions4)**0.5\n","\n","MAPE_ANN4 = mean_absolute_percentage_error(y_test,test_predictions4)\n","\n","#r_squared_ANN_4 = r2_score(y_test, test_predictions4) #r2 works but is the wrong formula, also WHY does it give back a result???\n","SS_residual_ANN_4 = sum((y_test-test_predictions4)**2) \n","SS_Total_ANN_4 = sum((y_test)**2)   \n","r_squared_ANN_4 = 1- (SS_residual_ANN_4/SS_Total_ANN_4) #correct formula but does not work.\n","\n","print(r_squared_ANN_4)\n","print(MSE_ANN_4)\n","print(MAE_ANN_4)\n","print(MAPE_ANN4)"],"metadata":{"id":"KOHEdEMl2PSN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650915266191,"user_tz":-120,"elapsed":2,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"9919cc1a-bdee-4877-aa4e-b4e40332e30d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-0.21212709152336506\n","0.0032838476\n","0.04281266\n","1.699477\n"]}]},{"cell_type":"code","source":["# What we can also compare is our predictions, and we can plot them out, against a perfect fit.\n","\n","plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions4)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"id":"YGLmIRGt2gQZ","colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"status":"ok","timestamp":1650915271361,"user_tz":-120,"elapsed":289,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"db0df06c-e623-44e4-bf53-c0f2d72913b9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fd241ce5910>]"]},"metadata":{},"execution_count":81},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Model 5: 4 layers, neurons ,w Dropout"],"metadata":{"id":"knlydyPP5i5E"}},{"cell_type":"code","source":["model_5 = Sequential()\n","\n","model_5.add(Dense(40,activation='relu'))\n","model_5.add(Dropout(0.25))\n","model_5.add(Dense(20,activation='relu'))\n","model_5.add(Dense(20,activation='relu'))\n","model_5.add(Dense(20,activation='relu'))\n","\n","\n","model_5.add(Dense(1))\n","opt = tf.keras.optimizers.Adam(learning_rate=0.0005)\n","model_5.compile(optimizer=opt,loss='mse') #,metrics=['mean_absolute_percentage_error','mean_absolute_error'])"],"metadata":{"id":"w495ewJ25n0V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_test = np.asarray(x_test).astype('float32') #command to fix ValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float).\n","x_train = np.asarray(x_train).astype('float32')\n","y_test = np.asarray(y_test).astype('float32')\n","y_train = np.asarray(y_train).astype('float32')\n","model_5.fit(x_train, y_train, batch_size=40, epochs=400,validation_split=0.2,callbacks=[early_stop], verbose=0)"],"metadata":{"id":"q_805FOk6CTD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650915294278,"user_tz":-120,"elapsed":3142,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"fa2f2e03-709b-4c10-e4c5-8425d3f7efab"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 20: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fd241ce5b10>"]},"metadata":{},"execution_count":83}]},{"cell_type":"code","source":["loss_df = pd.DataFrame(model_5.history.history) # my loss DataFrame\n","\n","pd.DataFrame(model_5.history.history)\n","loss_df.plot()"],"metadata":{"id":"UTuBInll5_YJ","colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"status":"ok","timestamp":1650915295597,"user_tz":-120,"elapsed":501,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"a430531c-b1b9-40aa-b2c5-e9a2847fca2c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd241a3a550>"]},"metadata":{},"execution_count":84},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model_5.evaluate(x_test, y_test, verbose=0)\n","model_5.evaluate(x_train, y_train, verbose=0)\n","test_predictions5 = model_5.predict(x_test)\n","test_predictions5 = pd.Series(test_predictions5.reshape(57,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions5],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"Pwx9Tvi558mw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_predictions5 = np.asarray(test_predictions5).astype('float32')"],"metadata":{"id":"OtYZ4N8254wp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_5.evaluate(x_test,y_test)\n","model_5.evaluate(x_train,y_train)"],"metadata":{"id":"8ygduTVc53PX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650915312760,"user_tz":-120,"elapsed":5,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"892599bd-4c9e-48dd-b4ca-e0ff8e247e7b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 6ms/step - loss: 0.0075\n","6/6 [==============================] - 0s 2ms/step - loss: 0.0047\n"]},{"output_type":"execute_result","data":{"text/plain":["0.0046626850962638855"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":["# So, what I could do is say, create a scatterplot, based of this data in my prediction dataframe.\n","sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df)\n","\n","# And we see this result"],"metadata":{"id":"ZH9lWhdM5wtX","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1650915314445,"user_tz":-120,"elapsed":617,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"aeb42d4b-574d-47fd-fb48-1e306f59fef0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd2419aab50>"]},"metadata":{},"execution_count":89},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Mean absolute error\n","mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","\n","explained_variance_score(y_test, test_predictions5)\n","\n","# Mean squared error\n","MSE_ANN_5 = mean_squared_error(y_test,test_predictions5)\n","# Mean absolute error\n","MAE_ANN_5 = mean_absolute_error(y_test,test_predictions5)\n","# Root mean squared error\n","RMSE_ANN_5 = mean_squared_error(y_test,test_predictions5)**0.5\n","\n","MAPE_ANN5 = mean_absolute_percentage_error(y_test,test_predictions5)\n","\n","#r_squared_ANN_5 = r2_score(y_test, test_predictions5) #r2 works but is the wrong formula, also WHY does it give back a result???\n","SS_residual_ANN_5 = sum((y_test-test_predictions5)**2) \n","SS_Total_ANN_5 = sum((y_test)**2)   \n","r_squared_ANN_5 = 1- (SS_residual_ANN_5/SS_Total_ANN_5) #correct formula but does not work.\n","\n","print(r_squared_ANN_5)\n","print(MSE_ANN_5)\n","print(MAE_ANN_5)\n","print(MAPE_ANN5)"],"metadata":{"id":"JFg4Nem65toR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650915316373,"user_tz":-120,"elapsed":2,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"9fccbc4d-4202-4bfd-8b40-763ff8f335fd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-1.782487966250791\n","0.0075382073\n","0.07242784\n","7.1165867\n"]}]},{"cell_type":"code","source":["# What we can also compare is our predictions, and we can plot them out, against a perfect fit.\n","\n","plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions5)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"id":"M520mxVm5s5n","colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"status":"ok","timestamp":1650915322204,"user_tz":-120,"elapsed":288,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"bfc59d8b-2c92-4b01-fb1a-fb73d9084eb3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fd2418fdd90>]"]},"metadata":{},"execution_count":91},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Heteroscedasticity tests"],"metadata":{"id":"SiXhyYyaoBlq"}},{"cell_type":"code","source":["import statsmodels.api as sm\n","import statsmodels.formula.api as smf\n","import statsmodels.tools.tools as smt\n","import statsmodels.stats.diagnostic as smd"],"metadata":{"id":"glRV0Wu_Z7Ov","executionInfo":{"status":"ok","timestamp":1650915328557,"user_tz":-120,"elapsed":1288,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e1682cca-b60a-439e-de63-fc04fb29326b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"]}]},{"cell_type":"code","source":["resid = y_test-test_predictions\n","resid2 = y_test-test_predictions2\n","resid3 = y_test-test_predictions3\n","resid4 = y_test-test_predictions4\n","resid5 = y_test-test_predictions5\n","exog_het = x_test"],"metadata":{"id":"FlJ4iXv1aSGK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bptest = smd.het_breuschpagan(resid, exog_het)\n","print(\"lm:\", bptest[0], \"lm_pvalue:\", bptest[1],\"F_test_pvalue\",bptest[3])\n","# breusch pagan test het/ty for regression models\n","# a p value less than 0.05 shows hetero/ty. "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AZp32jCOaSZ2","executionInfo":{"status":"ok","timestamp":1650915336753,"user_tz":-120,"elapsed":242,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"f715a459-a820-4dfc-d79d-429167a212ec"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["lm: 48.07452034950256 lm_pvalue: 0.15119106719545716 F_test_pvalue 0.034060096975981176\n"]}]},{"cell_type":"code","source":["bptest2 = smd.het_breuschpagan(resid2, exog_het)\n","print(\"lm:\", bptest2[0], \"lm_pvalue:\", bptest2[1],\"F_test_pvalue\",bptest[3])\n","\n","bptest3 = smd.het_breuschpagan(resid3, exog_het)\n","print(\"lm:\", bptest3[0], \"lm_pvalue:\", bptest3[1],\"F_test_pvalue\",bptest[3])\n","\n","bptest4 = smd.het_breuschpagan(resid4, exog_het)\n","print(\"lm:\", bptest4[0], \"lm_pvalue:\", bptest4[1],\"F_test_pvalue\",bptest[3])\n","\n","bptest5 = smd.het_breuschpagan(resid5, exog_het)\n","print(\"lm:\", bptest5[0], \"lm_pvalue:\", bptest5[1],\"F_test_pvalue\",bptest[3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TxPrZ6FZpVic","executionInfo":{"status":"ok","timestamp":1650915338168,"user_tz":-120,"elapsed":2,"user":{"displayName":"Nikolaos Voutos","userId":"01665117412719434514"}},"outputId":"64387d19-a8d7-449c-a634-89cc21df7f95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["lm: 55.91250688768923 lm_pvalue: 0.038747544428870045 F_test_pvalue 0.034060096975981176\n","lm: 53.085919730365276 lm_pvalue: 0.06566251393988597 F_test_pvalue 0.034060096975981176\n","lm: 47.417571276426315 lm_pvalue: 0.16693239347304678 F_test_pvalue 0.034060096975981176\n","lm: 50.82536941766739 lm_pvalue: 0.09726536977394107 F_test_pvalue 0.034060096975981176\n"]}]},{"cell_type":"markdown","source":["lm p value shows for het/ty for the whole model (all x)\n","F test p values shows for het/ty for every single x. (If 1 x is het/tic then this p value is low)"],"metadata":{"id":"ZxcmfqV5qbVB"}}]}