{"cells":[{"cell_type":"markdown","source":["RE DO the Model but with a 3 month lag."],"metadata":{"id":"6FNtlC27TYu-"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":"OK"}},"base_uri":"https://localhost:8080/","height":316},"id":"T5tilXcz4Ulu","executionInfo":{"status":"ok","timestamp":1648412825164,"user_tz":-120,"elapsed":70729,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"outputId":"7c108da3-f4d1-4d9d-b24b-3ea27e034255"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-b6f86b78-9d1f-4a30-95dc-26d4d6ad9e70\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-b6f86b78-9d1f-4a30-95dc-26d4d6ad9e70\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving [swe]_[size]_[monthly]_[vw].xlsx to [swe]_[size]_[monthly]_[vw] (1).xlsx\n","Saving [swe]_[value]_[monthly]_[vw].xlsx to [swe]_[value]_[monthly]_[vw] (1).xlsx\n","Saving ATLAS_COPCO_B_PX_LAST.xlsx to ATLAS_COPCO_B_PX_LAST (1).xlsx\n","Saving INVEB_PX_LAST.xlsx to INVEB_PX_LAST (1).xlsx\n","Saving market_returns.csv to market_returns (1).csv\n","Saving Monthly_inputs_sweden_after_spline.xlsx to Monthly_inputs_sweden_after_spline.xlsx\n","Saving Risk Free sweden.xlsx to Risk Free sweden (1).xlsx\n","Saving Sweden 10Y bond.xlsx to Sweden 10Y bond (1).xlsx\n"]}],"source":["# 1. Packages Importing\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","\n","from google.colab import files\n","upload = files.upload() #upload all the files from Q1 Master Thesis SWE"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lCD4MaMO4Ulx","executionInfo":{"status":"ok","timestamp":1648413538946,"user_tz":-120,"elapsed":816,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"outputId":"17ded450-95c5-4253-afff-9d77e852e89c","cellView":"code","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["[[Timestamp('2001-04-01 00:00:00') 18.87 40.33 ... 2.98 18.03 1.69]\n"," [Timestamp('2001-05-01 00:00:00') 17.11138974000345 40.51996044284943\n","  ... 2.487675321016084 17.12849297533846 1.467981436282562]\n"," [Timestamp('2001-06-01 00:00:00') 16.61333392518066 40.59019058089163\n","  ... 2.296806911171446 16.68901660027153 1.389718475242042]\n"," ...\n"," [Timestamp('2020-10-01 00:00:00') 17.04001401023738 34.91000812976497\n","  ... 2.269998462157295 10.69998223664441 2.009997832591393]\n"," [Timestamp('2020-11-01 00:00:00') 15.9870774595347 34.7845621908094 ...\n","  2.357568810476242 11.53862471858139 2.132232168607825]\n"," [Timestamp('2020-12-01 00:00:00') 14.50661839899986 34.91518030907802\n","  ... 2.467992951094916 12.31786098004729 2.274939942590691]]\n"]},{"output_type":"execute_result","data":{"text/plain":["237"]},"metadata":{},"execution_count":7}],"source":["\n","inputs_monthly = pd.read_excel(\"Monthly_inputs_sweden_after_spline.xlsx\") # read data\n","\n","inputs_array = inputs_monthly.to_numpy() # important in order to be able to process data\n","\n","print(inputs_array[0:237]) # for now i will only keep the data until 12-2020, because i have market data until then\n","inputs_array = inputs_array[0:237]\n","len(inputs_array)\n","# WARNING DATA ARE FOR START OF MONTH"]},{"cell_type":"markdown","source":["** NOT SURE IF I SHOULD HAVE AN ONE MONTH LAG OR 3 MONTH LAG, BECAUSE THE REAL DATAPOINT COMES OUT ON THE NEXT QUARTER**"],"metadata":{"id":"fY5__UuvH_wV"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"9CiVC0m04Uly","executionInfo":{"status":"ok","timestamp":1648414025451,"user_tz":-120,"elapsed":420,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1ab5c602-0cbd-4a82-9527-c02683da02fe","cellView":"code","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["[['swe' 'size' 'monthly' ... 5.0 Timestamp('2001-04-30 00:00:00')\n","  -0.0691008851566858]\n"," ['swe' 'size' 'monthly' ... 5.0 Timestamp('2001-05-31 00:00:00')\n","  0.0756032772952057]\n"," ['swe' 'size' 'monthly' ... 5.0 Timestamp('2001-06-30 00:00:00')\n","  -0.0291916607137002]\n"," ...\n"," ['swe' 'size' 'monthly' ... 5.0 Timestamp('2020-10-31 00:00:00')\n","  -0.0006270020634473]\n"," ['swe' 'size' 'monthly' ... 5.0 Timestamp('2020-11-30 00:00:00')\n","  -0.0060724112610462]\n"," ['swe' 'size' 'monthly' ... 5.0 Timestamp('2020-12-31 00:00:00')\n","  0.0370506615867681]]\n"]},{"output_type":"execute_result","data":{"text/plain":["(237,)"]},"metadata":{},"execution_count":14}],"source":["#SMB \n","#WARNING DATA ARE FOR END OF MONTH\n","swe_size_monthly_vw = pd.read_excel('[swe]_[size]_[monthly]_[vw].xlsx') # read data\n","swe_size_monthly_vw_array = swe_size_monthly_vw.to_numpy() # important in order to be able to process data\n","\n","swe_size_monthly_vw_returns = swe_size_monthly_vw_array[:,6] \n","SMB_returns_swe = swe_size_monthly_vw_returns [183:420] # for t+1 for END OF MONTH 4/1993-12/2020\n","\n","print(swe_size_monthly_vw_array[183:420])\n","SMB_returns_swe.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NwtnHhpt4Ulz","executionInfo":{"status":"ok","timestamp":1648414173543,"user_tz":-120,"elapsed":365,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e2cd95ab-0722-48b5-f790-fe3410b62b28","cellView":"code","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["[['swe' 'value' 'monthly' ... 18.0 Timestamp('2001-04-30 00:00:00')\n","  -0.0403861827202726]\n"," ['swe' 'value' 'monthly' ... 18.0 Timestamp('2001-05-31 00:00:00')\n","  0.0383493587560049]\n"," ['swe' 'value' 'monthly' ... 18.0 Timestamp('2001-06-30 00:00:00')\n","  0.064148757473659]\n"," ...\n"," ['swe' 'value' 'monthly' ... 18.0 Timestamp('2020-10-31 00:00:00')\n","  -0.0067784171285996]\n"," ['swe' 'value' 'monthly' ... 18.0 Timestamp('2020-11-30 00:00:00')\n","  0.0128404585745397]\n"," ['swe' 'value' 'monthly' ... 18.0 Timestamp('2020-12-31 00:00:00')\n","  -0.0622125266303019]]\n"]},{"output_type":"execute_result","data":{"text/plain":["(237,)"]},"metadata":{},"execution_count":18}],"source":["#@title\n","# 2.3 Fama-French Three Factors Model Data\n","\n","# sweway, Value, HML\n","swe_value_monthly_vw = pd.read_excel('[swe]_[value]_[monthly]_[vw].xlsx') # read data\n","swe_value_monthly_vw_array = swe_value_monthly_vw.to_numpy() # important in order to be able to process data\n","\n","swe_value_monthly_vw_returns = swe_value_monthly_vw_array[:,6] \n","HML_returns_swe = swe_value_monthly_vw_returns[171:408] # for t+1 for 4/2001 to 12/2020\n","\n","print(swe_value_monthly_vw_array[171:408])\n","HML_returns_swe.shape"]},{"cell_type":"code","source":["#@title\n","#upload Risk Free sweway.xlsx\n","#upload = files.upload()"],"metadata":{"id":"OrpyMWBD_k1i","cellView":"code"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"42_oJXUW4Ul0","executionInfo":{"status":"ok","timestamp":1648414353861,"user_tz":-120,"elapsed":353,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"591c43e1-ab00-4dec-f22b-070e6f49f43c","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["             Period  Annualized  Average\n","89       2001 April    0.395612   4.0000\n","90         2001 May    0.395612   4.0000\n","91        2001 June    0.395612   4.0000\n","92        2001 July    0.415583   4.1705\n","93      2001 August    0.424993   4.2500\n","..              ...         ...      ...\n","321     2020 August    0.000000   0.0000\n","322  2020 September    0.000000   0.0000\n","323    2020 October    0.000000   0.0000\n","324   2020 November    0.000000   0.0000\n","325   2020 December    0.000000   0.0000\n","\n","[237 rows x 3 columns]\n"]},{"output_type":"execute_result","data":{"text/plain":["(237,)"]},"metadata":{},"execution_count":25}],"source":["\n","# sweden, Historical risk-free rate\n","risk_free_swe = pd.read_excel('Risk Free sweden.xlsx') # read data\n","risk_free_swe_array = risk_free_swe.to_numpy() # important in order to be able to process data\n","\n","#risk_free_swe_returns = risk_free_swe_array[:,6]/100 \n","#rf_swe = risk_free_swe_returns[3:327]\n","#rf_swe_t1 = risk_free_swe_array[1:325,1]/100 # risk free t-1\n","rf_swe = risk_free_swe_array[89:326,1]/100 # FOR 4-2001 TO 12-2020\n","\n","print(risk_free_swe[89:326])\n","rf_swe.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7V3Pb_LD4Ul0"},"outputs":[],"source":["'''\n","from sklearn.linear_model import LinearRegression\n","import scipy, scipy.stats\n","#help(stats.linregress)\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3s8pxY834Ul1"},"outputs":[],"source":["\n","import pandas_datareader as web\n","# If problem: \"ModuleNotFoundError: No module named 'pandas_datareader'\"\n","# Then open cmd --> Anaconda prompt --> activate environment --> paste the code below\n","# conda install -c anaconda pandas-datareader"]},{"cell_type":"markdown","metadata":{"id":"asRJZ1Y24Ul1"},"source":["### EXCESS RETURNS"]},{"cell_type":"markdown","metadata":{"id":"L5qt6Kfv4Ul3"},"source":["### MARKET RETURNS"]},{"cell_type":"code","source":["#@title\n","#upload market_returns.csv\n","#upload = files.upload()"],"metadata":{"id":"VsP3pxveKnt2"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RetP22Qp4Ul4","executionInfo":{"status":"ok","timestamp":1648414517572,"user_tz":-120,"elapsed":358,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"4904a7a7-0cd1-4c69-b669-e69bc25e632c","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["[['SWE' '2001-04-30' 289 ... 0.0444476023 0.1313571557 0.0405836023]\n"," ['SWE' '2001-05-31' 289 ... 0.0017447854 -0.050556433 -0.007190961]\n"," ['SWE' '2001-06-30' 307 ... -0.106819935 -0.063117055 -0.109554223]\n"," ...\n"," ['SWE' '2020-10-31' 674 ... -0.062888563 -0.050552926 -0.062808254]\n"," ['SWE' '2020-11-30' 680 ... 0.1155726457 0.1538268339 0.1155066457]\n"," ['SWE' '2020-12-31' 685 ... 0.1287693915 0.0614490084 0.1287093915]]\n"]}],"source":["#WARNING DATA ARE FOR END OF MONTH\n","# Output variables, y\n","\n","mkt_ret = pd.read_csv('market_returns.csv') \n","\n","mkt_ret_array = mkt_ret.to_numpy()\n","\n","# creating market returns for sweden\n","# Note: we need to start from 12/1993 for sweden \n","mkt_ret_swe = mkt_ret_array[25831:26068] # for t+1\n","print(mkt_ret_swe)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7nmYIjsm4Ul4","executionInfo":{"status":"ok","timestamp":1648414936010,"user_tz":-120,"elapsed":402,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d9713050-4670-47d9-defb-275e2b9aca62","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["[ 0.13126503 -0.05117023 -0.06429534 -0.00253688 -0.06954138 -0.1475619\n","  0.06654213  0.12528753  0.02067699 -0.07635302  0.01258544  0.03738012\n"," -0.07416232 -0.01235535 -0.01961683 -0.13889325 -0.00687365 -0.15789807\n","  0.13338016  0.14119957 -0.09709372 -0.02090644 -0.00482072 -0.03240991\n","  0.19281171  0.05037522  0.00725389  0.04073547  0.01153413  0.05515436\n","  0.0674081   0.03713096  0.08159252  0.03204791  0.03150042 -0.02582488\n","  0.00069264  0.01314958  0.02380463 -0.04219932  0.01941575  0.07503094\n","  0.02132173  0.12887599  0.02735817 -0.05463094  0.06812593 -0.02977686\n"," -0.027297    0.02195667 -0.01510686  0.05819682  0.00666732  0.03570729\n"," -0.04844129  0.02196841  0.07364767  0.05971373 -0.00590057  0.08218174\n","  0.0614282  -0.05895948  0.00160617 -0.01775797  0.03897924  0.03859989\n","  0.05762885  0.04828795  0.08682173  0.0099452  -0.03460331  0.05533104\n","  0.11877932 -0.01109839 -0.0209748   0.00238293 -0.05224245  0.06016694\n"," -0.01283639 -0.07060797 -0.03358769 -0.12210207  0.06699754  0.0228117\n","  0.02887817  0.01766143 -0.15035641 -0.01479269 -0.05375063 -0.19875449\n"," -0.2704525  -0.05830407  0.07184339 -0.11225651 -0.05477172  0.09933764\n","  0.25248376  0.09197021 -0.01126403  0.17629054  0.06256191  0.02216785\n","  0.04154152  0.00876957 -0.00986141 -0.01467338  0.02454511  0.07132676\n","  0.03753616 -0.14067231  0.01929892  0.12301521 -0.05379077  0.19252765\n","  0.00626613 -0.03494604  0.09936927  0.04150375 -0.00540078  0.02580698\n","  0.08309208 -0.03209095 -0.0581322  -0.04720613 -0.10989831 -0.13164076\n","  0.1546458  -0.05779227 -0.0062105   0.06157141  0.09994467 -0.02119661\n"," -0.01216117 -0.1355459   0.08471095  0.06018968  0.00312056  0.03743858\n"," -0.02817449  0.02374108  0.04273352  0.08370645  0.02265465 -0.000409\n","  0.02379734 -0.00817982 -0.06481454  0.10927816 -0.02840612  0.07392977\n","  0.01088158  0.00953839  0.0384369  -0.03629287  0.07952712 -0.00676753\n","  0.01061403  0.01356121 -0.01508757 -0.03941962 -0.00502484 -0.0323711\n"," -0.0114676   0.02671091 -0.03048946  0.00759964  0.0721459  -0.03607983\n","  0.03449144 -0.01078323 -0.03271882  0.0174436  -0.0471187  -0.03128656\n","  0.05332213  0.00953456 -0.00339512 -0.08305819  0.01648967  0.07966423\n","  0.01722371 -0.0158006  -0.04884154  0.04565637  0.02351276  0.01936441\n"," -0.05834364 -0.00794039  0.04353954  0.05386763 -0.00225362  0.02736346\n","  0.05334451  0.03710032  0.00993662  0.01662838  0.00969181  0.02406108\n"," -0.00776085 -0.03095774  0.00470191  0.05752404 -0.05648967 -0.02333989\n","  0.00266264 -0.0094326  -0.01068196  0.06440416 -0.01542919  0.03212288\n"," -0.09660879 -0.01231579 -0.04484319  0.0687325   0.01718179  0.00510607\n","  0.04408275 -0.06484858  0.08925416 -0.03345912 -0.03785565  0.03285335\n","  0.05711185  0.02428493  0.06415708 -0.01814758 -0.06825946 -0.1596875\n","  0.10931838  0.09463511  0.03898691  0.11253428  0.05182502  0.00421762\n"," -0.05048693  0.15389283  0.06150901]\n"]},{"output_type":"execute_result","data":{"text/plain":["237"]},"metadata":{},"execution_count":35}],"source":["#@title\n","mkt_ret_swe_df = pd.DataFrame(mkt_ret_swe)\n","#creating the excess market returns\n","y_swe = mkt_ret_swe[:,7] - rf_swe # mkt_vw\n","\n","# I print this out to see it as panel data\n","y_df = pd.DataFrame(y_swe) # This represents output or column: # mkt_vw\n","y_df.columns = ['mkt_vw']\n","y_df = np.asarray(y_swe).astype(np.float32)\n","\n","print(y_df)\n","len(y_df)"]},{"cell_type":"markdown","metadata":{"id":"86j8zn5X4Ul5"},"source":["### REGRESSION"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TYL44xyF4Ul5","executionInfo":{"status":"ok","timestamp":1648415894034,"user_tz":-120,"elapsed":8,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":972},"outputId":"4450b5e1-2815-416d-8a02-2e343b55b418"},"outputs":[{"output_type":"stream","name":"stdout","text":["            0          1           2         3          4         5   \\\n","0        18.87      40.33      391.67      1.18      18.36      1.67   \n","1     17.11139   40.51996    391.1643  1.395764  21.179692  1.685939   \n","2    16.613334  40.590191  389.298551  1.479945  22.015532  1.680973   \n","3        17.03      40.59  386.850001      1.47      21.48      1.66   \n","4    18.015554  40.568698  384.595895  1.403389   20.18558  1.627915   \n","..         ...        ...         ...       ...        ...       ...   \n","232  16.734887  36.259098  263.425307   1.08559   6.652929   1.37175   \n","233  17.163691  35.473697  252.831965  1.046064   6.879862  1.365776   \n","234  17.040014  34.910008  247.160043  1.010001   6.970001      1.36   \n","235  15.987077  34.784562  248.818672  0.983446   6.789523  1.360007   \n","236  14.506618   34.91518  253.373705  0.962318   6.432506  1.362039   \n","\n","            6         7          8         9   ...        17         18  \\\n","0        23.51      2.89      11.84      1.26  ...  -0.23166  -1.011824   \n","1    21.278296   2.81603  11.196275  1.188981  ... -0.284435  53.734689   \n","2    23.221525  2.660824   10.40902   1.10274  ... -0.256697  72.982541   \n","3    28.059998      2.46       9.56      1.01  ... -0.180905  67.000005   \n","4    34.514028  2.249176   8.730981  0.919482  ... -0.089515  46.055356   \n","..         ...       ...        ...       ...  ...       ...        ...   \n","232  59.001374  3.776701  13.692667  1.810472  ...  0.045031  -0.907958   \n","233  64.762243  3.595175  12.660788  1.706865  ... -0.037477   -0.82086   \n","234  67.120022  3.599996   12.38999  1.689998  ... -0.046559  -0.273615   \n","235  62.786576   3.96099  13.545524  1.845209  ...  0.060919   0.220365   \n","236  54.291795  4.548969  15.551086  2.115901  ...  0.218628   0.535038   \n","\n","            19        20        21         22        23        24         25  \\\n","0        31.82 -0.002122      1.72      20.33      1.91      2.98      18.03   \n","1    32.328129 -0.580078  2.070335  19.735742  1.696621  2.487675  17.128493   \n","2    32.193837  -0.61905  2.194046  19.315705  1.617297  2.296807  16.689017   \n","3        31.63 -0.315632      2.16      19.06      1.63      2.32      16.59   \n","4    30.849497  0.133584  2.037065   18.95874  1.692703   2.46986  16.709872   \n","..         ...       ...       ...        ...       ...       ...        ...   \n","232  31.668169  0.023338  1.393262  10.721651  2.152066  2.218247   9.659082   \n","233  31.755527  0.048732  1.423266  11.056707   2.14545  2.227771  10.067603   \n","234  31.859997  0.054611      1.42  11.609984  2.179998  2.269998  10.699982   \n","235  32.004123  0.016735  1.433809  12.358992   2.28115  2.357569  11.538625   \n","236  32.188914  -0.03641   1.51644  13.092007  2.416692  2.467993  12.317861   \n","\n","           26  \n","0        1.69  \n","1    1.467981  \n","2    1.389718  \n","3        1.41  \n","4    1.483615  \n","..        ...  \n","232  1.932813  \n","233  1.950531  \n","234  2.009998  \n","235  2.132232  \n","236   2.27494  \n","\n","[237 rows x 27 columns]\n"]},{"output_type":"execute_result","data":{"text/plain":["\"\\nX_df.columns = ['X1 (R_m_swe)']\\nX_df.insert(1, 'X2 (HML_returns_swe)', HML_returns_swe, True)\\nX_df.insert(1, 'X3 (SMB_returns_swe)', SMB_returns_swe, True)\\nprint(X_df)\\n\\n# regressand - the dependent variable in a regression\\nY = excess_returns_swe\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":64}],"source":["\n","# regressors \n","\n","X_df = pd.DataFrame(inputs_array[:,1:28]) # take out the date\n","\n","print(X_df)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"s0RpbFlY4Ul6","executionInfo":{"status":"ok","timestamp":1648415266059,"user_tz":-120,"elapsed":380,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":53},"outputId":"7e91ea69-7062-4927-cba2-adfbc9a48d5b","collapsed":true},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nfrom sklearn import linear_model\\nimport statsmodels.api as sm\\n# ACTIVATE YOUR CONDA ENVIRONEMENT AND TYPE THIS:\\n# conda install -c conda-forge statsmodels\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":40}],"source":["'''\n","from sklearn import linear_model\n","import statsmodels.api as sm\n","# ACTIVATE YOUR CONDA ENVIRONEMENT AND TYPE THIS:\n","# conda install -c conda-forge statsmodels\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4qdP0Dd74Ul6","executionInfo":{"status":"ok","timestamp":1648415936040,"user_tz":-120,"elapsed":4,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d428c115-f7f3-4cae-a8a9-f94b569e39e0","collapsed":true},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(237, 27)"]},"metadata":{},"execution_count":65}],"source":["X_df = X_df.to_numpy() #dataframe to num\n","X_df.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1tuEztV-4Ul6"},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","x_train, x_test, y_train, y_test = train_test_split(X_df, y_df, test_size = 0.25, random_state = 100)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZsZ3XnZ44Ul7","executionInfo":{"status":"ok","timestamp":1648415950136,"user_tz":-120,"elapsed":5,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"da8995c6-42dc-4d4d-edf6-507e443e7ac6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nmlr = LinearRegression()  \\nmlr.fit(x_train, y_train)\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":67}],"source":["#mlr = LinearRegression()  \n","#mlr.fit(X_df, Y)\n","'''\n","mlr = LinearRegression()  \n","mlr.fit(x_train, y_train)\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vOph7T704Ul7","executionInfo":{"status":"ok","timestamp":1648415954162,"user_tz":-120,"elapsed":5,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"4ee14709-6949-4369-b56a-d57d9c7a55a7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nprint(\"Intercept: \", mlr.intercept_)\\nprint(\"Coefficients:\",mlr.coef_)\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":68}],"source":["'''\n","print(\"Intercept: \", mlr.intercept_)\n","print(\"Coefficients:\",mlr.coef_)\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TaUijhlI4Ul8","executionInfo":{"status":"ok","timestamp":1648415958910,"user_tz":-120,"elapsed":5,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":105},"outputId":"68e5a7f8-9059-4242-cfd7-5267e477fd8b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n# compute with formulas from the theory\\nyhat = mlr.predict(x_test)\\nSS_Residual = sum((y_test-yhat)**2)   \\nSS_Total = sum((y_test-np.mean(y_test))**2)     \\n\\n# r_squared\\nr_squared_FF3 = 1 - (float(SS_Residual))/SS_Total\\nprint(\"R2 =\", r_squared_FF3)\\n\\n# adjusted_r_squared \\n#adjusted_r_squared = 1 - (1-r_squared_FF3)*(len(y_test)-1)/(len(y_test)-x_test.shape[1]-1)\\n#print(adjusted_r_squared)\\n\\n# Mean squared error\\nMSE_reg = mean_squared_error(y_test,yhat)\\n# Mean absolute error\\nMAE_reg = mean_absolute_error(y_test,yhat)\\n# Root mean squared error\\nRMSE_reg = mean_squared_error(y_test,yhat)**0.5\\n\\nprint(\"MSE =\", MSE_reg)\\nprint(\"MAE =\", MAE_reg)\\nprint(\"Root MSE =\", RMSE_reg )\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":69}],"source":["from sklearn.metrics import mean_absolute_error,mean_squared_error, explained_variance_score, r2_score\n","'''\n","# compute with formulas from the theory\n","yhat = mlr.predict(x_test)\n","SS_Residual = sum((y_test-yhat)**2)   \n","SS_Total = sum((y_test-np.mean(y_test))**2)     \n","\n","# r_squared\n","r_squared_FF3 = 1 - (float(SS_Residual))/SS_Total\n","print(\"R2 =\", r_squared_FF3)\n","\n","# adjusted_r_squared \n","#adjusted_r_squared = 1 - (1-r_squared_FF3)*(len(y_test)-1)/(len(y_test)-x_test.shape[1]-1)\n","#print(adjusted_r_squared)\n","\n","# Mean squared error\n","MSE_reg = mean_squared_error(y_test,yhat)\n","# Mean absolute error\n","MAE_reg = mean_absolute_error(y_test,yhat)\n","# Root mean squared error\n","RMSE_reg = mean_squared_error(y_test,yhat)**0.5\n","\n","print(\"MSE =\", MSE_reg)\n","print(\"MAE =\", MAE_reg)\n","print(\"Root MSE =\", RMSE_reg )\n","'''"]},{"cell_type":"code","source":["# Normalize and scale feature data\n","from sklearn.preprocessing import MinMaxScaler\n","\n","# help(MinMaxScaler)\n","scaler = MinMaxScaler()"],"metadata":{"id":"gmrQsdULv19r"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Now we need to fit our scalar to our training data, so, fit on X_train\n","# This calculates the parameters it needs to perform the actual scaling later on\n","\n","scaler.fit(x_train)\n","\n","# The only reason why we run it on our training set is because we want to prevent what is known as \"Data Leakage\" from the test set\n","# We don't want to assume that we have prior information of the test set. So, we only fit our scalar to the training set.\n","# This is so we don't try to cheat and look into the test set."],"metadata":{"id":"DBAyXpX9v6wy","executionInfo":{"status":"ok","timestamp":1648415965401,"user_tz":-120,"elapsed":394,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"dfd0b57d-fc7e-411d-8507-6078e00b1ee1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["MinMaxScaler()"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["x_train = scaler.transform(x_train) # we just scale the test training data set to be between 0 and 1\n","x_test = scaler.transform(x_test) # we just scale the test data set to be between 0 and 1"],"metadata":{"id":"d97K64lowAzY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Now, if we take a look at these values, we can see that they have been scaled for X_train to be between 0 and 1.\n","\n","x_train # X_train.min() # X_train.max()\n","\n","# And again, we are only fitting on the training set to not acertain information from the test set because it is essentially cheating."],"metadata":{"id":"uuDjsHE1wGXt","executionInfo":{"status":"ok","timestamp":1648415973349,"user_tz":-120,"elapsed":3,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c3c2d064-d334-443a-e87d-fed4b07347bf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.57187636, 0.64694274, 0.64170936, ..., 0.36068793, 0.21028054,\n","        0.1979659 ],\n","       [0.59345796, 0.59359298, 0.66595222, ..., 0.54739215, 0.36409217,\n","        0.67713208],\n","       [0.33460209, 0.72974699, 0.58828333, ..., 0.78532656, 0.22722869,\n","        0.70046839],\n","       ...,\n","       [0.36158946, 0.76698766, 0.59246984, ..., 0.81015776, 0.24520081,\n","        0.75448076],\n","       [0.60094645, 0.64714343, 0.66288483, ..., 0.33264204, 0.19065799,\n","        0.18085807],\n","       [1.        , 0.69031497, 0.65688004, ..., 0.86417674, 0.89914952,\n","        0.47434724]])"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense"],"metadata":{"id":"YhbCkgZcwQ1D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# The two parameter calls that we need to be aware of is \"units\" and \"activation function\".\n","# \"units\" is just another word for neurons. Actually, it means: How many neurons are actually gonna be in this layer.\n","### model = Sequential([Dense(368,activation='relu'), # open your call for Sequential... you actually pass in a list of those layers.\n","                    ### Dense(368,activation='relu'),\n","                    ### Dense(1)]) # since this is my last output layer, I dont want any activation function"],"metadata":{"id":"EU9sj7eKwq3i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# The other way we can do this is the following. This is going to be our preferred method.\n","### model = Sequential() # creating an empty sequential model\n","\n","# More easy to edit now, if we for example want to delete a layer or edit it.\n","# Hidden layers, added one-by-one, in this case 3 layers, with 368 neurons each, using \"relu\"\n","\n","### model.add(Dense(368,activation='relu')) \n","### model.add(Dense(368,activation='relu')) \n","### model.add(Dense(368,activation='relu')) \n","\n","# Output later\n","\n","### model.add(Dense(1)) # since this is my last output layer, I dont want any activation function\n","\n","# Our very last layer, will be just be 1 final output node.\n","# So, the final output layer is actually pretty important.\n","# That is going to be determined by out actual data in our actual situation what we are trying to predict.\n","\n","# Recall, with this particular data set, we are predicting a single numerical return value.\n","# So, what I want in my very last layer is to be a single neuron that produces some sort of price.\n","# So, it is going to predict a return of maybe let's say 1.32% (0.00132) etc.\n","# That is why I am chosing that final layer to just have Dense(1), where it is just going to predict the return.\n","\n","# So, that final output is then going to be measured against the true return, and we will do that with some sort of loss function.\n","# And that is where this final line come into play, which is compiling your model:\n","\n","### model.compile() # The main parameter calls we will look at is the \"optimizer\" and the \"loss\" function\n","\n","# The \"optimizer\" is essentially just asking you how you actuallt want to perform this GRADIENT DESCENT.\n","# So, do you want to use \"optimizer='rmsprop'\", or other methods of optimization, such as the \"adam\" optimizer?\n","\n","# In the \"loss\" parameter, that string code is going to change dependent on what you are actually trying to accomplish here.\n","# For a mean squared error regression problem: loss = 'mse'\n","# We use this as our loss-functionality because our LABEL is a continous value.\n","# This makes sense, since we are actually taking the Mean-Squared-Errors of our predicted values against the true values.\n","# And we are trying to minimize that through our \"optimizer\"."],"metadata":{"id":"lAVM-Flewrg2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Typically what we do, is we try to base the number of neurons or units in our layers from the size of the actual feature data.\n","x_train.shape\n","# So, it looks like we have 113 incoming features.\n","# And it is probably a good range to then have 113 neurons in our layer."],"metadata":{"id":"y4dxPbvvwvYh","executionInfo":{"status":"ok","timestamp":1648415995965,"user_tz":-120,"elapsed":4,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"085a63ae-f1d2-4629-b992-bd081b734781"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(177, 27)"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","source":["# So, we have our model seqential.\n","model = Sequential()\n","\n","# We add in whatever layers we want. Thus, how many neurons and what activation function to use.\n","# Typically what we do, is we try to base the number of neurons or units in our layers from the size of the actual feature data.\n","model.add(Dense(27,activation='relu'))\n","model.add(Dense(13,activation='relu')) \n","#model.add(Dense(1,activation='relu')) \n","# model.add(Dense(113,activation='relu')) \n","\n","# We take care, to make sure that our last output layer matches the actual task that we are trying to solve.\n","model.add(Dense(1))\n","\n","# Aswell as when we are complining it, making sure our loss function matches what we are actually trying to solve.\n","model.compile(optimizer='adam',loss='mse')\n","\n","# And now we have a full model ready to go!\n","\n","# We may be overfitting slightly to the training data, but we will be able to explore that \n","# by passing in validation data along with our training."],"metadata":{"id":"0tI0AaeJw0Sm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_test = np.asarray(x_test).astype('float32') #command to fix ValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float).\n","x_train = np.asarray(x_train).astype('float32')\n","y_test = np.asarray(y_test).astype('float32')\n","y_train = np.asarray(y_train).astype('float32')\n"],"metadata":{"id":"yJbuUWDVxpB8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Now we are ready to train the model or fit the model to the training data.\n","\n","### model.fit(X_train, y_train, epochs=30) # verbose=1\n","# help(model.fit)\n","\n","# We can also pass in the validation data here.\n","# Passing in validation data means that after each epoch of training on the training data,\n","# we will quickly run the testa data and check our loss on the test data.\n","# So, that way we can keep tracking on how well we are performing, not just on our training data,\n","# but also on the test data.\n","# Keep in mind, this testa data will not actually affect weights and biases of our network.\n","# So, Keras is not going to update our model based of the test data for validation data.\n","# Instead, it will only use the training data as it is updating the weights and biases, and continue to\n","# essentially check how well it is doing, on not just the training data, but also on the validation data.\n","\n","model.fit(x_train, y_train, validation_data=(x_test,y_test), batch_size=1, epochs=100) # \n","\n","# For validation_data=(X_test,y_test), TensorFlow might complain if it is not a numerical array.\n","# Because it can not work with panda series or dataframe.\n","\n","# So again, we are training on X_train and Y_train, but as we go along, we want to be checking against our test set.\n","# And that will give us some nice plots to basically realize whether we are overfitting.\n","\n","# If we have a large data set, we are going to feed in our data in batches.\n","# It is very typical to do batch sizes in powers of 2, so 64,128,256 etc.\n","# The smaller the batch size, the longer training is going to take but the less likely you are going to be overfit to your data,\n","# because you are not passing in your entire training set at once.\n","# Instead, you are focusing on these smaller batches.\n","\n","# And we can choose an arbitrary number of epochs, because we dont have any early stopping mechanisms yet.\n","# We will learn about those later on in the course."],"metadata":{"id":"6t4UWs5jw-dC","executionInfo":{"status":"ok","timestamp":1648416192445,"user_tz":-120,"elapsed":142320,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c8bd2dd9-0950-4f06-9c07-20c8a2a89102"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","177/177 [==============================] - 3s 6ms/step - loss: 0.0070 - val_loss: 0.0099\n","Epoch 2/100\n","177/177 [==============================] - 1s 4ms/step - loss: 0.0054 - val_loss: 0.0070\n","Epoch 3/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0052 - val_loss: 0.0061\n","Epoch 4/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0047 - val_loss: 0.0060\n","Epoch 5/100\n","177/177 [==============================] - 2s 11ms/step - loss: 0.0045 - val_loss: 0.0079\n","Epoch 6/100\n","177/177 [==============================] - 1s 8ms/step - loss: 0.0044 - val_loss: 0.0055\n","Epoch 7/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0041 - val_loss: 0.0059\n","Epoch 8/100\n","177/177 [==============================] - 1s 5ms/step - loss: 0.0044 - val_loss: 0.0061\n","Epoch 9/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0043 - val_loss: 0.0071\n","Epoch 10/100\n","177/177 [==============================] - 1s 4ms/step - loss: 0.0046 - val_loss: 0.0060\n","Epoch 11/100\n","177/177 [==============================] - 1s 8ms/step - loss: 0.0044 - val_loss: 0.0067\n","Epoch 12/100\n","177/177 [==============================] - 1s 7ms/step - loss: 0.0038 - val_loss: 0.0077\n","Epoch 13/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0043 - val_loss: 0.0071\n","Epoch 14/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0039 - val_loss: 0.0084\n","Epoch 15/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0040 - val_loss: 0.0059\n","Epoch 16/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0038 - val_loss: 0.0060\n","Epoch 17/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0039 - val_loss: 0.0076\n","Epoch 18/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0039 - val_loss: 0.0065\n","Epoch 19/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0041 - val_loss: 0.0062\n","Epoch 20/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0038 - val_loss: 0.0060\n","Epoch 21/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0039 - val_loss: 0.0073\n","Epoch 22/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0039 - val_loss: 0.0063\n","Epoch 23/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0041 - val_loss: 0.0062\n","Epoch 24/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0038 - val_loss: 0.0059\n","Epoch 25/100\n","177/177 [==============================] - 1s 4ms/step - loss: 0.0038 - val_loss: 0.0098\n","Epoch 26/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0037 - val_loss: 0.0060\n","Epoch 27/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0038 - val_loss: 0.0063\n","Epoch 28/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0041 - val_loss: 0.0095\n","Epoch 29/100\n","177/177 [==============================] - 1s 4ms/step - loss: 0.0042 - val_loss: 0.0066\n","Epoch 30/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0038 - val_loss: 0.0062\n","Epoch 31/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0038 - val_loss: 0.0079\n","Epoch 32/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0038 - val_loss: 0.0059\n","Epoch 33/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0035 - val_loss: 0.0063\n","Epoch 34/100\n","177/177 [==============================] - 1s 4ms/step - loss: 0.0036 - val_loss: 0.0062\n","Epoch 35/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0036 - val_loss: 0.0061\n","Epoch 36/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0036 - val_loss: 0.0061\n","Epoch 37/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0034 - val_loss: 0.0061\n","Epoch 38/100\n","177/177 [==============================] - 3s 17ms/step - loss: 0.0038 - val_loss: 0.0065\n","Epoch 39/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0038 - val_loss: 0.0061\n","Epoch 40/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0036 - val_loss: 0.0062\n","Epoch 41/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0036 - val_loss: 0.0070\n","Epoch 42/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0037 - val_loss: 0.0059\n","Epoch 43/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0035 - val_loss: 0.0062\n","Epoch 44/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0036 - val_loss: 0.0063\n","Epoch 45/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0035 - val_loss: 0.0062\n","Epoch 46/100\n","177/177 [==============================] - 1s 8ms/step - loss: 0.0035 - val_loss: 0.0073\n","Epoch 47/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0037 - val_loss: 0.0062\n","Epoch 48/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0034 - val_loss: 0.0077\n","Epoch 49/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0036 - val_loss: 0.0061\n","Epoch 50/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0034 - val_loss: 0.0066\n","Epoch 51/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0036 - val_loss: 0.0064\n","Epoch 52/100\n","177/177 [==============================] - 1s 4ms/step - loss: 0.0034 - val_loss: 0.0062\n","Epoch 53/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0034 - val_loss: 0.0078\n","Epoch 54/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0034 - val_loss: 0.0065\n","Epoch 55/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0034 - val_loss: 0.0063\n","Epoch 56/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0033 - val_loss: 0.0063\n","Epoch 57/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0034 - val_loss: 0.0065\n","Epoch 58/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0033 - val_loss: 0.0067\n","Epoch 59/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0035 - val_loss: 0.0068\n","Epoch 60/100\n","177/177 [==============================] - 1s 4ms/step - loss: 0.0034 - val_loss: 0.0064\n","Epoch 61/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0035 - val_loss: 0.0065\n","Epoch 62/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0034 - val_loss: 0.0065\n","Epoch 63/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0033 - val_loss: 0.0063\n","Epoch 64/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0031 - val_loss: 0.0064\n","Epoch 65/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0035 - val_loss: 0.0065\n","Epoch 66/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0033 - val_loss: 0.0071\n","Epoch 67/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0033 - val_loss: 0.0064\n","Epoch 68/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0032 - val_loss: 0.0064\n","Epoch 69/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0031 - val_loss: 0.0068\n","Epoch 70/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0032 - val_loss: 0.0064\n","Epoch 71/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0033 - val_loss: 0.0065\n","Epoch 72/100\n","177/177 [==============================] - 2s 9ms/step - loss: 0.0032 - val_loss: 0.0063\n","Epoch 73/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0033 - val_loss: 0.0068\n","Epoch 74/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0033 - val_loss: 0.0063\n","Epoch 75/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0032 - val_loss: 0.0067\n","Epoch 76/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0032 - val_loss: 0.0068\n","Epoch 77/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0033 - val_loss: 0.0068\n","Epoch 78/100\n","177/177 [==============================] - 2s 13ms/step - loss: 0.0032 - val_loss: 0.0067\n","Epoch 79/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0032 - val_loss: 0.0069\n","Epoch 80/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0033 - val_loss: 0.0071\n","Epoch 81/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0032 - val_loss: 0.0067\n","Epoch 82/100\n","177/177 [==============================] - 1s 4ms/step - loss: 0.0030 - val_loss: 0.0068\n","Epoch 83/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0032 - val_loss: 0.0066\n","Epoch 84/100\n","177/177 [==============================] - 1s 4ms/step - loss: 0.0032 - val_loss: 0.0069\n","Epoch 85/100\n","177/177 [==============================] - 1s 4ms/step - loss: 0.0031 - val_loss: 0.0068\n","Epoch 86/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0032 - val_loss: 0.0065\n","Epoch 87/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0031 - val_loss: 0.0065\n","Epoch 88/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0030 - val_loss: 0.0067\n","Epoch 89/100\n","177/177 [==============================] - 1s 7ms/step - loss: 0.0031 - val_loss: 0.0064\n","Epoch 90/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0031 - val_loss: 0.0070\n","Epoch 91/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0031 - val_loss: 0.0071\n","Epoch 92/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0033 - val_loss: 0.0067\n","Epoch 93/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0030 - val_loss: 0.0065\n","Epoch 94/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0033 - val_loss: 0.0067\n","Epoch 95/100\n","177/177 [==============================] - 2s 12ms/step - loss: 0.0031 - val_loss: 0.0068\n","Epoch 96/100\n","177/177 [==============================] - 2s 9ms/step - loss: 0.0030 - val_loss: 0.0067\n","Epoch 97/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0030 - val_loss: 0.0070\n","Epoch 98/100\n","177/177 [==============================] - 1s 8ms/step - loss: 0.0032 - val_loss: 0.0065\n","Epoch 99/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0029 - val_loss: 0.0062\n","Epoch 100/100\n","177/177 [==============================] - 1s 4ms/step - loss: 0.0032 - val_loss: 0.0064\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f3782be18d0>"]},"metadata":{},"execution_count":80}]},{"cell_type":"code","source":["# Create this code to look at the model history.\n","# This returns back the dictionary of the historical corresponding losses.\n","# Which means that I can pass this into a DataFrame.\n","\n","loss_df = pd.DataFrame(model.history.history) # my loss DataFrame\n","\n","# Because we passed in the validation data, what I can now do is when I convert this into a dataframe:\n","pd.DataFrame(model.history.history)\n","# I not just get my loss on the training set, but I also get this \"val_loss\".\n","# And this is my loss on that test set, that validation data.\n","\n","# And now, I can directly compare the loss on training versus the loss on test or validation in order to see\n","# if I am overfitting to the training data on my model.\n","\n","# And the best way to do this is by simpy plotting these.\n"],"metadata":{"id":"viUfeoHTyhDa","executionInfo":{"status":"ok","timestamp":1648416197968,"user_tz":-120,"elapsed":9,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":423},"outputId":"7b9729a4-3b0d-44cc-d8fe-315d2387ccf5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        loss  val_loss\n","0   0.006997  0.009884\n","1   0.005383  0.007022\n","2   0.005191  0.006080\n","3   0.004705  0.006026\n","4   0.004518  0.007937\n","..       ...       ...\n","95  0.002998  0.006722\n","96  0.002994  0.006963\n","97  0.003169  0.006458\n","98  0.002887  0.006190\n","99  0.003152  0.006412\n","\n","[100 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-bbbadf7a-0813-4b98-9490-0fef4b40388d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>loss</th>\n","      <th>val_loss</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.006997</td>\n","      <td>0.009884</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.005383</td>\n","      <td>0.007022</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.005191</td>\n","      <td>0.006080</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.004705</td>\n","      <td>0.006026</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.004518</td>\n","      <td>0.007937</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>0.002998</td>\n","      <td>0.006722</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>0.002994</td>\n","      <td>0.006963</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>0.003169</td>\n","      <td>0.006458</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>0.002887</td>\n","      <td>0.006190</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>0.003152</td>\n","      <td>0.006412</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bbbadf7a-0813-4b98-9490-0fef4b40388d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-bbbadf7a-0813-4b98-9490-0fef4b40388d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-bbbadf7a-0813-4b98-9490-0fef4b40388d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":81}]},{"cell_type":"code","source":["# And then I can actually plot this out.\n","\n","loss_df.plot()\n","\n","# Typically in Neural Network training, you start of with a very high loss during your first couple of epoch runs.\n","# And then, as your weights and biases are starting to adjusting, you hopefully see kind of a steady but steep decline\n","# in your loss, or your error. And eventually, it will level off where you are not really doing any sort of improvements\n","# as you train more and more.\n","\n","# I can directly compare the plot behavior of my \"blue\" training loss, versus my \"orange\" validation loss.\n","# We want a signal where it is decreasing, both the training loss and the validation loss.\n","# And then there should be no increase in in the validation set.\n","# Actually, what that means technically, we could have continued training.\n","# If the validation loss is also going down, that is an indicator that we could continue training without overfitting to our training data.\n","\n","# If you saw this orange line begin to spike after some of these epochs, so it is starting to go up and up and up,\n","# that means that you are overtraining to the training data, because now you have a much larger loss on your validation data."],"metadata":{"id":"EPOfZA4byjgL","executionInfo":{"status":"ok","timestamp":1648416202541,"user_tz":-120,"elapsed":1294,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":283},"outputId":"5a2de262-b3b9-4ece-dfda-d7b1993d7cb6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f3782ab3d10>"]},"metadata":{},"execution_count":82},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model.evaluate(x_test, y_test, verbose=0)\n","model.evaluate(x_train, y_train, verbose=0)\n","test_predictions = model.predict(x_test)\n","test_predictions = pd.Series(test_predictions.reshape(60,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"M_q88iotyz-8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# So, what I could do is say, create a scatterplot, based of this data in my prediction dataframe.\n","sns.scatterplot(x='Test True Y', y='Model Predictions', data = pred_df)\n","\n","# And we see this result"],"metadata":{"id":"cnjngfxLzAWq","executionInfo":{"status":"ok","timestamp":1647459830226,"user_tz":-60,"elapsed":7,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":297},"outputId":"25424b69-e6a1-4abb-cff2-a75d5732d7b5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f7528875290>"]},"metadata":{},"execution_count":35},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["from sklearn.metrics import mean_absolute_error,mean_squared_error, explained_variance_score, r2_score\n"],"metadata":{"id":"yQu4h0G5zCTZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Mean absolute error\n","mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])"],"metadata":{"id":"ETCVAQFUzEq9","executionInfo":{"status":"ok","timestamp":1648416239605,"user_tz":-120,"elapsed":4,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"66b4b590-aab7-41dd-ae73-309090ebd536"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.055406343"]},"metadata":{},"execution_count":86}]},{"cell_type":"code","source":["# Mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])"],"metadata":{"id":"hwaq_R0yzF9Y","executionInfo":{"status":"ok","timestamp":1648416241340,"user_tz":-120,"elapsed":2,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"53ab3b84-f005-4df8-949e-24498dcc8463"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.0064124325"]},"metadata":{},"execution_count":87}]},{"cell_type":"code","source":["# Root mean squared error\n","mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5"],"metadata":{"id":"W4dQRVWTzIuF","executionInfo":{"status":"ok","timestamp":1648416247146,"user_tz":-120,"elapsed":4,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"55baa00f-7714-4eef-8a8a-0234eaa80c6d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.08007766560678596"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":["explained_variance_score(y_test, test_predictions)"],"metadata":{"id":"GSnB_WnizJuc","executionInfo":{"status":"ok","timestamp":1648416247533,"user_tz":-120,"elapsed":2,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"df38a82d-f86c-4d98-9318-f1e941d88299"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-0.08532559871673584"]},"metadata":{},"execution_count":89}]},{"cell_type":"code","source":["# Mean squared error\n","MSE_ANN = mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Mean absolute error\n","MAE_ANN = mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","# Root mean squared error\n","RMSE_ANN = mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5"],"metadata":{"id":"8-KtZqmAu57v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[" r_squared_ANN = r2_score(y_test, test_predictions)\n"," print(r_squared_ANN)\n"," print(MSE_ANN)\n"," print(MAE_ANN)\n"," print(RMSE_ANN)"],"metadata":{"id":"eiB2OiIrzMAg","executionInfo":{"status":"ok","timestamp":1648416254608,"user_tz":-120,"elapsed":3,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ed8bf8f7-0e9a-4d21-e917-955bca862c03"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-0.0902137086558803\n","0.0064124325\n","0.055406343\n","0.08007766560678596\n"]}]},{"cell_type":"code","source":["# What we can also compare is our predictions, and we can plot them out, against a perfect fit.\n","\n","plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions)\n","plt.plot(y_test,y_test,'red')\n","\n","# The red line represents the perfect prediction line.\n","# We notice that we are being punished here by these outliers.\n","\n","# What may be worth, is to retrain our model just on that bottom 99 % of these returns.\n","# And so, if come up to a situation where our returns is 10% for example, we will just say sorry, our model is not good enough for this.\n","# And we will only refit to the bottom of that 99%.\n","\n","# Again, it depends on the type of context and what question you are trying to answer, or what problem we are trying to solve."],"metadata":{"id":"2nOAPSRRzNu8","executionInfo":{"status":"ok","timestamp":1648416267545,"user_tz":-120,"elapsed":709,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":391},"outputId":"d915e8fb-cb61-4438-b228-b0d2b1dedf9d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f3782558d10>]"]},"metadata":{},"execution_count":92},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":[" **Second option: Early stopping\n","Used to prevent overfitting** \n","\n"],"metadata":{"id":"8CYs3PvA2UPR"}},{"cell_type":"code","source":["model_2 = Sequential()\n","\n","model_2.add(Dense(27,activation='relu'))\n","model_2.add(Dense(13,activation='relu'))\n","\n","\n","#model.add(Dense(56,activation='relu')) \n","# model.add(Dense(113,activation='relu')) \n","\n","model_2.add(Dense(1))\n","\n","model_2.compile(optimizer='adam',loss='mse')"],"metadata":{"id":"dtzIUCtY3O69"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.callbacks import EarlyStopping"],"metadata":{"id":"mbxewYhM2Zu_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# help(EarlyStopping)\n","early_stop = EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=25)\n","model_2.fit(x_train, y_train, validation_data=(x_test,y_test), batch_size=1, epochs=100, callbacks=[early_stop])"],"metadata":{"id":"T5zk1cD-2b2F","executionInfo":{"status":"ok","timestamp":1648416494718,"user_tz":-120,"elapsed":14618,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5611b29c-2ccd-4433-8a55-b960355cea8f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0081 - val_loss: 0.0083\n","Epoch 2/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0052 - val_loss: 0.0072\n","Epoch 3/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0048 - val_loss: 0.0068\n","Epoch 4/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0042 - val_loss: 0.0061\n","Epoch 5/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0044 - val_loss: 0.0059\n","Epoch 6/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0040 - val_loss: 0.0060\n","Epoch 7/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0044 - val_loss: 0.0063\n","Epoch 8/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0039 - val_loss: 0.0063\n","Epoch 9/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0041 - val_loss: 0.0061\n","Epoch 10/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0046 - val_loss: 0.0061\n","Epoch 11/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0039 - val_loss: 0.0061\n","Epoch 12/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0041 - val_loss: 0.0063\n","Epoch 13/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0042 - val_loss: 0.0067\n","Epoch 14/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0036 - val_loss: 0.0067\n","Epoch 15/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0040 - val_loss: 0.0065\n","Epoch 16/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0038 - val_loss: 0.0063\n","Epoch 17/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0042 - val_loss: 0.0062\n","Epoch 18/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0038 - val_loss: 0.0063\n","Epoch 19/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0037 - val_loss: 0.0064\n","Epoch 20/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0038 - val_loss: 0.0063\n","Epoch 21/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0040 - val_loss: 0.0063\n","Epoch 22/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0037 - val_loss: 0.0074\n","Epoch 23/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0040 - val_loss: 0.0059\n","Epoch 24/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0037 - val_loss: 0.0060\n","Epoch 25/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0037 - val_loss: 0.0060\n","Epoch 26/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0035 - val_loss: 0.0063\n","Epoch 27/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0035 - val_loss: 0.0060\n","Epoch 28/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0037 - val_loss: 0.0083\n","Epoch 29/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0037 - val_loss: 0.0061\n","Epoch 30/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0035 - val_loss: 0.0064\n","Epoch 30: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f377fe96bd0>"]},"metadata":{},"execution_count":103}]},{"cell_type":"code","source":["model_loss = pd.DataFrame(model_2.history.history)\n","model_loss.plot()"],"metadata":{"id":"tR3mUEuY2htN","executionInfo":{"status":"ok","timestamp":1648416508663,"user_tz":-120,"elapsed":502,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":283},"outputId":"cd724c87-c31b-4fe4-b69d-4e542c518fa4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f37823072d0>"]},"metadata":{},"execution_count":104},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model_2.evaluate(x_test, y_test, verbose=0)\n","model_2.evaluate(x_train, y_train, verbose=0)\n","test_predictions = model_2.predict(x_test)\n","test_predictions = pd.Series(test_predictions.reshape(60,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"id":"YcKuOSMH2kRD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[" r_squared_ANN_2 = r2_score(y_test, test_predictions)\n"," print(r_squared_ANN_2)"],"metadata":{"id":"2Lr6Gwxs2sLh","executionInfo":{"status":"ok","timestamp":1648416515651,"user_tz":-120,"elapsed":611,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"63bdf5b3-7f56-431f-b769-850fa0032a7e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-0.08864113014429797\n"]}]},{"cell_type":"code","source":["MAE_ANN2 = mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","MSE_ANN2 = mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","RMSE_ANN2 = mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","\n","\n","print(MSE_ANN2)\n","print(MAE_ANN2)\n","print(RMSE_ANN2)"],"metadata":{"id":"ADoK6J7NwvrK","executionInfo":{"status":"ok","timestamp":1648416452946,"user_tz":-120,"elapsed":682,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3d2c9d16-d657-49f9-80cd-609c53ca5800"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.005734221\n","0.053649146\n","0.07572463983707976\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"ouoGuj7H4wOH","executionInfo":{"status":"ok","timestamp":1648416541048,"user_tz":-120,"elapsed":408,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"outputId":"9e5cc0c3-594e-4f8c-8f9e-b5a2fcdc2ebc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f377fbbd590>]"]},"metadata":{},"execution_count":107},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["**Option 3:** **Dropout**"],"metadata":{"id":"pQoOs_nR3zMx"}},{"cell_type":"code","source":["#@title\n","from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.metrics import Accuracy"],"metadata":{"cellView":"code","id":"k9Wvm0bt34wm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title\n","model_3 = Sequential()\n","\n","model_3.add(Dense(27,activation='relu')) \n","model_3.add(Dropout(0.25)) # half of (25%) these neurons will be turned of randomly during each batch\n","\n","model_3.add(Dense(13,activation='relu'))\n","model_3.add(Dropout(0.25))\n","\n","model_3.add(Dense(6,activation='relu'))\n","model_3.add(Dropout(0.25))\n","\n","\n","# model.add(Dense(56,activation='relu')) \n","# model.add(Dropout(0.3)) # half of (50%) these neurons will be turned of randomly during each batch\n","\n","\n","model_3.add(Dense(1))\n","\n","model_3.compile(optimizer='adam',loss='mse')"],"metadata":{"cellView":"code","id":"9usdzSzj37oc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title\n","model_3.fit(x_train, y_train, validation_data=(x_test,y_test), batch_size=1, epochs=100, callbacks=[early_stop])"],"metadata":{"cellView":"code","id":"nkhv8oZ14A5u","executionInfo":{"status":"ok","timestamp":1648416600295,"user_tz":-120,"elapsed":22475,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"fd8308ed-47a2-4bbf-f4a1-b7206a75d650"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","177/177 [==============================] - 3s 9ms/step - loss: 0.0241 - val_loss: 0.0061\n","Epoch 2/100\n","177/177 [==============================] - 1s 7ms/step - loss: 0.0191 - val_loss: 0.0059\n","Epoch 3/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0155 - val_loss: 0.0059\n","Epoch 4/100\n","177/177 [==============================] - 1s 5ms/step - loss: 0.0136 - val_loss: 0.0059\n","Epoch 5/100\n","177/177 [==============================] - 1s 5ms/step - loss: 0.0103 - val_loss: 0.0059\n","Epoch 6/100\n","177/177 [==============================] - 1s 6ms/step - loss: 0.0087 - val_loss: 0.0060\n","Epoch 7/100\n","177/177 [==============================] - 1s 5ms/step - loss: 0.0110 - val_loss: 0.0059\n","Epoch 8/100\n","177/177 [==============================] - 1s 4ms/step - loss: 0.0079 - val_loss: 0.0059\n","Epoch 9/100\n","177/177 [==============================] - 1s 5ms/step - loss: 0.0067 - val_loss: 0.0059\n","Epoch 10/100\n","177/177 [==============================] - 1s 8ms/step - loss: 0.0069 - val_loss: 0.0059\n","Epoch 11/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0063 - val_loss: 0.0059\n","Epoch 12/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0059 - val_loss: 0.0060\n","Epoch 13/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0061 - val_loss: 0.0060\n","Epoch 14/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0056 - val_loss: 0.0059\n","Epoch 15/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0050 - val_loss: 0.0059\n","Epoch 16/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0054 - val_loss: 0.0059\n","Epoch 17/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0052 - val_loss: 0.0059\n","Epoch 18/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0049 - val_loss: 0.0059\n","Epoch 19/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0049 - val_loss: 0.0060\n","Epoch 20/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0045 - val_loss: 0.0059\n","Epoch 21/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0046 - val_loss: 0.0059\n","Epoch 22/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0050 - val_loss: 0.0059\n","Epoch 23/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0048 - val_loss: 0.0059\n","Epoch 24/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0047 - val_loss: 0.0059\n","Epoch 25/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0048 - val_loss: 0.0059\n","Epoch 26/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0044 - val_loss: 0.0060\n","Epoch 27/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0046 - val_loss: 0.0059\n","Epoch 28/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0045 - val_loss: 0.0059\n","Epoch 29/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0043 - val_loss: 0.0060\n","Epoch 30/100\n","177/177 [==============================] - 0s 2ms/step - loss: 0.0045 - val_loss: 0.0059\n","Epoch 31/100\n","177/177 [==============================] - 0s 3ms/step - loss: 0.0044 - val_loss: 0.0059\n","Epoch 32/100\n","177/177 [==============================] - 1s 3ms/step - loss: 0.0044 - val_loss: 0.0060\n","Epoch 32: early stopping\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f377fc86990>"]},"metadata":{},"execution_count":110}]},{"cell_type":"code","source":["#@title\n","model_loss = pd.DataFrame(model_3.history.history)\n","model_loss.plot()"],"metadata":{"cellView":"code","id":"tApWdCFF4DNp","executionInfo":{"status":"ok","timestamp":1648416607794,"user_tz":-120,"elapsed":466,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/","height":285},"outputId":"28820095-5785-47d0-d2db-a1a5b0326e2a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f377fc5b890>"]},"metadata":{},"execution_count":111},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#@title\n","model_3.evaluate(x_test, y_test, verbose=0)\n","model_3.evaluate(x_train, y_train, verbose=0)\n","test_predictions = model_3.predict(x_test)\n","test_predictions = pd.Series(test_predictions.reshape(60,))\n","pred_df = pd.DataFrame(y_test, columns=['Test True Y'])\n","pred_df = pd.concat([pred_df,test_predictions],axis=1)\n","pred_df.columns = ['Test True Y', 'Model Predictions']"],"metadata":{"cellView":"code","id":"qmxzps_h4Fz8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["r_squared_ANN_3 = r2_score(y_test, test_predictions)\n","print(r_squared_ANN_3)"],"metadata":{"id":"wQTWnOr7VhPN","executionInfo":{"status":"ok","timestamp":1648416626685,"user_tz":-120,"elapsed":392,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"00069a3c-4213-4f2c-8fd0-664042e542ff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-0.02064477133482079\n"]}]},{"cell_type":"code","source":["MAE_ANN3 = mean_absolute_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","MSE_ANN3 = mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])\n","RMSE_ANN3 = mean_squared_error(pred_df['Test True Y'],pred_df['Model Predictions'])**0.5\n","\n","r_squared_ANN3 = r2_score(y_test, test_predictions)\n","print(r_squared_ANN3)\n","print(MSE_ANN3)\n","print(MAE_ANN3)\n","print(RMSE_ANN3)"],"metadata":{"id":"NQ-PrDudxI4O","executionInfo":{"status":"ok","timestamp":1648416632101,"user_tz":-120,"elapsed":358,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1c66d951-e307-40b5-b318-8117f223993c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-0.02064477133482079\n","0.0060032415\n","0.05218403\n","0.07748058802290425\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(12,6))\n","plt.scatter(y_test, test_predictions)\n","plt.plot(y_test,y_test,'red')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"PUnOfLMs4yNk","executionInfo":{"status":"ok","timestamp":1648416642778,"user_tz":-120,"elapsed":860,"user":{"displayName":"Nikolaos Voutos","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01665117412719434514"}},"outputId":"d63ffc1e-55df-4899-9c69-9b72f3a3beed"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f377fa2f090>]"]},"metadata":{},"execution_count":117},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x432 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]}],"metadata":{"interpreter":{"hash":"eff7915ed95bd9d7cf043bb408fc79260ff59cd9d8a2dbba750b77fe9d76769d"},"kernelspec":{"display_name":"Python 3.7.11 64-bit ('my_tensorflow_new': conda)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.11"},"orig_nbformat":4,"colab":{"name":"neural_network_strat_test1","provenance":[{"file_id":"1GmufrgSK0uUKaD8oXypcpFoykhCtOHGC","timestamp":1648412513365},{"file_id":"1zzjI5nL3aW3l7qUkF73PLEvfSuOQralB","timestamp":1647187765437},{"file_id":"1RpN-v0GiCJ4SLhN789d5ZYj3yzSpysEw","timestamp":1647182046044},{"file_id":"1g9dgiH-lNqXqwMkf4hTLwpONPgywFzTM","timestamp":1646779884853}],"collapsed_sections":[]}},"nbformat":4,"nbformat_minor":0}